{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"/imports/lib/ethereum","imported":["registrar"],"specifiers":[{"kind":"named","imported":"registrar","local":"registrar"}]},{"source":"/imports/lib/helpers/helperFunctions","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Helpers"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/templates/status/auction.js","filenameRelative":"/imports/templates/status/auction.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/templates/status/auction.js.map","sourceFileName":"/imports/templates/status/auction.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"auction"},"ignored":false,"code":"var registrar;module.import('/imports/lib/ethereum',{\"registrar\":function(v){registrar=v}});var Helpers;module.import('/imports/lib/helpers/helperFunctions',{\"default\":function(v){Helpers=v}});\n\n\nTemplate['status-auction'].onCreated(function () {\n  TemplateVar.set(this, 'entryData', Template.instance().data.entry);\n});\n\nTemplate['status-auction'].events({\n  'submit .new-bid': function () {\n    function submitNewBid(event) {\n      event.preventDefault();\n\n      var target = event.target;\n      var bidAmount = target.bidAmount.value;\n      var depositAmount = target.depositAmount.value;\n      var name = Session.get('searched');\n      var masterPassword = 'asdf';\n      var template = Template.instance();\n      var accounts = EthAccounts.find().fetch();\n\n      if (accounts.length == 0) {\n        alert('No accounts added to dapp');\n      } else {\n        (function () {\n          TemplateVar.set(template, 'bidding', true);\n          var owner = accounts[0].address;\n          var bid = registrar.bidFactory(name, owner, bidAmount, masterPassword); //todo: derive the salt using the password and the name\n          console.log('Bid: ', bid);\n          registrar.submitBid(bid, {\n            value: depositAmount,\n            from: owner,\n            gas: 500000\n          }, function (err, txid) {\n            if (err) {\n              TemplateVar.set(template, 'bidding', false);\n              alert(err);\n              return;\n            }\n            console.log(txid);\n            Helpers.checkTxSuccess(txid, function (err, isSuccessful) {\n              if (err) {\n                alert(err);\n                TemplateVar.set(template, 'bidding', false);\n                return;\n              }\n              if (isSuccessful) {\n                MyBids.insert({\n                  txid: txid,\n                  name: name,\n                  owner: owner,\n                  fullName: name + '.eth',\n                  bidAmount: bidAmount,\n                  depositAmount: depositAmount,\n                  date: Date.now(),\n                  masterPassword: masterPassword,\n                  bid: bid,\n                  revealed: false\n                });\n              } else {\n                alert('The transaction failed');\n              }\n              TemplateVar.set(template, 'bidding', false);\n            });\n          });\n        })();\n      }\n    }\n\n    return submitNewBid;\n  }()\n});\n\nTemplate['status-auction'].helpers({\n  registrationDate: function () {\n    function registrationDate() {\n      var date = new Date(TemplateVar.get('entryData').registrationDate * 1000);\n      return date.toLocaleString();\n    }\n\n    return registrationDate;\n  }(),\n  bidding: function () {\n    function bidding() {\n      return TemplateVar.get('bidding');\n    }\n\n    return bidding;\n  }()\n});\n\nTemplate['aside-auction'].helpers({\n  bids: function () {\n    function bids() {\n      var name = Session.get('searched');\n      return MyBids.find({ name: name });\n    }\n\n    return bids;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/templates/status/auction.js"],"names":["registrar","Helpers","Template","onCreated","TemplateVar","set","instance","data","entry","events","event","preventDefault","target","bidAmount","value","depositAmount","name","Session","get","masterPassword","template","accounts","EthAccounts","find","fetch","length","alert","owner","address","bid","bidFactory","console","log","submitBid","from","gas","err","txid","checkTxSuccess","isSuccessful","MyBids","insert","fullName","date","Date","now","revealed","helpers","registrationDate","toLocaleString","bidding","bids"],"mappings":"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","file":"/imports/templates/status/auction.js.map","sourcesContent":["import { registrar } from '/imports/lib/ethereum';\nimport Helpers from '/imports/lib/helpers/helperFunctions';\n\nTemplate['status-auction'].onCreated(function() {\n  TemplateVar.set(this, 'entryData', Template.instance().data.entry);\n});\n\nTemplate['status-auction'].events({\n  'submit .new-bid'(event) {\n    event.preventDefault();\n    \n    const target = event.target;\n    const bidAmount = target.bidAmount.value;\n    const depositAmount = target.depositAmount.value;\n    const name = Session.get('searched');\n    const masterPassword = 'asdf';\n    const template = Template.instance();\n    let accounts = EthAccounts.find().fetch();\n    \n    if (accounts.length == 0) {\n      alert('No accounts added to dapp');\n    } else {\n      TemplateVar.set(template, 'bidding', true)\n      let owner = accounts[0].address;\n      let bid = registrar.bidFactory(name, owner, bidAmount,\n        masterPassword);//todo: derive the salt using the password and the name\n      console.log('Bid: ', bid);\n      registrar.submitBid(bid, {\n        value: depositAmount, \n        from: owner,\n        gas: 500000\n      }, (err, txid) => {\n        if (err) {\n          TemplateVar.set(template, 'bidding', false)\n          alert(err)\n          return;\n        } \n        console.log(txid)\n        Helpers.checkTxSuccess(txid, (err, isSuccessful) => {\n          if (err) {\n            alert(err)\n            TemplateVar.set(template, 'bidding', false)\n            return;\n          }\n          if (isSuccessful) {\n            MyBids.insert({\n              txid,\n              name,\n              owner,\n              fullName: name + '.eth',\n              bidAmount,\n              depositAmount,\n              date: Date.now(),\n              masterPassword,\n              bid: bid,\n              revealed: false\n            });\n          } else {\n            alert('The transaction failed')\n          }\n          TemplateVar.set(template, 'bidding', false)\n        })\n      });\n    }\n  }\n})\n\nTemplate['status-auction'].helpers({\n  registrationDate() {\n    var date = new Date(TemplateVar.get('entryData').registrationDate * 1000);\n    return date.toLocaleString();\n  },\n  bidding() {\n    return TemplateVar.get('bidding')\n  }\n})\n\nTemplate['aside-auction'].helpers({\n  bids() {\n    const name = Session.get('searched');\n    return MyBids.find({name: name});\n  }\n})\n"]},"hash":"1e0c6c673bcc04a413fbdb8745e19fc1d5d95c16"}
