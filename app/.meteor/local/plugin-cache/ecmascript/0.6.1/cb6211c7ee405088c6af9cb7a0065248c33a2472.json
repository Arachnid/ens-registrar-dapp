{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/imports/lib/helpers/templateHelpers.js","filenameRelative":"/imports/lib/helpers/templateHelpers.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/lib/helpers/templateHelpers.js.map","sourceFileName":"/imports/lib/helpers/templateHelpers.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"templateHelpers"},"ignored":false,"code":"/**\nHelper functions\n\n@module Helpers\n**/\n\n/**\nGlobal template helpers\n\n@class TemplateHelpers\n@constructor\n**/\n\n/**\nA simple template helper to log objects in the console.\n\n@method (debug)\n**/\n\nTemplate.registerHelper('debug', function (object) {\n    console.log(object);\n});\n\n/**\nFormats a timestamp to any format given.\n\n    {{formatTime myTime \"YYYY-MM-DD\"}}\n\n@method (formatTime)\n@param {String} time         The timstamp, can be string or unix format\n@param {String} format       the format string, can also be \"iso\", to format to ISO string, or \"fromnow\"\n//@param {Boolean} realTime    Whether or not this helper should re-run every 10s\n@return {String} The formated time\n**/\n\nTemplate.registerHelper('formatTime', Helpers.formatTime);\n\n/**\nFormats a number.\n\n    {{formatNumber myNumber \"0,0.0[0000]\"}}\n\n@method (formatNumber)\n@param {String} number\n@param {String} format       the format string\n@return {String} The formatted number\n**/\n\nTemplate.registerHelper('formatNumber', function (number, format) {\n    if (format instanceof Spacebars.kw) format = null;\n\n    if (number instanceof BigNumber) number = number.toNumber();\n\n    format = format || '0,0.0[0000]';\n\n    if (!_.isFinite(number)) number = numeral().unformat(number);\n\n    if (_.isFinite(number)) return numeral(number).format(format);\n});","ast":null,"map":{"version":3,"sources":["/imports/lib/helpers/templateHelpers.js"],"names":["Template","registerHelper","object","console","log","Helpers","formatTime","number","format","Spacebars","kw","BigNumber","toNumber","_","isFinite","numeral","unformat"],"mappings":"AAAA;;;;;;AAMA;;;;;;;AAOA;;;;;;AAMAA,SAASC,cAAT,CAAwB,OAAxB,EAAiC,UAASC,MAAT,EAAgB;AAC7CC,YAAQC,GAAR,CAAYF,MAAZ;AACH,CAFD;;AAMA;;;;;;;;;;;;AAYAF,SAASC,cAAT,CAAwB,YAAxB,EAAsCI,QAAQC,UAA9C;;AAGA;;;;;;;;;;;AAWAN,SAASC,cAAT,CAAwB,cAAxB,EAAwC,UAASM,MAAT,EAAiBC,MAAjB,EAAwB;AAC5D,QAAGA,kBAAkBC,UAAUC,EAA/B,EACIF,SAAS,IAAT;;AAEJ,QAAGD,kBAAkBI,SAArB,EACIJ,SAASA,OAAOK,QAAP,EAAT;;AAEJJ,aAASA,UAAU,aAAnB;;AAGA,QAAG,CAACK,EAAEC,QAAF,CAAWP,MAAX,CAAJ,EACIA,SAASQ,UAAUC,QAAV,CAAmBT,MAAnB,CAAT;;AAEJ,QAAGM,EAAEC,QAAF,CAAWP,MAAX,CAAH,EACI,OAAOQ,QAAQR,MAAR,EAAgBC,MAAhB,CAAuBA,MAAvB,CAAP;AACP,CAfD","file":"/imports/lib/helpers/templateHelpers.js.map","sourcesContent":["/**\nHelper functions\n\n@module Helpers\n**/\n\n/**\nGlobal template helpers\n\n@class TemplateHelpers\n@constructor\n**/\n\n/**\nA simple template helper to log objects in the console.\n\n@method (debug)\n**/\n\nTemplate.registerHelper('debug', function(object){\n    console.log(object);\n});\n\n\n\n/**\nFormats a timestamp to any format given.\n\n    {{formatTime myTime \"YYYY-MM-DD\"}}\n\n@method (formatTime)\n@param {String} time         The timstamp, can be string or unix format\n@param {String} format       the format string, can also be \"iso\", to format to ISO string, or \"fromnow\"\n//@param {Boolean} realTime    Whether or not this helper should re-run every 10s\n@return {String} The formated time\n**/\n\nTemplate.registerHelper('formatTime', Helpers.formatTime);\n\n\n/**\nFormats a number.\n\n    {{formatNumber myNumber \"0,0.0[0000]\"}}\n\n@method (formatNumber)\n@param {String} number\n@param {String} format       the format string\n@return {String} The formatted number\n**/\n\nTemplate.registerHelper('formatNumber', function(number, format){\n    if(format instanceof Spacebars.kw)\n        format = null;\n\n    if(number instanceof BigNumber)\n        number = number.toNumber();\n\n    format = format || '0,0.0[0000]';\n\n\n    if(!_.isFinite(number))\n        number = numeral().unformat(number);\n\n    if(_.isFinite(number))\n        return numeral(number).format(format);\n});\n"]},"hash":"cb6211c7ee405088c6af9cb7a0065248c33a2472"}
