{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"ethereum-ens","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"ENS"}]},{"source":"eth-registrar-ens","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"Registrar"}]}],"exports":{"exported":["ens","registrar","network","errors"],"specifiers":[{"kind":"local","local":"ens","exported":"ens"},{"kind":"local","local":"registrar","exported":"registrar"},{"kind":"local","local":"network","exported":"network"},{"kind":"local","local":"errors","exported":"errors"}]}}},"options":{"filename":"/imports/lib/ethereum.js","filenameRelative":"/imports/lib/ethereum.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/lib/ethereum.js.map","sourceFileName":"/imports/lib/ethereum.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"ethereum"},"ignored":false,"code":"module.export({ens:function(){return ens},registrar:function(){return registrar},network:function(){return network},errors:function(){return errors}});var ENS;module.import('ethereum-ens',{\"default\":function(v){ENS=v}});var Registrar;module.import('eth-registrar-ens',{\"default\":function(v){Registrar=v}});\n\n\n//These get assigned at init() below\nvar ens = void 0;\nvar registrar = void 0;\nvar network = void 0;\n\nvar errors = {\n  invalidNetwork: new Error('Sorry, ENS is only available on the Ropsten testnet' + ' network at the moment.')\n};\n\nmodule.export(\"default\",exports.default=(ethereum = function () {\n  var subscribers = [];\n  var customEnsAddress = void 0;\n\n  function initWeb3() {\n    return new Promise(function (resolve, reject) {\n      if (typeof web3 !== 'undefined') {\n        web3 = new Web3(web3.currentProvider);\n      } else {\n        var _Web = require('web3');\n        web3 = new _Web(new _Web.providers.HttpProvider(\"http://localhost:8545\"));\n      }\n      resolve();\n    });\n  }\n\n  function checkConnection() {\n    reportStatus('Checking connection...');\n    var attempts = 4,\n        checkInterval;\n    return new Promise(function (resolve, reject) {\n      function check() {\n        attempts--;\n        if (web3.isConnected()) {\n          clearInterval(checkInterval);\n          resolve(web3);\n        } else if (attempts <= 0) {\n          reportStatus('Ethereum network is disconnected. Awaiting connection...');\n        }\n      }\n      checkInterval = setInterval(check, 800);\n      check();\n    });\n  }\n\n  function checkNetwork() {\n    return new Promise(function (resolve, reject) {\n      web3.eth.getBlock(0, function (e, res) {\n        if (e) {\n          return reject(e);\n        }\n        switch (res.hash) {\n          case '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d':\n            module.runModuleSetters(network = 'ropsten');\n            resolve();\n            break;\n          case '0x0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303':\n            module.runModuleSetters(network = 'morden');\n            reject(errors.invalidNetwork);\n            break;\n          case '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3':\n            module.runModuleSetters(network = 'main');\n            reject(errors.invalidNetwork);\n            break;\n          default:\n            module.runModuleSetters(network = 'private');\n            reject(errors.invalidNetwork);\n        }\n      });\n    });\n  }\n\n  function initRegistrar() {\n    reportStatus('Initializing ENS registrar...');\n    return new Promise(function (resolve, reject) {\n      try {\n        module.runModuleSetters(ens = new ENS(web3, customEnsAddress || '0x112234455c3a32fd11230c42e7bccd4a84e02010'));\n        module.runModuleSetters(registrar = new Registrar(web3, ens));\n        if (!customEnsAddress) {\n          //Check correct Ropsten ENS contract\n          var owner = registrar.ens.owner('eth');\n          if (owner !== '0xc68de5b43c3d980b0c110a77a5f78d3c4c4d63b4') {\n            throw 'Could not find ENS contract. Make sure your node' + ' is synced to at least block 25409.';\n          }\n        }\n        resolve();\n      } catch (e) {\n        reject('Error initialiting ENS registrar: ' + e);\n      }\n    });\n  }\n\n  function initEthereumHelpers() {\n    return new Promise(function (resolve, reject) {\n      EthAccounts.init();\n      resolve();\n    });\n  }\n\n  function reportStatus(description, isReady, theresAnError) {\n    console.log(description);\n    subscribers.forEach(function (subscriber) {\n      return subscriber({\n        isReady: isReady,\n        description: description,\n        theresAnError: theresAnError\n      });\n    });\n  }\n\n  return {\n    init: function () {\n      function init() {\n        reportStatus('Connecting to Ethereum network...');\n        return initWeb3().then(checkConnection).then(checkNetwork)['catch'](function (err) {\n          if (err !== errors.invalidNetwork || !customEnsAddress) {\n            throw err;\n          }\n        }).then(initRegistrar).then(initEthereumHelpers).then(function () {\n          //set a global for easier debugging on the console\n          g = { ens: ens, registrar: registrar, network: network };\n          reportStatus('Ready', true);\n        })['catch'](function (err) {\n          reportStatus(err, false, true);\n        });\n      }\n\n      return init;\n    }(),\n    onStatusChange: function () {\n      function onStatusChange(callback) {\n        subscribers.push(callback);\n      }\n\n      return onStatusChange;\n    }(),\n    setCustomContract: function () {\n      function setCustomContract(ensAddress) {\n        customEnsAddress = ensAddress;\n      }\n\n      return setCustomContract;\n    }()\n  };\n}()));","ast":null,"map":{"version":3,"sources":["/imports/lib/ethereum.js"],"names":["ENS","Registrar","ens","registrar","network","errors","invalidNetwork","Error","ethereum","subscribers","customEnsAddress","initWeb3","Promise","resolve","reject","web3","Web3","currentProvider","require","providers","HttpProvider","checkConnection","reportStatus","attempts","checkInterval","check","isConnected","clearInterval","setInterval","checkNetwork","eth","getBlock","e","res","hash","initRegistrar","owner","initEthereumHelpers","EthAccounts","init","description","isReady","theresAnError","console","log","forEach","subscriber","then","err","g","onStatusChange","callback","push","setCustomContract","ensAddress"],"mappings":"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","file":"/imports/lib/ethereum.js.map","sourcesContent":["import ENS from 'ethereum-ens';\nimport Registrar from 'eth-registrar-ens';\n\n//These get assigned at init() below\nexport let ens;\nexport let registrar;\nexport let network;\n\nexport let errors = {\n  invalidNetwork: new Error('Sorry, ENS is only available on the Ropsten testnet' +\n    ' network at the moment.')\n}\n\nexport default ethereum = (function() {\n  let subscribers = [];\n  let customEnsAddress;\n\n  function initWeb3() {\n    return new Promise((resolve, reject) => {\n      if(typeof web3 !== 'undefined') {\n        web3 = new Web3(web3.currentProvider);\n      }\n      else {\n        let Web3 = require('web3');\n        web3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n      }\n      resolve();\n    })\n  }\n\n  function checkConnection() {\n    reportStatus('Checking connection...')\n    var attempts = 4,\n      checkInterval;\n    return new Promise((resolve, reject) => {\n      function check() {\n        attempts--;\n        if(web3.isConnected()) {\n          clearInterval(checkInterval)\n          resolve(web3);\n        } else if (attempts <= 0) {\n          reportStatus('Ethereum network is disconnected. Awaiting connection...');\n        }\n      }\n      checkInterval = setInterval(check, 800);\n      check();\n    });\n  }\n  \n  function checkNetwork() {\n    return new Promise((resolve, reject) => {\n      web3.eth.getBlock(0, function(e, res){\n        if (e) {\n          return reject(e)\n        }\n        switch(res.hash) {\n          case '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d':\n            network='ropsten';\n            resolve();\n            break;\n          case '0x0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303':\n            network='morden';\n            reject(errors.invalidNetwork);\n            break;\n          case '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3':\n            network='main';\n            reject(errors.invalidNetwork);\n            break;\n          default:\n            network='private';\n            reject(errors.invalidNetwork);\n        }\n      });\n    })\n  }\n\n  function initRegistrar() {\n    reportStatus('Initializing ENS registrar...');\n    return new Promise((resolve, reject) => {\n      try {\n        ens = new ENS(web3, customEnsAddress || '0x112234455c3a32fd11230c42e7bccd4a84e02010');\n        registrar = new Registrar(web3, ens);\n        if (!customEnsAddress) {\n          //Check correct Ropsten ENS contract\n          let owner = registrar.ens.owner('eth')\n          if(owner !== '0xc68de5b43c3d980b0c110a77a5f78d3c4c4d63b4') {\n            throw 'Could not find ENS contract. Make sure your node' +\n              ' is synced to at least block 25409.';\n          }\n        }\n        resolve();\n      } catch(e) {\n        reject('Error initialiting ENS registrar: ' + e);\n      }\n    });\n  }\n  \n  function initEthereumHelpers() {\n    return new Promise((resolve, reject) => {\n      EthAccounts.init();\n      resolve();\n    })\n  }\n\n  function reportStatus(description, isReady, theresAnError) {\n    console.log(description);\n    subscribers.forEach((subscriber) => subscriber({\n      isReady,\n      description,\n      theresAnError\n    }));\n  }\n\n\n  return {\n    init() {\n      reportStatus('Connecting to Ethereum network...');\n      return initWeb3()\n        .then(checkConnection)\n        .then(checkNetwork)\n        .catch(err => {\n          if (err !== errors.invalidNetwork || !customEnsAddress) {\n            throw err;\n          }\n        })\n        .then(initRegistrar)\n        .then(initEthereumHelpers)\n        .then(() => {\n          //set a global for easier debugging on the console\n          g = {ens, registrar, network};\n          reportStatus('Ready', true);\n        })\n        \n        .catch(err => {\n          reportStatus(err, false, true);\n        })\n    },\n    onStatusChange(callback) {\n      subscribers.push(callback);\n    },\n    setCustomContract(ensAddress) {\n      customEnsAddress = ensAddress;\n    }\n  };\n}());\n"]},"hash":"e36af4283ec3d920b59bc57cb7eef0c8f30182f9"}
