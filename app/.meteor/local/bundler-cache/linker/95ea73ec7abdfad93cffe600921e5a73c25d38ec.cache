[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/client.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire(\"./install-packages.js\");                                                                                      // 1\nrequire(\"./stubs.js\");                                                                                                 // 2\nrequire(\"./buffer.js\");                                                                                                // 3\nrequire(\"./process.js\");                                                                                               // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                               // 5\n                                                                                                                       // 6\nexports.addStyles = require(\"./css\").addStyles;                                                                        // 7\n                                                                                                                       // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/buffer.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                                  // 2\n} catch (noBuffer) {}                                                                                                  // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/css.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar doc = document;                                                                                                    // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                                   // 2\n                                                                                                                       // 3\nexports.addStyles = function (css) {                                                                                   // 4\n  var style = doc.createElement(\"style\");                                                                              // 5\n                                                                                                                       // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                              // 7\n                                                                                                                       // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                                   // 9\n  var internetExplorerSheetObject =                                                                                    // 10\n    style.sheet || // Edge/IE11.                                                                                       // 11\n    style.styleSheet; // Older IEs.                                                                                    // 12\n                                                                                                                       // 13\n  if (internetExplorerSheetObject) {                                                                                   // 14\n    internetExplorerSheetObject.cssText = css;                                                                         // 15\n  } else {                                                                                                             // 16\n    style.appendChild(doc.createTextNode(css));                                                                        // 17\n  }                                                                                                                    // 18\n                                                                                                                       // 19\n  return head.appendChild(style);                                                                                      // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/install-packages.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction install(name, mainModule) {                                                                                   // 1\n  var meteorDir = {};                                                                                                  // 2\n                                                                                                                       // 3\n  // Given a package name <name>, install a stub module in the                                                         // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                          // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                               // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                          // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                              // 8\n  // that the package contains a file called index.js (#6590).                                                         // 9\n                                                                                                                       // 10\n  if (mainModule) {                                                                                                    // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                             // 12\n      module.exports = require(mainModule);                                                                            // 13\n    }];                                                                                                                // 14\n  } else {                                                                                                             // 15\n    // back compat with old Meteor packages                                                                            // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                                // 17\n      module.exports = Package[name];                                                                                  // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n                                                                                                                       // 21\n  meteorInstall({                                                                                                      // 22\n    node_modules: {                                                                                                    // 23\n      meteor: meteorDir                                                                                                // 24\n    }                                                                                                                  // 25\n  });                                                                                                                  // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\n// This file will be modified during computeJsOutputFilesMap to include                                                // 29\n// install(<name>) calls for every Meteor package.                                                                     // 30\n                                                                                                                       // 31\ninstall(\"underscore\");                                                                                                 // 32\ninstall(\"meteor\");                                                                                                     // 33\ninstall(\"meteor-base\");                                                                                                // 34\ninstall(\"mobile-experience\");                                                                                          // 35\ninstall(\"modules-runtime\");                                                                                            // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                                        // 37\ninstall(\"promise\", \"meteor/promise/client.js\");                                                                        // 38\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                                 // 39\ninstall(\"babel-compiler\");                                                                                             // 40\ninstall(\"ecmascript\");                                                                                                 // 41\ninstall(\"base64\");                                                                                                     // 42\ninstall(\"ejson\");                                                                                                      // 43\ninstall(\"id-map\");                                                                                                     // 44\ninstall(\"ordered-dict\");                                                                                               // 45\ninstall(\"tracker\");                                                                                                    // 46\ninstall(\"babel-runtime\", \"meteor/babel-runtime/babel-runtime.js\");                                                     // 47\ninstall(\"random\");                                                                                                     // 48\ninstall(\"mongo-id\");                                                                                                   // 49\ninstall(\"diff-sequence\");                                                                                              // 50\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                              // 51\ninstall(\"minimongo\");                                                                                                  // 52\ninstall(\"check\", \"meteor/check/match.js\");                                                                             // 53\ninstall(\"retry\");                                                                                                      // 54\ninstall(\"ddp-common\");                                                                                                 // 55\ninstall(\"reload\");                                                                                                     // 56\ninstall(\"ddp-client\");                                                                                                 // 57\ninstall(\"ddp\");                                                                                                        // 58\ninstall(\"ddp-server\");                                                                                                 // 59\ninstall(\"allow-deny\");                                                                                                 // 60\ninstall(\"mongo\");                                                                                                      // 61\ninstall(\"blaze-html-templates\");                                                                                       // 62\ninstall(\"reactive-var\");                                                                                               // 63\ninstall(\"standard-minifier-css\");                                                                                      // 64\ninstall(\"standard-minifier-js\");                                                                                       // 65\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                            // 66\ninstall(\"amplify\");                                                                                                    // 67\ninstall(\"frozeman:persistent-minimongo\");                                                                              // 68\ninstall(\"ethereum:web3\");                                                                                              // 69\ninstall(\"ethereum:accounts\");                                                                                          // 70\ninstall(\"observe-sequence\");                                                                                           // 71\ninstall(\"deps\");                                                                                                       // 72\ninstall(\"htmljs\");                                                                                                     // 73\ninstall(\"blaze\");                                                                                                      // 74\ninstall(\"spacebars\");                                                                                                  // 75\ninstall(\"templating-compiler\");                                                                                        // 76\ninstall(\"templating-runtime\");                                                                                         // 77\ninstall(\"templating\");                                                                                                 // 78\ninstall(\"less\");                                                                                                       // 79\ninstall(\"standard-minifiers\");                                                                                         // 80\ninstall(\"alexvandesande:identicon\");                                                                                   // 81\ninstall(\"cosmos:browserify\");                                                                                          // 82\ninstall(\"3stack:bignumber\");                                                                                           // 83\ninstall(\"url\");                                                                                                        // 84\ninstall(\"http\");                                                                                                       // 85\ninstall(\"localstorage\");                                                                                               // 86\ninstall(\"frozeman:storage\");                                                                                           // 87\ninstall(\"ethereum:tools\");                                                                                             // 88\ninstall(\"frozeman:animation-helper\");                                                                                  // 89\ninstall(\"frozeman:template-var\");                                                                                      // 90\ninstall(\"ethereum:elements\");                                                                                          // 91\ninstall(\"ethereum:dapp-styles\");                                                                                       // 92\ninstall(\"frozeman:reactive-timer\");                                                                                    // 93\ninstall(\"coffeescript\");                                                                                               // 94\ninstall(\"raix:eventemitter\");                                                                                          // 95\ninstall(\"meteorspark:util\");                                                                                           // 96\ninstall(\"reactive-dict\");                                                                                              // 97\ninstall(\"session\");                                                                                                    // 98\ninstall(\"tap:i18n\");                                                                                                   // 99\ninstall(\"mrt:moment\");                                                                                                 // 100\ninstall(\"hashanp:geopattern\");                                                                                         // 101\ninstall(\"ui\");                                                                                                         // 102\ninstall(\"yasinuslu:blaze-meta\");                                                                                       // 103\ninstall(\"chuangbo:cookie\");                                                                                            // 104\ninstall(\"numeral:numeral\");                                                                                            // 105\ninstall(\"webapp\");                                                                                                     // 106\ninstall(\"livedata\");                                                                                                   // 107\ninstall(\"hot-code-push\");                                                                                              // 108\ninstall(\"launch-screen\");                                                                                              // 109\ninstall(\"autoupdate\");                                                                                                 // 110\n                                                                                                                       // 111\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/process.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // The application can run `npm install process` to provide its own                                                  // 2\n  // process stub; otherwise this module will provide a partial stub.                                                  // 3\n  process = global.process || require(\"process\");                                                                      // 4\n} catch (noProcess) {                                                                                                  // 5\n  process = {};                                                                                                        // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nif (Meteor.isServer) {                                                                                                 // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                               // 10\n  meteorInstall({                                                                                                      // 11\n    node_modules: {                                                                                                    // 12\n      \"process.js\": function (r, e, module) {                                                                          // 13\n        module.exports = process;                                                                                      // 14\n      }                                                                                                                // 15\n    }                                                                                                                  // 16\n  });                                                                                                                  // 17\n} else {                                                                                                               // 18\n  process.platform = \"browser\";                                                                                        // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                                         // 20\n}                                                                                                                      // 21\n                                                                                                                       // 22\nif (typeof process.env !== \"object\") {                                                                                 // 23\n  process.env = {};                                                                                                    // 24\n}                                                                                                                      // 25\n                                                                                                                       // 26\n_.extend(process.env, meteorEnv);                                                                                      // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/modules/stubs.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ntry {                                                                                                                  // 1\n  // When meteor-node-stubs is installed in the application's root                                                     // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                              // 3\n  // for all Node built-in modules, such as fs, util, and http.                                                        // 4\n  require(\"meteor-node-stubs\");                                                                                        // 5\n} catch (noStubs) {}                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Entry = require(\"./entry.js\").Entry;                                                                               // 1\nvar utils = require(\"./utils.js\");                                                                                     // 2\n                                                                                                                       // 3\nexports.enable = function (Module) {                                                                                   // 4\n  var Mp = Module.prototype;                                                                                           // 5\n                                                                                                                       // 6\n  if (typeof Mp.import === \"function\" &&                                                                               // 7\n      typeof Mp.export === \"function\") {                                                                               // 8\n    // If the Mp.{import,export} methods have already been                                                             // 9\n    // defined, abandon reification immediately.                                                                       // 10\n    return Module;                                                                                                     // 11\n  }                                                                                                                    // 12\n                                                                                                                       // 13\n  // Platform-specific code should implement this method however                                                       // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                               // 15\n  // version of the given module identifier, like require.resolve.                                                     // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                                    // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                                       // 18\n  };                                                                                                                   // 19\n                                                                                                                       // 20\n  // Platform-specific code should find a way to call this method whenever                                             // 21\n  // the module system is about to return module.exports from require. This                                            // 22\n  // might happen more than once per module, in case of dependency cycles,                                             // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                                    // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                                // 25\n    var entry = Entry.get(this.id);                                                                                    // 26\n    if (entry) {                                                                                                       // 27\n      entry.runModuleSetters(this);                                                                                    // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Assignments to exported local variables get wrapped with calls to                                               // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                                 // 32\n    // valueToPassThrough parameter to allow the value of the original                                                 // 33\n    // expression to pass through. For example,                                                                        // 34\n    //                                                                                                                 // 35\n    //   export var a = 1;                                                                                             // 36\n    //   console.log(a += 3);                                                                                          // 37\n    //                                                                                                                 // 38\n    // becomes                                                                                                         // 39\n    //                                                                                                                 // 40\n    //   module.export(\"a\", () => a);                                                                                  // 41\n    //   var a = 1;                                                                                                    // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                                 // 43\n    //                                                                                                                 // 44\n    // This ensures module.runModuleSetters runs immediately after the                                                 // 45\n    // assignment, and does not interfere with the larger computation.                                                 // 46\n    return valueToPassThrough;                                                                                         // 47\n  };                                                                                                                   // 48\n                                                                                                                       // 49\n  function setESModule(module) {                                                                                       // 50\n    var exports = module.exports;                                                                                      // 51\n    if (exports && typeof exports === \"object\") {                                                                      // 52\n      exports.__esModule = true;                                                                                       // 53\n    }                                                                                                                  // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  Mp.import = function (id, setters) {                                                                                 // 57\n    var module = this;                                                                                                 // 58\n    setESModule(module);                                                                                               // 59\n                                                                                                                       // 60\n    var absoluteId = module.resolve(id);                                                                               // 61\n                                                                                                                       // 62\n    if (setters && typeof setters === \"object\") {                                                                      // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                                       // 64\n      entry.addSetters(module, setters);                                                                               // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    var countBefore = entry && entry.runCount;                                                                         // 68\n    var exports = typeof module.require === \"function\"                                                                 // 69\n      ? module.require(absoluteId)                                                                                     // 70\n      : require(absoluteId);                                                                                           // 71\n                                                                                                                       // 72\n    if (entry && entry.runCount === countBefore) {                                                                     // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                                 // 74\n      // perhaps because it's not the first time this module has been                                                  // 75\n      // required, run the setters now using an object that passes as the                                              // 76\n      // real module object.                                                                                           // 77\n      entry.runModuleSetters({                                                                                         // 78\n        id: absoluteId,                                                                                                // 79\n        exports: exports,                                                                                              // 80\n        getExportByName: Mp.getExportByName                                                                            // 81\n      });                                                                                                              // 82\n    }                                                                                                                  // 83\n  };                                                                                                                   // 84\n                                                                                                                       // 85\n  // Register getter functions for local variables in the scope of an                                                  // 86\n  // export statement. The keys of the getters object are exported names,                                              // 87\n  // and the values are functions that return local values.                                                            // 88\n  Mp.export = function (getters) {                                                                                     // 89\n    var module = this;                                                                                                 // 90\n    setESModule(module);                                                                                               // 91\n                                                                                                                       // 92\n    if (utils.isPlainObject(getters)) {                                                                                // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                                // 94\n    }                                                                                                                  // 95\n                                                                                                                       // 96\n    if (module.loaded) {                                                                                               // 97\n      // If the module has already been evaluated, then we need to trigger                                             // 98\n      // another round of entry.runModuleSetters calls, which begins by                                                // 99\n      // calling entry.runModuleGetters(module).                                                                       // 100\n      module.runModuleSetters();                                                                                       // 101\n    }                                                                                                                  // 102\n  };                                                                                                                   // 103\n                                                                                                                       // 104\n  // This method can be overridden by client code to implement custom export                                           // 105\n  // naming logic. The current implementation works well with Babel's                                                  // 106\n  // __esModule convention.                                                                                            // 107\n  Mp.getExportByName = function (name) {                                                                               // 108\n    var exports = this.exports;                                                                                        // 109\n                                                                                                                       // 110\n    if (name === \"*\") {                                                                                                // 111\n      return exports;                                                                                                  // 112\n    }                                                                                                                  // 113\n                                                                                                                       // 114\n    if (name === \"default\" &&                                                                                          // 115\n        ! (exports &&                                                                                                  // 116\n           typeof exports === \"object\" &&                                                                              // 117\n           exports.__esModule &&                                                                                       // 118\n           \"default\" in exports)) {                                                                                    // 119\n      return exports;                                                                                                  // 120\n    }                                                                                                                  // 121\n                                                                                                                       // 122\n    return exports && exports[name];                                                                                   // 123\n  };                                                                                                                   // 124\n                                                                                                                       // 125\n  return Module;                                                                                                       // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar entryMap = Object.create(null);                                                                                    // 2\nvar utils = require(\"./utils.js\");                                                                                     // 3\n                                                                                                                       // 4\nfunction Entry(id) {                                                                                                   // 5\n  // Same as module.id for this module.                                                                                // 6\n  this.id = id;                                                                                                        // 7\n  // The number of times this.runModuleSetters has been called.                                                        // 8\n  this.runCount = 0;                                                                                                   // 9\n  // Setters for assigning to local variables in parent modules.                                                       // 10\n  this.setters = Object.create(null);                                                                                  // 11\n  // Getters for local variables exported from this module.                                                            // 12\n  this.getters = Object.create(null);                                                                                  // 13\n}                                                                                                                      // 14\n                                                                                                                       // 15\nvar Ep = Entry.prototype;                                                                                              // 16\n                                                                                                                       // 17\nEntry.get = function (id) {                                                                                            // 18\n  return entryMap[id] || null;                                                                                         // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nEntry.getOrCreate = function (id) {                                                                                    // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                                 // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nEp.addSetters = function (parent, setters) {                                                                           // 26\n  var entry = this;                                                                                                    // 27\n                                                                                                                       // 28\n  Object.keys(setters).forEach(function (name) {                                                                       // 29\n    var setter = setters[name];                                                                                        // 30\n    if (typeof setter === \"function\" &&                                                                                // 31\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 32\n        name !== \"__esModule\") {                                                                                       // 33\n      setter.parent = parent;                                                                                          // 34\n      (entry.setters[name] =                                                                                           // 35\n       entry.setters[name] || []                                                                                       // 36\n      ).push(setter);                                                                                                  // 37\n    }                                                                                                                  // 38\n  });                                                                                                                  // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\nEp.addGetters = function (getters) {                                                                                   // 42\n  var entry = this;                                                                                                    // 43\n  Object.keys(getters).forEach(function (name) {                                                                       // 44\n    var getter = getters[name];                                                                                        // 45\n    if (typeof getter === \"function\" &&                                                                                // 46\n        // Ignore any requests for the exports.__esModule property.\"                                                   // 47\n        name !== \"__esModule\") {                                                                                       // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                                         // 49\n      entry.getters[name] = getter;                                                                                    // 50\n    }                                                                                                                  // 51\n  });                                                                                                                  // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nfunction runModuleSetters(module) {                                                                                    // 55\n  var entry = entryMap[module.id];                                                                                     // 56\n  if (entry) {                                                                                                         // 57\n    entry.runModuleSetters(module);                                                                                    // 58\n  }                                                                                                                    // 59\n}                                                                                                                      // 60\n                                                                                                                       // 61\nfunction runModuleGetters(module) {                                                                                    // 62\n  var entry = entryMap[module.id];                                                                                     // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                                   // 64\n}                                                                                                                      // 65\n                                                                                                                       // 66\nEp.runModuleGetters = function (module) {                                                                              // 67\n  var entry = this;                                                                                                    // 68\n  var changeCount = 0;                                                                                                 // 69\n                                                                                                                       // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                                 // 71\n    if (entry.runGetter(module, name)) {                                                                               // 72\n      ++changeCount;                                                                                                   // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n                                                                                                                       // 76\n  return changeCount;                                                                                                  // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n// Returns true iff the getter updated module.exports with a new value.                                                // 80\nEp.runGetter = function (module, name) {                                                                               // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                             // 82\n    return false;                                                                                                      // 83\n  }                                                                                                                    // 84\n                                                                                                                       // 85\n  var getter = this.getters[name];                                                                                     // 86\n  try {                                                                                                                // 87\n    var value = getter.call(module);                                                                                   // 88\n  } catch (e) {}                                                                                                       // 89\n  var exports = module.exports;                                                                                        // 90\n                                                                                                                       // 91\n  if (! hasOwn.call(exports, name) ||                                                                                  // 92\n      exports[name] !== value) {                                                                                       // 93\n    // We update module.exports[name] with the current value so that                                                   // 94\n    // CommonJS require calls remain consistent with module.import.                                                    // 95\n    exports[name] = value;                                                                                             // 96\n    return true;                                                                                                       // 97\n  }                                                                                                                    // 98\n                                                                                                                       // 99\n  return false;                                                                                                        // 100\n};                                                                                                                     // 101\n                                                                                                                       // 102\n// Called whenever module.exports might have changed, to trigger any                                                   // 103\n// setters associated with the newly exported values.                                                                  // 104\nEp.runModuleSetters = function (module) {                                                                              // 105\n  var entry = this;                                                                                                    // 106\n  var names = Object.keys(entry.setters);                                                                              // 107\n                                                                                                                       // 108\n  // Make sure module.exports is up to date before we call                                                             // 109\n  // module.getExportByName(name).                                                                                     // 110\n  entry.runModuleGetters(module);                                                                                      // 111\n                                                                                                                       // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                             // 113\n  // that needs to be called. Note that forEachSetter does not call any                                                // 114\n  // setters itself, only the given callback.                                                                          // 115\n  function forEachSetter(callback, context) {                                                                          // 116\n    names.forEach(function (name) {                                                                                    // 117\n      entry.setters[name].forEach(function (setter) {                                                                  // 118\n        var value = module.getExportByName(name);                                                                      // 119\n        if (name === \"*\") {                                                                                            // 120\n          Object.keys(value).forEach(function (name) {                                                                 // 121\n            call(setter, value[name], name);                                                                           // 122\n          });                                                                                                          // 123\n        } else {                                                                                                       // 124\n          call(setter, value, name);                                                                                   // 125\n        }                                                                                                              // 126\n      });                                                                                                              // 127\n    });                                                                                                                // 128\n                                                                                                                       // 129\n    function call(setter, value, name) {                                                                               // 130\n      if (name === \"__esModule\") {                                                                                     // 131\n        // Ignore setters asking for module.exports.__esModule.                                                        // 132\n        return;                                                                                                        // 133\n      }                                                                                                                // 134\n                                                                                                                       // 135\n      setter.last = setter.last || Object.create(null);                                                                // 136\n                                                                                                                       // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                          // 138\n          setter.last[name] !== value) {                                                                               // 139\n        // Only invoke the callback if we have not called this setter                                                  // 140\n        // (with a value of this name) before, or the current value is                                                 // 141\n        // different from the last value we passed to this setter.                                                     // 142\n        return callback.apply(context, arguments);                                                                     // 143\n      }                                                                                                                // 144\n    }                                                                                                                  // 145\n  }                                                                                                                    // 146\n                                                                                                                       // 147\n  // Every three elements of this list form a (setter, value, name) triple                                             // 148\n  // that needs to be invoked.                                                                                         // 149\n  var settersToCall = [];                                                                                              // 150\n                                                                                                                       // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                                   // 152\n  // relevant parent module objects and snapshots of their exports.                                                    // 153\n  var relevantParents;                                                                                                 // 154\n  var parentSnapshots;                                                                                                 // 155\n                                                                                                                       // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                               // 157\n  // planning to call, so that we can later determine if calling the                                                   // 158\n  // setters modified any of those exports objects.                                                                    // 159\n  forEachSetter(function (setter, value, name) {                                                                       // 160\n    var parent = setter.parent;                                                                                        // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                          // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                                   // 163\n      relevantParents = relevantParents || Object.create(null);                                                        // 164\n      relevantParents[parent.id] = parent;                                                                             // 165\n      if (utils.isPlainObject(parent.exports)) {                                                                       // 166\n        // If parent.exports is an object, make a shallow clone of it so                                               // 167\n        // that we can see if it changes as a result of calling setters.                                               // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                                 // 169\n      } else {                                                                                                         // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                              // 171\n        // value of parent.exports.                                                                                    // 172\n        parentSnapshots[parent.id] = parent.exports;                                                                   // 173\n      }                                                                                                                // 174\n    }                                                                                                                  // 175\n                                                                                                                       // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                              // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                                       // 178\n    settersToCall.push(setter, value, name);                                                                           // 179\n  });                                                                                                                  // 180\n                                                                                                                       // 181\n  // Now call all the setters that we decided we need to call.                                                         // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                                  // 183\n    var setter = settersToCall[i];                                                                                     // 184\n    var value = settersToCall[i + 1];                                                                                  // 185\n    var name = settersToCall[i + 2];                                                                                   // 186\n    setter.call(module, setter.last[name] = value, name);                                                              // 187\n  }                                                                                                                    // 188\n                                                                                                                       // 189\n  ++entry.runCount;                                                                                                    // 190\n                                                                                                                       // 191\n  if (! relevantParents) {                                                                                             // 192\n    // If we never called takeSnapshot, then we can avoid checking                                                     // 193\n    // relevantParents and parentSnapshots below.                                                                      // 194\n    return;                                                                                                            // 195\n  }                                                                                                                    // 196\n                                                                                                                       // 197\n  // If any of the setters updated the module.exports of a parent module,                                              // 198\n  // or updated local variables that are exported by that parent module,                                               // 199\n  // then we must re-run any setters registered by that parent module.                                                 // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                                 // 201\n    var parent = relevantParents[id];                                                                                  // 202\n                                                                                                                       // 203\n    if (runModuleGetters(parent) > 0) {                                                                                // 204\n      return runModuleSetters(parent);                                                                                 // 205\n    }                                                                                                                  // 206\n                                                                                                                       // 207\n    var exports = parent.exports;                                                                                      // 208\n    var snapshot = parentSnapshots[parent.id];                                                                         // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                                    // 210\n      // If parent.exports have not changed since we took the snapshot,                                                // 211\n      // then we do not need to run the parent's setters.                                                              // 212\n      return;                                                                                                          // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    runModuleSetters(parent);                                                                                          // 216\n  });                                                                                                                  // 217\n};                                                                                                                     // 218\n                                                                                                                       // 219\nexports.Entry = Entry;                                                                                                 // 220\n                                                                                                                       // 221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                          // 1\nvar objToStr = Object.prototype.toString;                                                                              // 2\nvar objStr = objToStr.call({});                                                                                        // 3\n                                                                                                                       // 4\nfunction isPlainObject(value) {                                                                                        // 5\n  return objToStr.call(value) === objStr;                                                                              // 6\n}                                                                                                                      // 7\nexports.isPlainObject = isPlainObject;                                                                                 // 8\n                                                                                                                       // 9\nexports.assign = Object.assign || function (obj) {                                                                     // 10\n  var argc = arguments.length;                                                                                         // 11\n  for (var i = 1; i < argc; ++i) {                                                                                     // 12\n    var arg = arguments[i];                                                                                            // 13\n    if (arg && typeof arg === \"object\") {                                                                              // 14\n      var keys = Object.keys(arg);                                                                                     // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                          // 16\n        var key = keys[k];                                                                                             // 17\n        obj[key] = arg[key];                                                                                           // 18\n      }                                                                                                                // 19\n    }                                                                                                                  // 20\n  }                                                                                                                    // 21\n  return obj;                                                                                                          // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nexports.shallowObjEqual = function(a, b) {                                                                             // 25\n  if (a === b) {                                                                                                       // 26\n    return true;                                                                                                       // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  if (! isPlainObject(a) ||                                                                                            // 30\n      ! isPlainObject(b)) {                                                                                            // 31\n    return false;                                                                                                      // 32\n  }                                                                                                                    // 33\n                                                                                                                       // 34\n  var aKeys = Object.keys(a);                                                                                          // 35\n  var bKeys = Object.keys(b);                                                                                          // 36\n                                                                                                                       // 37\n  if (aKeys.length !== bKeys.length) {                                                                                 // 38\n    return false;                                                                                                      // 39\n  }                                                                                                                    // 40\n                                                                                                                       // 41\n  return aKeys.every(function (key) {                                                                                  // 42\n    return hasOwn.call(b, key) &&                                                                                      // 43\n      a[key] === b[key];                                                                                               // 44\n  });                                                                                                                  // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"ethereum-ens\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/ethereum-ens/package.json                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ethereum-ens\";                                                                                         // 1\nexports.version = \"0.2.6\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"crypto-js\",\"node-stringprep\",\"underscore\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/ethereum-ens/index.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of ethereum-ens.                                                                                 // 2\n    ethereum-ens is free software: you can redistribute it and/or modify                                               // 3\n    it under the terms of the GNU Lesser General Public License as published by                                        // 4\n    the Free Software Foundation, either version 3 of the License, or                                                  // 5\n    (at your option) any later version.                                                                                // 6\n    ethereum-ens is distributed in the hope that it will be useful,                                                    // 7\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 8\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 9\n    GNU Lesser General Public License for more details.                                                                // 10\n    You should have received a copy of the GNU Lesser General Public License                                           // 11\n    along with ethereum-ens.  If not, see <http://www.gnu.org/licenses/>.                                              // 12\n*/                                                                                                                     // 13\n                                                                                                                       // 14\nvar CryptoJS = require('crypto-js');                                                                                   // 15\nvar StringPrep = require('node-stringprep').StringPrep;                                                                // 16\nvar NamePrep = new StringPrep('nameprep');                                                                             // 17\nvar _ = require('underscore');                                                                                         // 18\n                                                                                                                       // 19\nvar registryInterface = [                                                                                              // 20\n  {                                                                                                                    // 21\n    \"constant\": true,                                                                                                  // 22\n    \"inputs\": [                                                                                                        // 23\n      {                                                                                                                // 24\n        \"name\": \"node\",                                                                                                // 25\n        \"type\": \"bytes32\"                                                                                              // 26\n      }                                                                                                                // 27\n    ],                                                                                                                 // 28\n    \"name\": \"resolver\",                                                                                                // 29\n    \"outputs\": [                                                                                                       // 30\n      {                                                                                                                // 31\n        \"name\": \"\",                                                                                                    // 32\n        \"type\": \"address\"                                                                                              // 33\n      }                                                                                                                // 34\n    ],                                                                                                                 // 35\n    \"type\": \"function\"                                                                                                 // 36\n  },                                                                                                                   // 37\n  {                                                                                                                    // 38\n    \"constant\": true,                                                                                                  // 39\n    \"inputs\": [                                                                                                        // 40\n      {                                                                                                                // 41\n        \"name\": \"node\",                                                                                                // 42\n        \"type\": \"bytes32\"                                                                                              // 43\n      }                                                                                                                // 44\n    ],                                                                                                                 // 45\n    \"name\": \"owner\",                                                                                                   // 46\n    \"outputs\": [                                                                                                       // 47\n      {                                                                                                                // 48\n        \"name\": \"\",                                                                                                    // 49\n        \"type\": \"address\"                                                                                              // 50\n      }                                                                                                                // 51\n    ],                                                                                                                 // 52\n    \"type\": \"function\"                                                                                                 // 53\n  },                                                                                                                   // 54\n  {                                                                                                                    // 55\n    \"constant\": false,                                                                                                 // 56\n    \"inputs\": [                                                                                                        // 57\n      {                                                                                                                // 58\n        \"name\": \"node\",                                                                                                // 59\n        \"type\": \"bytes32\"                                                                                              // 60\n      },                                                                                                               // 61\n      {                                                                                                                // 62\n        \"name\": \"resolver\",                                                                                            // 63\n        \"type\": \"address\"                                                                                              // 64\n      }                                                                                                                // 65\n    ],                                                                                                                 // 66\n    \"name\": \"setResolver\",                                                                                             // 67\n    \"outputs\": [],                                                                                                     // 68\n    \"type\": \"function\"                                                                                                 // 69\n  },                                                                                                                   // 70\n  {                                                                                                                    // 71\n    \"constant\": false,                                                                                                 // 72\n    \"inputs\": [                                                                                                        // 73\n      {                                                                                                                // 74\n        \"name\": \"node\",                                                                                                // 75\n        \"type\": \"bytes32\"                                                                                              // 76\n      },                                                                                                               // 77\n      {                                                                                                                // 78\n        \"name\": \"label\",                                                                                               // 79\n        \"type\": \"bytes32\"                                                                                              // 80\n      },                                                                                                               // 81\n      {                                                                                                                // 82\n        \"name\": \"owner\",                                                                                               // 83\n        \"type\": \"address\"                                                                                              // 84\n      }                                                                                                                // 85\n    ],                                                                                                                 // 86\n    \"name\": \"setSubnodeOwner\",                                                                                         // 87\n    \"outputs\": [],                                                                                                     // 88\n    \"type\": \"function\"                                                                                                 // 89\n  },                                                                                                                   // 90\n  {                                                                                                                    // 91\n    \"constant\": false,                                                                                                 // 92\n    \"inputs\": [                                                                                                        // 93\n      {                                                                                                                // 94\n        \"name\": \"node\",                                                                                                // 95\n        \"type\": \"bytes32\"                                                                                              // 96\n      },                                                                                                               // 97\n      {                                                                                                                // 98\n        \"name\": \"owner\",                                                                                               // 99\n        \"type\": \"address\"                                                                                              // 100\n      }                                                                                                                // 101\n    ],                                                                                                                 // 102\n    \"name\": \"setOwner\",                                                                                                // 103\n    \"outputs\": [],                                                                                                     // 104\n    \"type\": \"function\"                                                                                                 // 105\n  }                                                                                                                    // 106\n];                                                                                                                     // 107\n                                                                                                                       // 108\nvar resolverInterface = [                                                                                              // 109\n  {                                                                                                                    // 110\n    \"constant\": true,                                                                                                  // 111\n    \"inputs\": [                                                                                                        // 112\n      {                                                                                                                // 113\n        \"name\": \"node\",                                                                                                // 114\n        \"type\": \"bytes32\"                                                                                              // 115\n      }                                                                                                                // 116\n    ],                                                                                                                 // 117\n    \"name\": \"addr\",                                                                                                    // 118\n    \"outputs\": [                                                                                                       // 119\n      {                                                                                                                // 120\n        \"name\": \"\",                                                                                                    // 121\n        \"type\": \"address\"                                                                                              // 122\n      }                                                                                                                // 123\n    ],                                                                                                                 // 124\n    \"type\": \"function\"                                                                                                 // 125\n  },                                                                                                                   // 126\n  {                                                                                                                    // 127\n    \"constant\": true,                                                                                                  // 128\n    \"inputs\": [                                                                                                        // 129\n      {                                                                                                                // 130\n        \"name\": \"node\",                                                                                                // 131\n        \"type\": \"bytes32\"                                                                                              // 132\n      }                                                                                                                // 133\n    ],                                                                                                                 // 134\n    \"name\": \"content\",                                                                                                 // 135\n    \"outputs\": [                                                                                                       // 136\n      {                                                                                                                // 137\n        \"name\": \"\",                                                                                                    // 138\n        \"type\": \"bytes32\"                                                                                              // 139\n      }                                                                                                                // 140\n    ],                                                                                                                 // 141\n    \"type\": \"function\"                                                                                                 // 142\n  },                                                                                                                   // 143\n  {                                                                                                                    // 144\n    \"constant\": true,                                                                                                  // 145\n    \"inputs\": [                                                                                                        // 146\n      {                                                                                                                // 147\n        \"name\": \"node\",                                                                                                // 148\n        \"type\": \"bytes32\"                                                                                              // 149\n      },                                                                                                               // 150\n      {                                                                                                                // 151\n        \"name\": \"kind\",                                                                                                // 152\n        \"type\": \"bytes32\"                                                                                              // 153\n      }                                                                                                                // 154\n    ],                                                                                                                 // 155\n    \"name\": \"has\",                                                                                                     // 156\n    \"outputs\": [                                                                                                       // 157\n      {                                                                                                                // 158\n        \"name\": \"\",                                                                                                    // 159\n        \"type\": \"bool\"                                                                                                 // 160\n      }                                                                                                                // 161\n    ],                                                                                                                 // 162\n    \"type\": \"function\"                                                                                                 // 163\n  },                                                                                                                   // 164\n  {                                                                                                                    // 165\n    \"constant\": false,                                                                                                 // 166\n    \"inputs\": [                                                                                                        // 167\n      {                                                                                                                // 168\n        \"name\": \"node\",                                                                                                // 169\n        \"type\": \"bytes32\"                                                                                              // 170\n      },                                                                                                               // 171\n      {                                                                                                                // 172\n        \"name\": \"addr\",                                                                                                // 173\n        \"type\": \"address\"                                                                                              // 174\n      }                                                                                                                // 175\n    ],                                                                                                                 // 176\n    \"name\": \"setAddr\",                                                                                                 // 177\n    \"outputs\": [],                                                                                                     // 178\n    \"type\": \"function\"                                                                                                 // 179\n  },                                                                                                                   // 180\n  {                                                                                                                    // 181\n    \"constant\": false,                                                                                                 // 182\n    \"inputs\": [                                                                                                        // 183\n      {                                                                                                                // 184\n        \"name\": \"node\",                                                                                                // 185\n        \"type\": \"bytes32\"                                                                                              // 186\n      },                                                                                                               // 187\n      {                                                                                                                // 188\n        \"name\": \"hash\",                                                                                                // 189\n        \"type\": \"bytes32\"                                                                                              // 190\n      }                                                                                                                // 191\n    ],                                                                                                                 // 192\n    \"name\": \"setContent\",                                                                                              // 193\n    \"outputs\": [],                                                                                                     // 194\n    \"type\": \"function\"                                                                                                 // 195\n  }                                                                                                                    // 196\n];                                                                                                                     // 197\n                                                                                                                       // 198\nvar publicRegistryAddress = \"0x112234455c3a32fd11230c42e7bccd4a84e02010\";                                              // 199\n                                                                                                                       // 200\nvar invalidNameRegexp = /[\\0-,/:-`{-\\x7f]/;                                                                            // 201\n                                                                                                                       // 202\nfunction Resolver(web3, address, node, abi) {                                                                          // 203\n    this.web3 = web3;                                                                                                  // 204\n    this.resolverAddress = address;                                                                                    // 205\n    this.node = node;                                                                                                  // 206\n    this.contract = web3.eth.contract(abi).at(address);                                                                // 207\n                                                                                                                       // 208\n    _.each(_.functions(this.contract), function(funcname) {                                                            // 209\n        this[funcname] = _.partial(this.contract[funcname], this.node);                                                // 210\n    }.bind(this));                                                                                                     // 211\n}                                                                                                                      // 212\n                                                                                                                       // 213\n/**                                                                                                                    // 214\n * Provides an easy-to-use interface to the Ethereum Name Service.                                                     // 215\n *                                                                                                                     // 216\n * Example usage:                                                                                                      // 217\n *                                                                                                                     // 218\n *     var ENS = require('ethereum-ens');                                                                              // 219\n *     var Web3 = require('web3');                                                                                     // 220\n *                                                                                                                     // 221\n *     var web3 = new Web3();                                                                                          // 222\n *     var ens = new ENS(web3);                                                                                        // 223\n *                                                                                                                     // 224\n *     var address = ens.resolver('foo.eth').addr();                                                                   // 225\n *                                                                                                                     // 226\n * Throughout this module, the same optionally-asynchronous pattern as web3 is                                         // 227\n * used: all functions that call web3 take a callback as an optional last                                              // 228\n * argument; if supplied, the function returns nothing, but instead calls the                                          // 229\n * callback with (err, result) when the operation completes.                                                           // 230\n *                                                                                                                     // 231\n * Functions that create transactions also take an optional 'options' argument;                                        // 232\n * this has the same parameters as web3.                                                                               // 233\n *                                                                                                                     // 234\n * @author Nick Johnson <nick@ethereum.org>                                                                            // 235\n * @date 2016                                                                                                          // 236\n * @license LGPL                                                                                                       // 237\n *                                                                                                                     // 238\n * @param {object} web3 A web3 instance to use to communicate with the blockchain.                                     // 239\n * @param {address} address The address of the ENS registry. Defaults to the public ENS registry if not supplied.      // 240\n */                                                                                                                    // 241\nfunction ENS (web3, address) {                                                                                         // 242\n    this.web3 = web3;                                                                                                  // 243\n    this.registry = web3.eth.contract(registryInterface).at(address || publicRegistryAddress);                         // 244\n}                                                                                                                      // 245\n                                                                                                                       // 246\nENS.NameNotFound = Error(\"ENS name not found\");                                                                        // 247\nENS.InvalidName = Error(\"Invalid ENS name\")                                                                            // 248\n                                                                                                                       // 249\nfunction sha3(input) {                                                                                                 // 250\n    return CryptoJS.SHA3(input, {outputLength: 256})                                                                   // 251\n}                                                                                                                      // 252\n                                                                                                                       // 253\n/**                                                                                                                    // 254\n * normalise namepreps a name, throwing an exception if it contains invalid characters.                                // 255\n * @param {string} name The name to normalise                                                                          // 256\n * @returns The normalised name. Throws ENS.InvalidName if the name contains invalid characters.                       // 257\n */                                                                                                                    // 258\nfunction normalise(name) {                                                                                             // 259\n  name = NamePrep.prepare(name);                                                                                       // 260\n  if(invalidNameRegexp.test(name)) {                                                                                   // 261\n    throw ENS.InvalidName;                                                                                             // 262\n  }                                                                                                                    // 263\n  return name;                                                                                                         // 264\n}                                                                                                                      // 265\nENS.prototype.normalise = normalise;                                                                                   // 266\n                                                                                                                       // 267\n/**                                                                                                                    // 268\n * namehash implements ENS' name hash algorithm.                                                                       // 269\n * @param {string} name The name to hash                                                                               // 270\n * @returns The computed namehash, as a hex string.                                                                    // 271\n */                                                                                                                    // 272\nfunction namehash(name) {                                                                                              // 273\n    name = normalise(name);                                                                                            // 274\n    var node = CryptoJS.enc.Hex.parse('0000000000000000000000000000000000000000000000000000000000000000');             // 275\n    if(name && name != '') {                                                                                           // 276\n        var labels = name.split(\".\");                                                                                  // 277\n        for(var i = labels.length - 1; i >= 0; i--) {                                                                  // 278\n            node = sha3(node.concat(sha3(labels[i])));                                                                 // 279\n        }                                                                                                              // 280\n    }                                                                                                                  // 281\n    return '0x' + node.toString();                                                                                     // 282\n}                                                                                                                      // 283\nENS.prototype.namehash = namehash;                                                                                     // 284\n                                                                                                                       // 285\nfunction parentNamehash(name) {                                                                                        // 286\n    var dot = name.indexOf('.');                                                                                       // 287\n    if(dot == -1) {                                                                                                    // 288\n        return ['0x' + sha3(NamePrep.prepare(name)), namehash('')];                                                    // 289\n    } else {                                                                                                           // 290\n        return ['0x' + sha3(NamePrep.prepare(name.slice(0, dot))), namehash(name.slice(dot + 1))];                     // 291\n    }                                                                                                                  // 292\n}                                                                                                                      // 293\n                                                                                                                       // 294\n/**                                                                                                                    // 295\n * resolver returns a resolver object for the specified name, throwing                                                 // 296\n * ENS.NameNotFound if the name does not exist in ENS.                                                                 // 297\n * Resolver objects are wrappers around web3 contract objects, with the                                                // 298\n * first argument - always the node ID in an ENS resolver - automatically                                              // 299\n * supplied. So, to call the `addr(node)` function on a standard resolver,                                             // 300\n * you only have to call `addr()`.                                                                                     // 301\n * @param {string} name The name to look up.                                                                           // 302\n * @param {list} abi Optional. The JSON ABI definition to use for the resolver.                                        // 303\n *        if none is supplied, a default definition implementing `has`, `addr`                                         // 304\n *        and `setAddr` is supplied.                                                                                   // 305\n * @param {function} callback Optional. If specified, the function executes                                            // 306\n *        asynchronously.                                                                                              // 307\n * @returns The resolver object if callback is not supplied.                                                           // 308\n */                                                                                                                    // 309\nENS.prototype.resolver = function(name) {                                                                              // 310\n    var node = namehash(name);                                                                                         // 311\n                                                                                                                       // 312\n    var callback = undefined;                                                                                          // 313\n    if(typeof arguments[arguments.length - 1] == 'function') {                                                         // 314\n        callback = arguments[arguments.length - 1];                                                                    // 315\n    }                                                                                                                  // 316\n                                                                                                                       // 317\n    var abi = resolverInterface;                                                                                       // 318\n    if(callback && arguments.length == 3) {                                                                            // 319\n        abi = arguments[arguments.length - 2];                                                                         // 320\n    } else if(!callback && arguments.length == 2) {                                                                    // 321\n        abi = arguments[arguments.length - 1];                                                                         // 322\n    }                                                                                                                  // 323\n                                                                                                                       // 324\n    if(!callback) {                                                                                                    // 325\n        result = this.registry.resolver(node);                                                                         // 326\n        if(result == \"0x0000000000000000000000000000000000000000\") {                                                   // 327\n            throw ENS.NameNotFound;                                                                                    // 328\n        }                                                                                                              // 329\n        return new Resolver(this.web3, result, node, abi);                                                             // 330\n    }                                                                                                                  // 331\n                                                                                                                       // 332\n    this.registry.resolver(node, function(err, result) {                                                               // 333\n        if(err != null) {                                                                                              // 334\n            callback(err, result);                                                                                     // 335\n        } else {                                                                                                       // 336\n            if(result == \"0x0000000000000000000000000000000000000000\") {                                               // 337\n                callback(ENS.NameNotFound, null);                                                                      // 338\n            } else {                                                                                                   // 339\n                callback(null, new Resolver(this.web3, result, node, abi));                                            // 340\n            }                                                                                                          // 341\n        }                                                                                                              // 342\n    }.bind(this));                                                                                                     // 343\n};                                                                                                                     // 344\n                                                                                                                       // 345\n/**                                                                                                                    // 346\n * setResolver sets the address of the resolver contract for the specified name.                                       // 347\n * The calling account must be the owner of the name in order for this call to                                         // 348\n * succeed.                                                                                                            // 349\n * @param {string} name The name to update                                                                             // 350\n * @param {address} address The address of the resolver                                                                // 351\n * @param {object} options An optional dict of parameters to pass to web3.                                             // 352\n * @param {function} callback An optional callback; if specified, the                                                  // 353\n *        function executes asynchronously.                                                                            // 354\n * @returns The transaction ID if callback is not supplied.                                                            // 355\n */                                                                                                                    // 356\nENS.prototype.setResolver = function(name, addr) {                                                                     // 357\n    var node = namehash(name);                                                                                         // 358\n                                                                                                                       // 359\n    var callback = undefined;                                                                                          // 360\n    if(typeof arguments[arguments.length - 1] == 'function') {                                                         // 361\n        callback = arguments[arguments.length - 1];                                                                    // 362\n    }                                                                                                                  // 363\n                                                                                                                       // 364\n    var params = {};                                                                                                   // 365\n    if(callback && arguments.length == 4){                                                                             // 366\n        params = arguments[arguments.length - 2];                                                                      // 367\n    } else if(!callback && arguments.length == 3){                                                                     // 368\n        params = arguments[arguments.length - 1];                                                                      // 369\n    }                                                                                                                  // 370\n                                                                                                                       // 371\n    if(!callback) {                                                                                                    // 372\n        return this.registry.setResolver(node, addr, params);                                                          // 373\n    } else {                                                                                                           // 374\n        this.registry.setResolver(node, addr, params, callback);                                                       // 375\n    }                                                                                                                  // 376\n}                                                                                                                      // 377\n                                                                                                                       // 378\n/**                                                                                                                    // 379\n * owner returns the address of the owner of the specified name.                                                       // 380\n * @param {string} name The name to look up.                                                                           // 381\n * @param {function} callback An optional callback; if specified, the                                                  // 382\n *        function executes asynchronously.                                                                            // 383\n * @returns The resolved address if callback is not supplied.                                                          // 384\n */                                                                                                                    // 385\nENS.prototype.owner = function(name, callback) {                                                                       // 386\n    var node = namehash(name);                                                                                         // 387\n                                                                                                                       // 388\n    if(callback) {                                                                                                     // 389\n        this.registry.owner(node, callback);                                                                           // 390\n    } else {                                                                                                           // 391\n        return this.registry.owner(node);                                                                              // 392\n    }                                                                                                                  // 393\n}                                                                                                                      // 394\n                                                                                                                       // 395\n/**                                                                                                                    // 396\n * setOwner sets the owner of the specified name. Only the owner may call                                              // 397\n * setResolver or setSubnodeOwner. The calling account must be the current                                             // 398\n * owner of the name in order for this call to succeed.                                                                // 399\n * @param {string} name The name to update                                                                             // 400\n * @param {address} address The address of the new owner                                                               // 401\n * @param {object} options An optional dict of parameters to pass to web3.                                             // 402\n * @param {function} callback An optional callback; if specified, the                                                  // 403\n *        function executes asynchronously.                                                                            // 404\n * @returns The transaction ID if callback is not supplied.                                                            // 405\n */                                                                                                                    // 406\nENS.prototype.setOwner = function(name, addr) {                                                                        // 407\n    var node = namehash(name);                                                                                         // 408\n                                                                                                                       // 409\n    var callback = undefined;                                                                                          // 410\n    if(typeof arguments[arguments.length - 1] == 'function') {                                                         // 411\n        callback = arguments[arguments.length - 1];                                                                    // 412\n    }                                                                                                                  // 413\n                                                                                                                       // 414\n    var params = {};                                                                                                   // 415\n    if(callback && arguments.length == 4) {                                                                            // 416\n        params = arguments[arguments.length - 2];                                                                      // 417\n    } else if(!callback && arguments.length == 3) {                                                                    // 418\n        params = arguments[arguments.length - 1];                                                                      // 419\n    }                                                                                                                  // 420\n                                                                                                                       // 421\n    if(!callback) {                                                                                                    // 422\n        return this.registry.setOwner(node, addr, params);                                                             // 423\n    } else {                                                                                                           // 424\n        this.registry.setOwner(node, addr, params, callback);                                                          // 425\n    }                                                                                                                  // 426\n}                                                                                                                      // 427\n                                                                                                                       // 428\n/**                                                                                                                    // 429\n * setSubnodeOwner sets the owner of the specified name. The calling account                                           // 430\n * must be the owner of the parent name in order for this call to succeed -                                            // 431\n * for example, to call setSubnodeOwner on 'foo.bar.eth', the caller must be                                           // 432\n * the owner of 'bar.eth'.                                                                                             // 433\n * @param {string} name The name to update                                                                             // 434\n * @param {address} address The address of the new owner                                                               // 435\n * @param {object} options An optional dict of parameters to pass to web3.                                             // 436\n * @param {function} callback An optional callback; if specified, the                                                  // 437\n *        function executes asynchronously.                                                                            // 438\n * @returns The transaction ID if callback is not supplied.                                                            // 439\n */                                                                                                                    // 440\nENS.prototype.setSubnodeOwner = function(name, addr) {                                                                 // 441\n    var node = parentNamehash(name);                                                                                   // 442\n                                                                                                                       // 443\n    var callback = undefined;                                                                                          // 444\n    if(typeof arguments[arguments.length - 1] == 'function') {                                                         // 445\n        callback = arguments[arguments.length - 1];                                                                    // 446\n    }                                                                                                                  // 447\n                                                                                                                       // 448\n    var params = {};                                                                                                   // 449\n    if (callback && arguments.length == 4) {                                                                           // 450\n        params = arguments[arguments.length - 2];                                                                      // 451\n    } else if (!callback && arguments.length == 3) {                                                                   // 452\n        params = arguments[arguments.length - 1];                                                                      // 453\n    }                                                                                                                  // 454\n                                                                                                                       // 455\n    if(!callback) {                                                                                                    // 456\n        return this.registry.setSubnodeOwner(node[1], node[0], addr, params);                                          // 457\n    } else {                                                                                                           // 458\n        this.registry.setSubnodeOwner(node[1], node[0], addr, params, callback);                                       // 459\n    }                                                                                                                  // 460\n}                                                                                                                      // 461\n                                                                                                                       // 462\nmodule.exports = ENS;                                                                                                  // 463\n                                                                                                                       // 464\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"crypto-js\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/package.json                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"crypto-js\";                                                                                            // 1\nexports.version = \"3.1.8\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./core\",\"./x64-core\",\"./lib-typedarrays\",\"./enc-utf16\",\"./enc-base64\",\"./md5\",\"./sha1\",\"./sha256\",\"./sha224\",\"./sha512\",\"./sha384\",\"./sha3\",\"./ripemd160\",\"./hmac\",\"./pbkdf2\",\"./evpkdf\",\"./cipher-core\",\"./mode-cfb\",\"./mode-ctr\",\"./mode-ctr-gladman\",\"./mode-ofb\",\"./mode-ecb\",\"./pad-ansix923\",\"./pad-iso10126\",\"./pad-iso97971\",\"./pad-zeropadding\",\"./pad-nopadding\",\"./format-hex\",\"./aes\",\"./tripledes\",\"./rc4\",\"./rabbit\",\"./rabbit-legacy\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/index.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\troot.CryptoJS = factory(root.CryptoJS);                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\treturn CryptoJS;                                                                                                      // 16\n                                                                                                                       // 17\n}));                                                                                                                   // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/core.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory();                                                                                // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([], factory);                                                                                                 // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\troot.CryptoJS = factory();                                                                                           // 12\n\t}                                                                                                                     // 13\n}(this, function () {                                                                                                  // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * CryptoJS core components.                                                                                          // 17\n\t */                                                                                                                   // 18\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {                                                              // 19\n\t    /*                                                                                                                // 20\n\t     * Local polyfil of Object.create                                                                                 // 21\n\t     */                                                                                                               // 22\n\t    var create = Object.create || (function () {                                                                      // 23\n\t        function F() {};                                                                                              // 24\n                                                                                                                       // 25\n\t        return function (obj) {                                                                                       // 26\n\t            var subtype;                                                                                              // 27\n                                                                                                                       // 28\n\t            F.prototype = obj;                                                                                        // 29\n                                                                                                                       // 30\n\t            subtype = new F();                                                                                        // 31\n                                                                                                                       // 32\n\t            F.prototype = null;                                                                                       // 33\n                                                                                                                       // 34\n\t            return subtype;                                                                                           // 35\n\t        };                                                                                                            // 36\n\t    }())                                                                                                              // 37\n                                                                                                                       // 38\n\t    /**                                                                                                               // 39\n\t     * CryptoJS namespace.                                                                                            // 40\n\t     */                                                                                                               // 41\n\t    var C = {};                                                                                                       // 42\n                                                                                                                       // 43\n\t    /**                                                                                                               // 44\n\t     * Library namespace.                                                                                             // 45\n\t     */                                                                                                               // 46\n\t    var C_lib = C.lib = {};                                                                                           // 47\n                                                                                                                       // 48\n\t    /**                                                                                                               // 49\n\t     * Base object for prototypal inheritance.                                                                        // 50\n\t     */                                                                                                               // 51\n\t    var Base = C_lib.Base = (function () {                                                                            // 52\n                                                                                                                       // 53\n                                                                                                                       // 54\n\t        return {                                                                                                      // 55\n\t            /**                                                                                                       // 56\n\t             * Creates a new object that inherits from this object.                                                   // 57\n\t             *                                                                                                        // 58\n\t             * @param {Object} overrides Properties to copy into the new object.                                      // 59\n\t             *                                                                                                        // 60\n\t             * @return {Object} The new object.                                                                       // 61\n\t             *                                                                                                        // 62\n\t             * @static                                                                                                // 63\n\t             *                                                                                                        // 64\n\t             * @example                                                                                               // 65\n\t             *                                                                                                        // 66\n\t             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 67\n\t             *         field: 'value',                                                                                // 68\n\t             *                                                                                                        // 69\n\t             *         method: function () {                                                                          // 70\n\t             *         }                                                                                              // 71\n\t             *     });                                                                                                // 72\n\t             */                                                                                                       // 73\n\t            extend: function (overrides) {                                                                            // 74\n\t                // Spawn                                                                                              // 75\n\t                var subtype = create(this);                                                                           // 76\n                                                                                                                       // 77\n\t                // Augment                                                                                            // 78\n\t                if (overrides) {                                                                                      // 79\n\t                    subtype.mixIn(overrides);                                                                         // 80\n\t                }                                                                                                     // 81\n                                                                                                                       // 82\n\t                // Create default initializer                                                                         // 83\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {                                  // 84\n\t                    subtype.init = function () {                                                                      // 85\n\t                        subtype.$super.init.apply(this, arguments);                                                   // 86\n\t                    };                                                                                                // 87\n\t                }                                                                                                     // 88\n                                                                                                                       // 89\n\t                // Initializer's prototype is the subtype object                                                      // 90\n\t                subtype.init.prototype = subtype;                                                                     // 91\n                                                                                                                       // 92\n\t                // Reference supertype                                                                                // 93\n\t                subtype.$super = this;                                                                                // 94\n                                                                                                                       // 95\n\t                return subtype;                                                                                       // 96\n\t            },                                                                                                        // 97\n                                                                                                                       // 98\n\t            /**                                                                                                       // 99\n\t             * Extends this object and runs the init method.                                                          // 100\n\t             * Arguments to create() will be passed to init().                                                        // 101\n\t             *                                                                                                        // 102\n\t             * @return {Object} The new object.                                                                       // 103\n\t             *                                                                                                        // 104\n\t             * @static                                                                                                // 105\n\t             *                                                                                                        // 106\n\t             * @example                                                                                               // 107\n\t             *                                                                                                        // 108\n\t             *     var instance = MyType.create();                                                                    // 109\n\t             */                                                                                                       // 110\n\t            create: function () {                                                                                     // 111\n\t                var instance = this.extend();                                                                         // 112\n\t                instance.init.apply(instance, arguments);                                                             // 113\n                                                                                                                       // 114\n\t                return instance;                                                                                      // 115\n\t            },                                                                                                        // 116\n                                                                                                                       // 117\n\t            /**                                                                                                       // 118\n\t             * Initializes a newly created object.                                                                    // 119\n\t             * Override this method to add some logic when your objects are created.                                  // 120\n\t             *                                                                                                        // 121\n\t             * @example                                                                                               // 122\n\t             *                                                                                                        // 123\n\t             *     var MyType = CryptoJS.lib.Base.extend({                                                            // 124\n\t             *         init: function () {                                                                            // 125\n\t             *             // ...                                                                                     // 126\n\t             *         }                                                                                              // 127\n\t             *     });                                                                                                // 128\n\t             */                                                                                                       // 129\n\t            init: function () {                                                                                       // 130\n\t            },                                                                                                        // 131\n                                                                                                                       // 132\n\t            /**                                                                                                       // 133\n\t             * Copies properties into this object.                                                                    // 134\n\t             *                                                                                                        // 135\n\t             * @param {Object} properties The properties to mix in.                                                   // 136\n\t             *                                                                                                        // 137\n\t             * @example                                                                                               // 138\n\t             *                                                                                                        // 139\n\t             *     MyType.mixIn({                                                                                     // 140\n\t             *         field: 'value'                                                                                 // 141\n\t             *     });                                                                                                // 142\n\t             */                                                                                                       // 143\n\t            mixIn: function (properties) {                                                                            // 144\n\t                for (var propertyName in properties) {                                                                // 145\n\t                    if (properties.hasOwnProperty(propertyName)) {                                                    // 146\n\t                        this[propertyName] = properties[propertyName];                                                // 147\n\t                    }                                                                                                 // 148\n\t                }                                                                                                     // 149\n                                                                                                                       // 150\n\t                // IE won't copy toString using the loop above                                                        // 151\n\t                if (properties.hasOwnProperty('toString')) {                                                          // 152\n\t                    this.toString = properties.toString;                                                              // 153\n\t                }                                                                                                     // 154\n\t            },                                                                                                        // 155\n                                                                                                                       // 156\n\t            /**                                                                                                       // 157\n\t             * Creates a copy of this object.                                                                         // 158\n\t             *                                                                                                        // 159\n\t             * @return {Object} The clone.                                                                            // 160\n\t             *                                                                                                        // 161\n\t             * @example                                                                                               // 162\n\t             *                                                                                                        // 163\n\t             *     var clone = instance.clone();                                                                      // 164\n\t             */                                                                                                       // 165\n\t            clone: function () {                                                                                      // 166\n\t                return this.init.prototype.extend(this);                                                              // 167\n\t            }                                                                                                         // 168\n\t        };                                                                                                            // 169\n\t    }());                                                                                                             // 170\n                                                                                                                       // 171\n\t    /**                                                                                                               // 172\n\t     * An array of 32-bit words.                                                                                      // 173\n\t     *                                                                                                                // 174\n\t     * @property {Array} words The array of 32-bit words.                                                             // 175\n\t     * @property {number} sigBytes The number of significant bytes in this word array.                                // 176\n\t     */                                                                                                               // 177\n\t    var WordArray = C_lib.WordArray = Base.extend({                                                                   // 178\n\t        /**                                                                                                           // 179\n\t         * Initializes a newly created word array.                                                                    // 180\n\t         *                                                                                                            // 181\n\t         * @param {Array} words (Optional) An array of 32-bit words.                                                  // 182\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 183\n\t         *                                                                                                            // 184\n\t         * @example                                                                                                   // 185\n\t         *                                                                                                            // 186\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();                                                       // 187\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);                               // 188\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);                            // 189\n\t         */                                                                                                           // 190\n\t        init: function (words, sigBytes) {                                                                            // 191\n\t            words = this.words = words || [];                                                                         // 192\n                                                                                                                       // 193\n\t            if (sigBytes != undefined) {                                                                              // 194\n\t                this.sigBytes = sigBytes;                                                                             // 195\n\t            } else {                                                                                                  // 196\n\t                this.sigBytes = words.length * 4;                                                                     // 197\n\t            }                                                                                                         // 198\n\t        },                                                                                                            // 199\n                                                                                                                       // 200\n\t        /**                                                                                                           // 201\n\t         * Converts this word array to a string.                                                                      // 202\n\t         *                                                                                                            // 203\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex                // 204\n\t         *                                                                                                            // 205\n\t         * @return {string} The stringified word array.                                                               // 206\n\t         *                                                                                                            // 207\n\t         * @example                                                                                                   // 208\n\t         *                                                                                                            // 209\n\t         *     var string = wordArray + '';                                                                           // 210\n\t         *     var string = wordArray.toString();                                                                     // 211\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);                                                    // 212\n\t         */                                                                                                           // 213\n\t        toString: function (encoder) {                                                                                // 214\n\t            return (encoder || Hex).stringify(this);                                                                  // 215\n\t        },                                                                                                            // 216\n                                                                                                                       // 217\n\t        /**                                                                                                           // 218\n\t         * Concatenates a word array to this word array.                                                              // 219\n\t         *                                                                                                            // 220\n\t         * @param {WordArray} wordArray The word array to append.                                                     // 221\n\t         *                                                                                                            // 222\n\t         * @return {WordArray} This word array.                                                                       // 223\n\t         *                                                                                                            // 224\n\t         * @example                                                                                                   // 225\n\t         *                                                                                                            // 226\n\t         *     wordArray1.concat(wordArray2);                                                                         // 227\n\t         */                                                                                                           // 228\n\t        concat: function (wordArray) {                                                                                // 229\n\t            // Shortcuts                                                                                              // 230\n\t            var thisWords = this.words;                                                                               // 231\n\t            var thatWords = wordArray.words;                                                                          // 232\n\t            var thisSigBytes = this.sigBytes;                                                                         // 233\n\t            var thatSigBytes = wordArray.sigBytes;                                                                    // 234\n                                                                                                                       // 235\n\t            // Clamp excess bits                                                                                      // 236\n\t            this.clamp();                                                                                             // 237\n                                                                                                                       // 238\n\t            // Concat                                                                                                 // 239\n\t            if (thisSigBytes % 4) {                                                                                   // 240\n\t                // Copy one byte at a time                                                                            // 241\n\t                for (var i = 0; i < thatSigBytes; i++) {                                                              // 242\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                // 243\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);           // 244\n\t                }                                                                                                     // 245\n\t            } else {                                                                                                  // 246\n\t                // Copy one word at a time                                                                            // 247\n\t                for (var i = 0; i < thatSigBytes; i += 4) {                                                           // 248\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];                                         // 249\n\t                }                                                                                                     // 250\n\t            }                                                                                                         // 251\n\t            this.sigBytes += thatSigBytes;                                                                            // 252\n                                                                                                                       // 253\n\t            // Chainable                                                                                              // 254\n\t            return this;                                                                                              // 255\n\t        },                                                                                                            // 256\n                                                                                                                       // 257\n\t        /**                                                                                                           // 258\n\t         * Removes insignificant bits.                                                                                // 259\n\t         *                                                                                                            // 260\n\t         * @example                                                                                                   // 261\n\t         *                                                                                                            // 262\n\t         *     wordArray.clamp();                                                                                     // 263\n\t         */                                                                                                           // 264\n\t        clamp: function () {                                                                                          // 265\n\t            // Shortcuts                                                                                              // 266\n\t            var words = this.words;                                                                                   // 267\n\t            var sigBytes = this.sigBytes;                                                                             // 268\n                                                                                                                       // 269\n\t            // Clamp                                                                                                  // 270\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);                                         // 271\n\t            words.length = Math.ceil(sigBytes / 4);                                                                   // 272\n\t        },                                                                                                            // 273\n                                                                                                                       // 274\n\t        /**                                                                                                           // 275\n\t         * Creates a copy of this word array.                                                                         // 276\n\t         *                                                                                                            // 277\n\t         * @return {WordArray} The clone.                                                                             // 278\n\t         *                                                                                                            // 279\n\t         * @example                                                                                                   // 280\n\t         *                                                                                                            // 281\n\t         *     var clone = wordArray.clone();                                                                         // 282\n\t         */                                                                                                           // 283\n\t        clone: function () {                                                                                          // 284\n\t            var clone = Base.clone.call(this);                                                                        // 285\n\t            clone.words = this.words.slice(0);                                                                        // 286\n                                                                                                                       // 287\n\t            return clone;                                                                                             // 288\n\t        },                                                                                                            // 289\n                                                                                                                       // 290\n\t        /**                                                                                                           // 291\n\t         * Creates a word array filled with random bytes.                                                             // 292\n\t         *                                                                                                            // 293\n\t         * @param {number} nBytes The number of random bytes to generate.                                             // 294\n\t         *                                                                                                            // 295\n\t         * @return {WordArray} The random word array.                                                                 // 296\n\t         *                                                                                                            // 297\n\t         * @static                                                                                                    // 298\n\t         *                                                                                                            // 299\n\t         * @example                                                                                                   // 300\n\t         *                                                                                                            // 301\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);                                                     // 302\n\t         */                                                                                                           // 303\n\t        random: function (nBytes) {                                                                                   // 304\n\t            var words = [];                                                                                           // 305\n                                                                                                                       // 306\n\t            var r = (function (m_w) {                                                                                 // 307\n\t                var m_w = m_w;                                                                                        // 308\n\t                var m_z = 0x3ade68b1;                                                                                 // 309\n\t                var mask = 0xffffffff;                                                                                // 310\n                                                                                                                       // 311\n\t                return function () {                                                                                  // 312\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;                                           // 313\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;                                           // 314\n\t                    var result = ((m_z << 0x10) + m_w) & mask;                                                        // 315\n\t                    result /= 0x100000000;                                                                            // 316\n\t                    result += 0.5;                                                                                    // 317\n\t                    return result * (Math.random() > .5 ? 1 : -1);                                                    // 318\n\t                }                                                                                                     // 319\n\t            });                                                                                                       // 320\n                                                                                                                       // 321\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {                                                             // 322\n\t                var _r = r((rcache || Math.random()) * 0x100000000);                                                  // 323\n                                                                                                                       // 324\n\t                rcache = _r() * 0x3ade67b7;                                                                           // 325\n\t                words.push((_r() * 0x100000000) | 0);                                                                 // 326\n\t            }                                                                                                         // 327\n                                                                                                                       // 328\n\t            return new WordArray.init(words, nBytes);                                                                 // 329\n\t        }                                                                                                             // 330\n\t    });                                                                                                               // 331\n                                                                                                                       // 332\n\t    /**                                                                                                               // 333\n\t     * Encoder namespace.                                                                                             // 334\n\t     */                                                                                                               // 335\n\t    var C_enc = C.enc = {};                                                                                           // 336\n                                                                                                                       // 337\n\t    /**                                                                                                               // 338\n\t     * Hex encoding strategy.                                                                                         // 339\n\t     */                                                                                                               // 340\n\t    var Hex = C_enc.Hex = {                                                                                           // 341\n\t        /**                                                                                                           // 342\n\t         * Converts a word array to a hex string.                                                                     // 343\n\t         *                                                                                                            // 344\n\t         * @param {WordArray} wordArray The word array.                                                               // 345\n\t         *                                                                                                            // 346\n\t         * @return {string} The hex string.                                                                           // 347\n\t         *                                                                                                            // 348\n\t         * @static                                                                                                    // 349\n\t         *                                                                                                            // 350\n\t         * @example                                                                                                   // 351\n\t         *                                                                                                            // 352\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);                                                 // 353\n\t         */                                                                                                           // 354\n\t        stringify: function (wordArray) {                                                                             // 355\n\t            // Shortcuts                                                                                              // 356\n\t            var words = wordArray.words;                                                                              // 357\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 358\n                                                                                                                       // 359\n\t            // Convert                                                                                                // 360\n\t            var hexChars = [];                                                                                        // 361\n\t            for (var i = 0; i < sigBytes; i++) {                                                                      // 362\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 363\n\t                hexChars.push((bite >>> 4).toString(16));                                                             // 364\n\t                hexChars.push((bite & 0x0f).toString(16));                                                            // 365\n\t            }                                                                                                         // 366\n                                                                                                                       // 367\n\t            return hexChars.join('');                                                                                 // 368\n\t        },                                                                                                            // 369\n                                                                                                                       // 370\n\t        /**                                                                                                           // 371\n\t         * Converts a hex string to a word array.                                                                     // 372\n\t         *                                                                                                            // 373\n\t         * @param {string} hexStr The hex string.                                                                     // 374\n\t         *                                                                                                            // 375\n\t         * @return {WordArray} The word array.                                                                        // 376\n\t         *                                                                                                            // 377\n\t         * @static                                                                                                    // 378\n\t         *                                                                                                            // 379\n\t         * @example                                                                                                   // 380\n\t         *                                                                                                            // 381\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);                                                     // 382\n\t         */                                                                                                           // 383\n\t        parse: function (hexStr) {                                                                                    // 384\n\t            // Shortcut                                                                                               // 385\n\t            var hexStrLength = hexStr.length;                                                                         // 386\n                                                                                                                       // 387\n\t            // Convert                                                                                                // 388\n\t            var words = [];                                                                                           // 389\n\t            for (var i = 0; i < hexStrLength; i += 2) {                                                               // 390\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);                            // 391\n\t            }                                                                                                         // 392\n                                                                                                                       // 393\n\t            return new WordArray.init(words, hexStrLength / 2);                                                       // 394\n\t        }                                                                                                             // 395\n\t    };                                                                                                                // 396\n                                                                                                                       // 397\n\t    /**                                                                                                               // 398\n\t     * Latin1 encoding strategy.                                                                                      // 399\n\t     */                                                                                                               // 400\n\t    var Latin1 = C_enc.Latin1 = {                                                                                     // 401\n\t        /**                                                                                                           // 402\n\t         * Converts a word array to a Latin1 string.                                                                  // 403\n\t         *                                                                                                            // 404\n\t         * @param {WordArray} wordArray The word array.                                                               // 405\n\t         *                                                                                                            // 406\n\t         * @return {string} The Latin1 string.                                                                        // 407\n\t         *                                                                                                            // 408\n\t         * @static                                                                                                    // 409\n\t         *                                                                                                            // 410\n\t         * @example                                                                                                   // 411\n\t         *                                                                                                            // 412\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);                                           // 413\n\t         */                                                                                                           // 414\n\t        stringify: function (wordArray) {                                                                             // 415\n\t            // Shortcuts                                                                                              // 416\n\t            var words = wordArray.words;                                                                              // 417\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 418\n                                                                                                                       // 419\n\t            // Convert                                                                                                // 420\n\t            var latin1Chars = [];                                                                                     // 421\n\t            for (var i = 0; i < sigBytes; i++) {                                                                      // 422\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;                                            // 423\n\t                latin1Chars.push(String.fromCharCode(bite));                                                          // 424\n\t            }                                                                                                         // 425\n                                                                                                                       // 426\n\t            return latin1Chars.join('');                                                                              // 427\n\t        },                                                                                                            // 428\n                                                                                                                       // 429\n\t        /**                                                                                                           // 430\n\t         * Converts a Latin1 string to a word array.                                                                  // 431\n\t         *                                                                                                            // 432\n\t         * @param {string} latin1Str The Latin1 string.                                                               // 433\n\t         *                                                                                                            // 434\n\t         * @return {WordArray} The word array.                                                                        // 435\n\t         *                                                                                                            // 436\n\t         * @static                                                                                                    // 437\n\t         *                                                                                                            // 438\n\t         * @example                                                                                                   // 439\n\t         *                                                                                                            // 440\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);                                               // 441\n\t         */                                                                                                           // 442\n\t        parse: function (latin1Str) {                                                                                 // 443\n\t            // Shortcut                                                                                               // 444\n\t            var latin1StrLength = latin1Str.length;                                                                   // 445\n                                                                                                                       // 446\n\t            // Convert                                                                                                // 447\n\t            var words = [];                                                                                           // 448\n\t            for (var i = 0; i < latin1StrLength; i++) {                                                               // 449\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);                             // 450\n\t            }                                                                                                         // 451\n                                                                                                                       // 452\n\t            return new WordArray.init(words, latin1StrLength);                                                        // 453\n\t        }                                                                                                             // 454\n\t    };                                                                                                                // 455\n                                                                                                                       // 456\n\t    /**                                                                                                               // 457\n\t     * UTF-8 encoding strategy.                                                                                       // 458\n\t     */                                                                                                               // 459\n\t    var Utf8 = C_enc.Utf8 = {                                                                                         // 460\n\t        /**                                                                                                           // 461\n\t         * Converts a word array to a UTF-8 string.                                                                   // 462\n\t         *                                                                                                            // 463\n\t         * @param {WordArray} wordArray The word array.                                                               // 464\n\t         *                                                                                                            // 465\n\t         * @return {string} The UTF-8 string.                                                                         // 466\n\t         *                                                                                                            // 467\n\t         * @static                                                                                                    // 468\n\t         *                                                                                                            // 469\n\t         * @example                                                                                                   // 470\n\t         *                                                                                                            // 471\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);                                               // 472\n\t         */                                                                                                           // 473\n\t        stringify: function (wordArray) {                                                                             // 474\n\t            try {                                                                                                     // 475\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));                                       // 476\n\t            } catch (e) {                                                                                             // 477\n\t                throw new Error('Malformed UTF-8 data');                                                              // 478\n\t            }                                                                                                         // 479\n\t        },                                                                                                            // 480\n                                                                                                                       // 481\n\t        /**                                                                                                           // 482\n\t         * Converts a UTF-8 string to a word array.                                                                   // 483\n\t         *                                                                                                            // 484\n\t         * @param {string} utf8Str The UTF-8 string.                                                                  // 485\n\t         *                                                                                                            // 486\n\t         * @return {WordArray} The word array.                                                                        // 487\n\t         *                                                                                                            // 488\n\t         * @static                                                                                                    // 489\n\t         *                                                                                                            // 490\n\t         * @example                                                                                                   // 491\n\t         *                                                                                                            // 492\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);                                                   // 493\n\t         */                                                                                                           // 494\n\t        parse: function (utf8Str) {                                                                                   // 495\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));                                               // 496\n\t        }                                                                                                             // 497\n\t    };                                                                                                                // 498\n                                                                                                                       // 499\n\t    /**                                                                                                               // 500\n\t     * Abstract buffered block algorithm template.                                                                    // 501\n\t     *                                                                                                                // 502\n\t     * The property blockSize must be implemented in a concrete subtype.                                              // 503\n\t     *                                                                                                                // 504\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */                                                                                                               // 506\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({                                         // 507\n\t        /**                                                                                                           // 508\n\t         * Resets this block algorithm's data buffer to its initial state.                                            // 509\n\t         *                                                                                                            // 510\n\t         * @example                                                                                                   // 511\n\t         *                                                                                                            // 512\n\t         *     bufferedBlockAlgorithm.reset();                                                                        // 513\n\t         */                                                                                                           // 514\n\t        reset: function () {                                                                                          // 515\n\t            // Initial values                                                                                         // 516\n\t            this._data = new WordArray.init();                                                                        // 517\n\t            this._nDataBytes = 0;                                                                                     // 518\n\t        },                                                                                                            // 519\n                                                                                                                       // 520\n\t        /**                                                                                                           // 521\n\t         * Adds new data to this block algorithm's buffer.                                                            // 522\n\t         *                                                                                                            // 523\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.       // 524\n\t         *                                                                                                            // 525\n\t         * @example                                                                                                   // 526\n\t         *                                                                                                            // 527\n\t         *     bufferedBlockAlgorithm._append('data');                                                                // 528\n\t         *     bufferedBlockAlgorithm._append(wordArray);                                                             // 529\n\t         */                                                                                                           // 530\n\t        _append: function (data) {                                                                                    // 531\n\t            // Convert string to WordArray, else assume WordArray already                                             // 532\n\t            if (typeof data == 'string') {                                                                            // 533\n\t                data = Utf8.parse(data);                                                                              // 534\n\t            }                                                                                                         // 535\n                                                                                                                       // 536\n\t            // Append                                                                                                 // 537\n\t            this._data.concat(data);                                                                                  // 538\n\t            this._nDataBytes += data.sigBytes;                                                                        // 539\n\t        },                                                                                                            // 540\n                                                                                                                       // 541\n\t        /**                                                                                                           // 542\n\t         * Processes available data blocks.                                                                           // 543\n\t         *                                                                                                            // 544\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.              // 545\n\t         *                                                                                                            // 546\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.                        // 547\n\t         *                                                                                                            // 548\n\t         * @return {WordArray} The processed data.                                                                    // 549\n\t         *                                                                                                            // 550\n\t         * @example                                                                                                   // 551\n\t         *                                                                                                            // 552\n\t         *     var processedData = bufferedBlockAlgorithm._process();                                                 // 553\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');                                        // 554\n\t         */                                                                                                           // 555\n\t        _process: function (doFlush) {                                                                                // 556\n\t            // Shortcuts                                                                                              // 557\n\t            var data = this._data;                                                                                    // 558\n\t            var dataWords = data.words;                                                                               // 559\n\t            var dataSigBytes = data.sigBytes;                                                                         // 560\n\t            var blockSize = this.blockSize;                                                                           // 561\n\t            var blockSizeBytes = blockSize * 4;                                                                       // 562\n                                                                                                                       // 563\n\t            // Count blocks ready                                                                                     // 564\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;                                                         // 565\n\t            if (doFlush) {                                                                                            // 566\n\t                // Round up to include partial blocks                                                                 // 567\n\t                nBlocksReady = Math.ceil(nBlocksReady);                                                               // 568\n\t            } else {                                                                                                  // 569\n\t                // Round down to include only full blocks,                                                            // 570\n\t                // less the number of blocks that must remain in the buffer                                           // 571\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);                                 // 572\n\t            }                                                                                                         // 573\n                                                                                                                       // 574\n\t            // Count words ready                                                                                      // 575\n\t            var nWordsReady = nBlocksReady * blockSize;                                                               // 576\n                                                                                                                       // 577\n\t            // Count bytes ready                                                                                      // 578\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);                                                // 579\n                                                                                                                       // 580\n\t            // Process blocks                                                                                         // 581\n\t            if (nWordsReady) {                                                                                        // 582\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {                                     // 583\n\t                    // Perform concrete-algorithm logic                                                               // 584\n\t                    this._doProcessBlock(dataWords, offset);                                                          // 585\n\t                }                                                                                                     // 586\n                                                                                                                       // 587\n\t                // Remove processed words                                                                             // 588\n\t                var processedWords = dataWords.splice(0, nWordsReady);                                                // 589\n\t                data.sigBytes -= nBytesReady;                                                                         // 590\n\t            }                                                                                                         // 591\n                                                                                                                       // 592\n\t            // Return processed words                                                                                 // 593\n\t            return new WordArray.init(processedWords, nBytesReady);                                                   // 594\n\t        },                                                                                                            // 595\n                                                                                                                       // 596\n\t        /**                                                                                                           // 597\n\t         * Creates a copy of this object.                                                                             // 598\n\t         *                                                                                                            // 599\n\t         * @return {Object} The clone.                                                                                // 600\n\t         *                                                                                                            // 601\n\t         * @example                                                                                                   // 602\n\t         *                                                                                                            // 603\n\t         *     var clone = bufferedBlockAlgorithm.clone();                                                            // 604\n\t         */                                                                                                           // 605\n\t        clone: function () {                                                                                          // 606\n\t            var clone = Base.clone.call(this);                                                                        // 607\n\t            clone._data = this._data.clone();                                                                         // 608\n                                                                                                                       // 609\n\t            return clone;                                                                                             // 610\n\t        },                                                                                                            // 611\n                                                                                                                       // 612\n\t        _minBufferSize: 0                                                                                             // 613\n\t    });                                                                                                               // 614\n                                                                                                                       // 615\n\t    /**                                                                                                               // 616\n\t     * Abstract hasher template.                                                                                      // 617\n\t     *                                                                                                                // 618\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)        // 619\n\t     */                                                                                                               // 620\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({                                                       // 621\n\t        /**                                                                                                           // 622\n\t         * Configuration options.                                                                                     // 623\n\t         */                                                                                                           // 624\n\t        cfg: Base.extend(),                                                                                           // 625\n                                                                                                                       // 626\n\t        /**                                                                                                           // 627\n\t         * Initializes a newly created hasher.                                                                        // 628\n\t         *                                                                                                            // 629\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.                 // 630\n\t         *                                                                                                            // 631\n\t         * @example                                                                                                   // 632\n\t         *                                                                                                            // 633\n\t         *     var hasher = CryptoJS.algo.SHA256.create();                                                            // 634\n\t         */                                                                                                           // 635\n\t        init: function (cfg) {                                                                                        // 636\n\t            // Apply config defaults                                                                                  // 637\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 638\n                                                                                                                       // 639\n\t            // Set initial values                                                                                     // 640\n\t            this.reset();                                                                                             // 641\n\t        },                                                                                                            // 642\n                                                                                                                       // 643\n\t        /**                                                                                                           // 644\n\t         * Resets this hasher to its initial state.                                                                   // 645\n\t         *                                                                                                            // 646\n\t         * @example                                                                                                   // 647\n\t         *                                                                                                            // 648\n\t         *     hasher.reset();                                                                                        // 649\n\t         */                                                                                                           // 650\n\t        reset: function () {                                                                                          // 651\n\t            // Reset data buffer                                                                                      // 652\n\t            BufferedBlockAlgorithm.reset.call(this);                                                                  // 653\n                                                                                                                       // 654\n\t            // Perform concrete-hasher logic                                                                          // 655\n\t            this._doReset();                                                                                          // 656\n\t        },                                                                                                            // 657\n                                                                                                                       // 658\n\t        /**                                                                                                           // 659\n\t         * Updates this hasher with a message.                                                                        // 660\n\t         *                                                                                                            // 661\n\t         * @param {WordArray|string} messageUpdate The message to append.                                             // 662\n\t         *                                                                                                            // 663\n\t         * @return {Hasher} This hasher.                                                                              // 664\n\t         *                                                                                                            // 665\n\t         * @example                                                                                                   // 666\n\t         *                                                                                                            // 667\n\t         *     hasher.update('message');                                                                              // 668\n\t         *     hasher.update(wordArray);                                                                              // 669\n\t         */                                                                                                           // 670\n\t        update: function (messageUpdate) {                                                                            // 671\n\t            // Append                                                                                                 // 672\n\t            this._append(messageUpdate);                                                                              // 673\n                                                                                                                       // 674\n\t            // Update the hash                                                                                        // 675\n\t            this._process();                                                                                          // 676\n                                                                                                                       // 677\n\t            // Chainable                                                                                              // 678\n\t            return this;                                                                                              // 679\n\t        },                                                                                                            // 680\n                                                                                                                       // 681\n\t        /**                                                                                                           // 682\n\t         * Finalizes the hash computation.                                                                            // 683\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 684\n\t         *                                                                                                            // 685\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 686\n\t         *                                                                                                            // 687\n\t         * @return {WordArray} The hash.                                                                              // 688\n\t         *                                                                                                            // 689\n\t         * @example                                                                                                   // 690\n\t         *                                                                                                            // 691\n\t         *     var hash = hasher.finalize();                                                                          // 692\n\t         *     var hash = hasher.finalize('message');                                                                 // 693\n\t         *     var hash = hasher.finalize(wordArray);                                                                 // 694\n\t         */                                                                                                           // 695\n\t        finalize: function (messageUpdate) {                                                                          // 696\n\t            // Final message update                                                                                   // 697\n\t            if (messageUpdate) {                                                                                      // 698\n\t                this._append(messageUpdate);                                                                          // 699\n\t            }                                                                                                         // 700\n                                                                                                                       // 701\n\t            // Perform concrete-hasher logic                                                                          // 702\n\t            var hash = this._doFinalize();                                                                            // 703\n                                                                                                                       // 704\n\t            return hash;                                                                                              // 705\n\t        },                                                                                                            // 706\n                                                                                                                       // 707\n\t        blockSize: 512/32,                                                                                            // 708\n                                                                                                                       // 709\n\t        /**                                                                                                           // 710\n\t         * Creates a shortcut function to a hasher's object interface.                                                // 711\n\t         *                                                                                                            // 712\n\t         * @param {Hasher} hasher The hasher to create a helper for.                                                  // 713\n\t         *                                                                                                            // 714\n\t         * @return {Function} The shortcut function.                                                                  // 715\n\t         *                                                                                                            // 716\n\t         * @static                                                                                                    // 717\n\t         *                                                                                                            // 718\n\t         * @example                                                                                                   // 719\n\t         *                                                                                                            // 720\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);                                  // 721\n\t         */                                                                                                           // 722\n\t        _createHelper: function (hasher) {                                                                            // 723\n\t            return function (message, cfg) {                                                                          // 724\n\t                return new hasher.init(cfg).finalize(message);                                                        // 725\n\t            };                                                                                                        // 726\n\t        },                                                                                                            // 727\n                                                                                                                       // 728\n\t        /**                                                                                                           // 729\n\t         * Creates a shortcut function to the HMAC's object interface.                                                // 730\n\t         *                                                                                                            // 731\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.                                              // 732\n\t         *                                                                                                            // 733\n\t         * @return {Function} The shortcut function.                                                                  // 734\n\t         *                                                                                                            // 735\n\t         * @static                                                                                                    // 736\n\t         *                                                                                                            // 737\n\t         * @example                                                                                                   // 738\n\t         *                                                                                                            // 739\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);                          // 740\n\t         */                                                                                                           // 741\n\t        _createHmacHelper: function (hasher) {                                                                        // 742\n\t            return function (message, key) {                                                                          // 743\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);                                           // 744\n\t            };                                                                                                        // 745\n\t        }                                                                                                             // 746\n\t    });                                                                                                               // 747\n                                                                                                                       // 748\n\t    /**                                                                                                               // 749\n\t     * Algorithm namespace.                                                                                           // 750\n\t     */                                                                                                               // 751\n\t    var C_algo = C.algo = {};                                                                                         // 752\n                                                                                                                       // 753\n\t    return C;                                                                                                         // 754\n\t}(Math));                                                                                                             // 755\n                                                                                                                       // 756\n                                                                                                                       // 757\n\treturn CryptoJS;                                                                                                      // 758\n                                                                                                                       // 759\n}));                                                                                                                   // 760\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"x64-core.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/x64-core.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function (undefined) {                                                                                               // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var Base = C_lib.Base;                                                                                            // 20\n\t    var X32WordArray = C_lib.WordArray;                                                                               // 21\n                                                                                                                       // 22\n\t    /**                                                                                                               // 23\n\t     * x64 namespace.                                                                                                 // 24\n\t     */                                                                                                               // 25\n\t    var C_x64 = C.x64 = {};                                                                                           // 26\n                                                                                                                       // 27\n\t    /**                                                                                                               // 28\n\t     * A 64-bit word.                                                                                                 // 29\n\t     */                                                                                                               // 30\n\t    var X64Word = C_x64.Word = Base.extend({                                                                          // 31\n\t        /**                                                                                                           // 32\n\t         * Initializes a newly created 64-bit word.                                                                   // 33\n\t         *                                                                                                            // 34\n\t         * @param {number} high The high 32 bits.                                                                     // 35\n\t         * @param {number} low The low 32 bits.                                                                       // 36\n\t         *                                                                                                            // 37\n\t         * @example                                                                                                   // 38\n\t         *                                                                                                            // 39\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);                                        // 40\n\t         */                                                                                                           // 41\n\t        init: function (high, low) {                                                                                  // 42\n\t            this.high = high;                                                                                         // 43\n\t            this.low = low;                                                                                           // 44\n\t        }                                                                                                             // 45\n                                                                                                                       // 46\n\t        /**                                                                                                           // 47\n\t         * Bitwise NOTs this word.                                                                                    // 48\n\t         *                                                                                                            // 49\n\t         * @return {X64Word} A new x64-Word object after negating.                                                    // 50\n\t         *                                                                                                            // 51\n\t         * @example                                                                                                   // 52\n\t         *                                                                                                            // 53\n\t         *     var negated = x64Word.not();                                                                           // 54\n\t         */                                                                                                           // 55\n\t        // not: function () {                                                                                         // 56\n\t            // var high = ~this.high;                                                                                 // 57\n\t            // var low = ~this.low;                                                                                   // 58\n                                                                                                                       // 59\n\t            // return X64Word.create(high, low);                                                                      // 60\n\t        // },                                                                                                         // 61\n                                                                                                                       // 62\n\t        /**                                                                                                           // 63\n\t         * Bitwise ANDs this word with the passed word.                                                               // 64\n\t         *                                                                                                            // 65\n\t         * @param {X64Word} word The x64-Word to AND with this word.                                                  // 66\n\t         *                                                                                                            // 67\n\t         * @return {X64Word} A new x64-Word object after ANDing.                                                      // 68\n\t         *                                                                                                            // 69\n\t         * @example                                                                                                   // 70\n\t         *                                                                                                            // 71\n\t         *     var anded = x64Word.and(anotherX64Word);                                                               // 72\n\t         */                                                                                                           // 73\n\t        // and: function (word) {                                                                                     // 74\n\t            // var high = this.high & word.high;                                                                      // 75\n\t            // var low = this.low & word.low;                                                                         // 76\n                                                                                                                       // 77\n\t            // return X64Word.create(high, low);                                                                      // 78\n\t        // },                                                                                                         // 79\n                                                                                                                       // 80\n\t        /**                                                                                                           // 81\n\t         * Bitwise ORs this word with the passed word.                                                                // 82\n\t         *                                                                                                            // 83\n\t         * @param {X64Word} word The x64-Word to OR with this word.                                                   // 84\n\t         *                                                                                                            // 85\n\t         * @return {X64Word} A new x64-Word object after ORing.                                                       // 86\n\t         *                                                                                                            // 87\n\t         * @example                                                                                                   // 88\n\t         *                                                                                                            // 89\n\t         *     var ored = x64Word.or(anotherX64Word);                                                                 // 90\n\t         */                                                                                                           // 91\n\t        // or: function (word) {                                                                                      // 92\n\t            // var high = this.high | word.high;                                                                      // 93\n\t            // var low = this.low | word.low;                                                                         // 94\n                                                                                                                       // 95\n\t            // return X64Word.create(high, low);                                                                      // 96\n\t        // },                                                                                                         // 97\n                                                                                                                       // 98\n\t        /**                                                                                                           // 99\n\t         * Bitwise XORs this word with the passed word.                                                               // 100\n\t         *                                                                                                            // 101\n\t         * @param {X64Word} word The x64-Word to XOR with this word.                                                  // 102\n\t         *                                                                                                            // 103\n\t         * @return {X64Word} A new x64-Word object after XORing.                                                      // 104\n\t         *                                                                                                            // 105\n\t         * @example                                                                                                   // 106\n\t         *                                                                                                            // 107\n\t         *     var xored = x64Word.xor(anotherX64Word);                                                               // 108\n\t         */                                                                                                           // 109\n\t        // xor: function (word) {                                                                                     // 110\n\t            // var high = this.high ^ word.high;                                                                      // 111\n\t            // var low = this.low ^ word.low;                                                                         // 112\n                                                                                                                       // 113\n\t            // return X64Word.create(high, low);                                                                      // 114\n\t        // },                                                                                                         // 115\n                                                                                                                       // 116\n\t        /**                                                                                                           // 117\n\t         * Shifts this word n bits to the left.                                                                       // 118\n\t         *                                                                                                            // 119\n\t         * @param {number} n The number of bits to shift.                                                             // 120\n\t         *                                                                                                            // 121\n\t         * @return {X64Word} A new x64-Word object after shifting.                                                    // 122\n\t         *                                                                                                            // 123\n\t         * @example                                                                                                   // 124\n\t         *                                                                                                            // 125\n\t         *     var shifted = x64Word.shiftL(25);                                                                      // 126\n\t         */                                                                                                           // 127\n\t        // shiftL: function (n) {                                                                                     // 128\n\t            // if (n < 32) {                                                                                          // 129\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));                                             // 130\n\t                // var low = this.low << n;                                                                           // 131\n\t            // } else {                                                                                               // 132\n\t                // var high = this.low << (n - 32);                                                                   // 133\n\t                // var low = 0;                                                                                       // 134\n\t            // }                                                                                                      // 135\n                                                                                                                       // 136\n\t            // return X64Word.create(high, low);                                                                      // 137\n\t        // },                                                                                                         // 138\n                                                                                                                       // 139\n\t        /**                                                                                                           // 140\n\t         * Shifts this word n bits to the right.                                                                      // 141\n\t         *                                                                                                            // 142\n\t         * @param {number} n The number of bits to shift.                                                             // 143\n\t         *                                                                                                            // 144\n\t         * @return {X64Word} A new x64-Word object after shifting.                                                    // 145\n\t         *                                                                                                            // 146\n\t         * @example                                                                                                   // 147\n\t         *                                                                                                            // 148\n\t         *     var shifted = x64Word.shiftR(7);                                                                       // 149\n\t         */                                                                                                           // 150\n\t        // shiftR: function (n) {                                                                                     // 151\n\t            // if (n < 32) {                                                                                          // 152\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));                                              // 153\n\t                // var high = this.high >>> n;                                                                        // 154\n\t            // } else {                                                                                               // 155\n\t                // var low = this.high >>> (n - 32);                                                                  // 156\n\t                // var high = 0;                                                                                      // 157\n\t            // }                                                                                                      // 158\n                                                                                                                       // 159\n\t            // return X64Word.create(high, low);                                                                      // 160\n\t        // },                                                                                                         // 161\n                                                                                                                       // 162\n\t        /**                                                                                                           // 163\n\t         * Rotates this word n bits to the left.                                                                      // 164\n\t         *                                                                                                            // 165\n\t         * @param {number} n The number of bits to rotate.                                                            // 166\n\t         *                                                                                                            // 167\n\t         * @return {X64Word} A new x64-Word object after rotating.                                                    // 168\n\t         *                                                                                                            // 169\n\t         * @example                                                                                                   // 170\n\t         *                                                                                                            // 171\n\t         *     var rotated = x64Word.rotL(25);                                                                        // 172\n\t         */                                                                                                           // 173\n\t        // rotL: function (n) {                                                                                       // 174\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));                                                         // 175\n\t        // },                                                                                                         // 176\n                                                                                                                       // 177\n\t        /**                                                                                                           // 178\n\t         * Rotates this word n bits to the right.                                                                     // 179\n\t         *                                                                                                            // 180\n\t         * @param {number} n The number of bits to rotate.                                                            // 181\n\t         *                                                                                                            // 182\n\t         * @return {X64Word} A new x64-Word object after rotating.                                                    // 183\n\t         *                                                                                                            // 184\n\t         * @example                                                                                                   // 185\n\t         *                                                                                                            // 186\n\t         *     var rotated = x64Word.rotR(7);                                                                         // 187\n\t         */                                                                                                           // 188\n\t        // rotR: function (n) {                                                                                       // 189\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));                                                         // 190\n\t        // },                                                                                                         // 191\n                                                                                                                       // 192\n\t        /**                                                                                                           // 193\n\t         * Adds this word with the passed word.                                                                       // 194\n\t         *                                                                                                            // 195\n\t         * @param {X64Word} word The x64-Word to add with this word.                                                  // 196\n\t         *                                                                                                            // 197\n\t         * @return {X64Word} A new x64-Word object after adding.                                                      // 198\n\t         *                                                                                                            // 199\n\t         * @example                                                                                                   // 200\n\t         *                                                                                                            // 201\n\t         *     var added = x64Word.add(anotherX64Word);                                                               // 202\n\t         */                                                                                                           // 203\n\t        // add: function (word) {                                                                                     // 204\n\t            // var low = (this.low + word.low) | 0;                                                                   // 205\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;                                                    // 206\n\t            // var high = (this.high + word.high + carry) | 0;                                                        // 207\n                                                                                                                       // 208\n\t            // return X64Word.create(high, low);                                                                      // 209\n\t        // }                                                                                                          // 210\n\t    });                                                                                                               // 211\n                                                                                                                       // 212\n\t    /**                                                                                                               // 213\n\t     * An array of 64-bit words.                                                                                      // 214\n\t     *                                                                                                                // 215\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.                                                // 216\n\t     * @property {number} sigBytes The number of significant bytes in this word array.                                // 217\n\t     */                                                                                                               // 218\n\t    var X64WordArray = C_x64.WordArray = Base.extend({                                                                // 219\n\t        /**                                                                                                           // 220\n\t         * Initializes a newly created word array.                                                                    // 221\n\t         *                                                                                                            // 222\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.                                     // 223\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.                          // 224\n\t         *                                                                                                            // 225\n\t         * @example                                                                                                   // 226\n\t         *                                                                                                            // 227\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();                                                       // 228\n\t         *                                                                                                            // 229\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 230\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 231\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 232\n\t         *     ]);                                                                                                    // 233\n\t         *                                                                                                            // 234\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([                                                        // 235\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),                                                  // 236\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)                                                   // 237\n\t         *     ], 10);                                                                                                // 238\n\t         */                                                                                                           // 239\n\t        init: function (words, sigBytes) {                                                                            // 240\n\t            words = this.words = words || [];                                                                         // 241\n                                                                                                                       // 242\n\t            if (sigBytes != undefined) {                                                                              // 243\n\t                this.sigBytes = sigBytes;                                                                             // 244\n\t            } else {                                                                                                  // 245\n\t                this.sigBytes = words.length * 8;                                                                     // 246\n\t            }                                                                                                         // 247\n\t        },                                                                                                            // 248\n                                                                                                                       // 249\n\t        /**                                                                                                           // 250\n\t         * Converts this 64-bit word array to a 32-bit word array.                                                    // 251\n\t         *                                                                                                            // 252\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.                            // 253\n\t         *                                                                                                            // 254\n\t         * @example                                                                                                   // 255\n\t         *                                                                                                            // 256\n\t         *     var x32WordArray = x64WordArray.toX32();                                                               // 257\n\t         */                                                                                                           // 258\n\t        toX32: function () {                                                                                          // 259\n\t            // Shortcuts                                                                                              // 260\n\t            var x64Words = this.words;                                                                                // 261\n\t            var x64WordsLength = x64Words.length;                                                                     // 262\n                                                                                                                       // 263\n\t            // Convert                                                                                                // 264\n\t            var x32Words = [];                                                                                        // 265\n\t            for (var i = 0; i < x64WordsLength; i++) {                                                                // 266\n\t                var x64Word = x64Words[i];                                                                            // 267\n\t                x32Words.push(x64Word.high);                                                                          // 268\n\t                x32Words.push(x64Word.low);                                                                           // 269\n\t            }                                                                                                         // 270\n                                                                                                                       // 271\n\t            return X32WordArray.create(x32Words, this.sigBytes);                                                      // 272\n\t        },                                                                                                            // 273\n                                                                                                                       // 274\n\t        /**                                                                                                           // 275\n\t         * Creates a copy of this word array.                                                                         // 276\n\t         *                                                                                                            // 277\n\t         * @return {X64WordArray} The clone.                                                                          // 278\n\t         *                                                                                                            // 279\n\t         * @example                                                                                                   // 280\n\t         *                                                                                                            // 281\n\t         *     var clone = x64WordArray.clone();                                                                      // 282\n\t         */                                                                                                           // 283\n\t        clone: function () {                                                                                          // 284\n\t            var clone = Base.clone.call(this);                                                                        // 285\n                                                                                                                       // 286\n\t            // Clone \"words\" array                                                                                    // 287\n\t            var words = clone.words = this.words.slice(0);                                                            // 288\n                                                                                                                       // 289\n\t            // Clone each X64Word object                                                                              // 290\n\t            var wordsLength = words.length;                                                                           // 291\n\t            for (var i = 0; i < wordsLength; i++) {                                                                   // 292\n\t                words[i] = words[i].clone();                                                                          // 293\n\t            }                                                                                                         // 294\n                                                                                                                       // 295\n\t            return clone;                                                                                             // 296\n\t        }                                                                                                             // 297\n\t    });                                                                                                               // 298\n\t}());                                                                                                                 // 299\n                                                                                                                       // 300\n                                                                                                                       // 301\n\treturn CryptoJS;                                                                                                      // 302\n                                                                                                                       // 303\n}));                                                                                                                   // 304\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib-typedarrays.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/lib-typedarrays.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Check if typed arrays are supported                                                                            // 17\n\t    if (typeof ArrayBuffer != 'function') {                                                                           // 18\n\t        return;                                                                                                       // 19\n\t    }                                                                                                                 // 20\n                                                                                                                       // 21\n\t    // Shortcuts                                                                                                      // 22\n\t    var C = CryptoJS;                                                                                                 // 23\n\t    var C_lib = C.lib;                                                                                                // 24\n\t    var WordArray = C_lib.WordArray;                                                                                  // 25\n                                                                                                                       // 26\n\t    // Reference original init                                                                                        // 27\n\t    var superInit = WordArray.init;                                                                                   // 28\n                                                                                                                       // 29\n\t    // Augment WordArray.init to handle typed arrays                                                                  // 30\n\t    var subInit = WordArray.init = function (typedArray) {                                                            // 31\n\t        // Convert buffers to uint8                                                                                   // 32\n\t        if (typedArray instanceof ArrayBuffer) {                                                                      // 33\n\t            typedArray = new Uint8Array(typedArray);                                                                  // 34\n\t        }                                                                                                             // 35\n                                                                                                                       // 36\n\t        // Convert other array views to uint8                                                                         // 37\n\t        if (                                                                                                          // 38\n\t            typedArray instanceof Int8Array ||                                                                        // 39\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||                  // 40\n\t            typedArray instanceof Int16Array ||                                                                       // 41\n\t            typedArray instanceof Uint16Array ||                                                                      // 42\n\t            typedArray instanceof Int32Array ||                                                                       // 43\n\t            typedArray instanceof Uint32Array ||                                                                      // 44\n\t            typedArray instanceof Float32Array ||                                                                     // 45\n\t            typedArray instanceof Float64Array                                                                        // 46\n\t        ) {                                                                                                           // 47\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);             // 48\n\t        }                                                                                                             // 49\n                                                                                                                       // 50\n\t        // Handle Uint8Array                                                                                          // 51\n\t        if (typedArray instanceof Uint8Array) {                                                                       // 52\n\t            // Shortcut                                                                                               // 53\n\t            var typedArrayByteLength = typedArray.byteLength;                                                         // 54\n                                                                                                                       // 55\n\t            // Extract bytes                                                                                          // 56\n\t            var words = [];                                                                                           // 57\n\t            for (var i = 0; i < typedArrayByteLength; i++) {                                                          // 58\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);                                                // 59\n\t            }                                                                                                         // 60\n                                                                                                                       // 61\n\t            // Initialize this word array                                                                             // 62\n\t            superInit.call(this, words, typedArrayByteLength);                                                        // 63\n\t        } else {                                                                                                      // 64\n\t            // Else call normal init                                                                                  // 65\n\t            superInit.apply(this, arguments);                                                                         // 66\n\t        }                                                                                                             // 67\n\t    };                                                                                                                // 68\n                                                                                                                       // 69\n\t    subInit.prototype = WordArray;                                                                                    // 70\n\t}());                                                                                                                 // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\n\treturn CryptoJS.lib.WordArray;                                                                                        // 74\n                                                                                                                       // 75\n}));                                                                                                                   // 76\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"enc-utf16.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/enc-utf16.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var C_enc = C.enc;                                                                                                // 21\n                                                                                                                       // 22\n\t    /**                                                                                                               // 23\n\t     * UTF-16 BE encoding strategy.                                                                                   // 24\n\t     */                                                                                                               // 25\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {                                                                     // 26\n\t        /**                                                                                                           // 27\n\t         * Converts a word array to a UTF-16 BE string.                                                               // 28\n\t         *                                                                                                            // 29\n\t         * @param {WordArray} wordArray The word array.                                                               // 30\n\t         *                                                                                                            // 31\n\t         * @return {string} The UTF-16 BE string.                                                                     // 32\n\t         *                                                                                                            // 33\n\t         * @static                                                                                                    // 34\n\t         *                                                                                                            // 35\n\t         * @example                                                                                                   // 36\n\t         *                                                                                                            // 37\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);                                             // 38\n\t         */                                                                                                           // 39\n\t        stringify: function (wordArray) {                                                                             // 40\n\t            // Shortcuts                                                                                              // 41\n\t            var words = wordArray.words;                                                                              // 42\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 43\n                                                                                                                       // 44\n\t            // Convert                                                                                                // 45\n\t            var utf16Chars = [];                                                                                      // 46\n\t            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 47\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;                                     // 48\n\t                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 49\n\t            }                                                                                                         // 50\n                                                                                                                       // 51\n\t            return utf16Chars.join('');                                                                               // 52\n\t        },                                                                                                            // 53\n                                                                                                                       // 54\n\t        /**                                                                                                           // 55\n\t         * Converts a UTF-16 BE string to a word array.                                                               // 56\n\t         *                                                                                                            // 57\n\t         * @param {string} utf16Str The UTF-16 BE string.                                                             // 58\n\t         *                                                                                                            // 59\n\t         * @return {WordArray} The word array.                                                                        // 60\n\t         *                                                                                                            // 61\n\t         * @static                                                                                                    // 62\n\t         *                                                                                                            // 63\n\t         * @example                                                                                                   // 64\n\t         *                                                                                                            // 65\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);                                                 // 66\n\t         */                                                                                                           // 67\n\t        parse: function (utf16Str) {                                                                                  // 68\n\t            // Shortcut                                                                                               // 69\n\t            var utf16StrLength = utf16Str.length;                                                                     // 70\n                                                                                                                       // 71\n\t            // Convert                                                                                                // 72\n\t            var words = [];                                                                                           // 73\n\t            for (var i = 0; i < utf16StrLength; i++) {                                                                // 74\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);                                      // 75\n\t            }                                                                                                         // 76\n                                                                                                                       // 77\n\t            return WordArray.create(words, utf16StrLength * 2);                                                       // 78\n\t        }                                                                                                             // 79\n\t    };                                                                                                                // 80\n                                                                                                                       // 81\n\t    /**                                                                                                               // 82\n\t     * UTF-16 LE encoding strategy.                                                                                   // 83\n\t     */                                                                                                               // 84\n\t    C_enc.Utf16LE = {                                                                                                 // 85\n\t        /**                                                                                                           // 86\n\t         * Converts a word array to a UTF-16 LE string.                                                               // 87\n\t         *                                                                                                            // 88\n\t         * @param {WordArray} wordArray The word array.                                                               // 89\n\t         *                                                                                                            // 90\n\t         * @return {string} The UTF-16 LE string.                                                                     // 91\n\t         *                                                                                                            // 92\n\t         * @static                                                                                                    // 93\n\t         *                                                                                                            // 94\n\t         * @example                                                                                                   // 95\n\t         *                                                                                                            // 96\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);                                              // 97\n\t         */                                                                                                           // 98\n\t        stringify: function (wordArray) {                                                                             // 99\n\t            // Shortcuts                                                                                              // 100\n\t            var words = wordArray.words;                                                                              // 101\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 102\n                                                                                                                       // 103\n\t            // Convert                                                                                                // 104\n\t            var utf16Chars = [];                                                                                      // 105\n\t            for (var i = 0; i < sigBytes; i += 2) {                                                                   // 106\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);                         // 107\n\t                utf16Chars.push(String.fromCharCode(codePoint));                                                      // 108\n\t            }                                                                                                         // 109\n                                                                                                                       // 110\n\t            return utf16Chars.join('');                                                                               // 111\n\t        },                                                                                                            // 112\n                                                                                                                       // 113\n\t        /**                                                                                                           // 114\n\t         * Converts a UTF-16 LE string to a word array.                                                               // 115\n\t         *                                                                                                            // 116\n\t         * @param {string} utf16Str The UTF-16 LE string.                                                             // 117\n\t         *                                                                                                            // 118\n\t         * @return {WordArray} The word array.                                                                        // 119\n\t         *                                                                                                            // 120\n\t         * @static                                                                                                    // 121\n\t         *                                                                                                            // 122\n\t         * @example                                                                                                   // 123\n\t         *                                                                                                            // 124\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);                                                  // 125\n\t         */                                                                                                           // 126\n\t        parse: function (utf16Str) {                                                                                  // 127\n\t            // Shortcut                                                                                               // 128\n\t            var utf16StrLength = utf16Str.length;                                                                     // 129\n                                                                                                                       // 130\n\t            // Convert                                                                                                // 131\n\t            var words = [];                                                                                           // 132\n\t            for (var i = 0; i < utf16StrLength; i++) {                                                                // 133\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));                          // 134\n\t            }                                                                                                         // 135\n                                                                                                                       // 136\n\t            return WordArray.create(words, utf16StrLength * 2);                                                       // 137\n\t        }                                                                                                             // 138\n\t    };                                                                                                                // 139\n                                                                                                                       // 140\n\t    function swapEndian(word) {                                                                                       // 141\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);                                              // 142\n\t    }                                                                                                                 // 143\n\t}());                                                                                                                 // 144\n                                                                                                                       // 145\n                                                                                                                       // 146\n\treturn CryptoJS.enc.Utf16;                                                                                            // 147\n                                                                                                                       // 148\n}));                                                                                                                   // 149\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"enc-base64.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/enc-base64.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var C_enc = C.enc;                                                                                                // 21\n                                                                                                                       // 22\n\t    /**                                                                                                               // 23\n\t     * Base64 encoding strategy.                                                                                      // 24\n\t     */                                                                                                               // 25\n\t    var Base64 = C_enc.Base64 = {                                                                                     // 26\n\t        /**                                                                                                           // 27\n\t         * Converts a word array to a Base64 string.                                                                  // 28\n\t         *                                                                                                            // 29\n\t         * @param {WordArray} wordArray The word array.                                                               // 30\n\t         *                                                                                                            // 31\n\t         * @return {string} The Base64 string.                                                                        // 32\n\t         *                                                                                                            // 33\n\t         * @static                                                                                                    // 34\n\t         *                                                                                                            // 35\n\t         * @example                                                                                                   // 36\n\t         *                                                                                                            // 37\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);                                           // 38\n\t         */                                                                                                           // 39\n\t        stringify: function (wordArray) {                                                                             // 40\n\t            // Shortcuts                                                                                              // 41\n\t            var words = wordArray.words;                                                                              // 42\n\t            var sigBytes = wordArray.sigBytes;                                                                        // 43\n\t            var map = this._map;                                                                                      // 44\n                                                                                                                       // 45\n\t            // Clamp excess bits                                                                                      // 46\n\t            wordArray.clamp();                                                                                        // 47\n                                                                                                                       // 48\n\t            // Convert                                                                                                // 49\n\t            var base64Chars = [];                                                                                     // 50\n\t            for (var i = 0; i < sigBytes; i += 3) {                                                                   // 51\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;                               // 52\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;                               // 53\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;                               // 54\n                                                                                                                       // 55\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;                                                   // 56\n                                                                                                                       // 57\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {                                          // 58\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));                                 // 59\n\t                }                                                                                                     // 60\n\t            }                                                                                                         // 61\n                                                                                                                       // 62\n\t            // Add padding                                                                                            // 63\n\t            var paddingChar = map.charAt(64);                                                                         // 64\n\t            if (paddingChar) {                                                                                        // 65\n\t                while (base64Chars.length % 4) {                                                                      // 66\n\t                    base64Chars.push(paddingChar);                                                                    // 67\n\t                }                                                                                                     // 68\n\t            }                                                                                                         // 69\n                                                                                                                       // 70\n\t            return base64Chars.join('');                                                                              // 71\n\t        },                                                                                                            // 72\n                                                                                                                       // 73\n\t        /**                                                                                                           // 74\n\t         * Converts a Base64 string to a word array.                                                                  // 75\n\t         *                                                                                                            // 76\n\t         * @param {string} base64Str The Base64 string.                                                               // 77\n\t         *                                                                                                            // 78\n\t         * @return {WordArray} The word array.                                                                        // 79\n\t         *                                                                                                            // 80\n\t         * @static                                                                                                    // 81\n\t         *                                                                                                            // 82\n\t         * @example                                                                                                   // 83\n\t         *                                                                                                            // 84\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);                                               // 85\n\t         */                                                                                                           // 86\n\t        parse: function (base64Str) {                                                                                 // 87\n\t            // Shortcuts                                                                                              // 88\n\t            var base64StrLength = base64Str.length;                                                                   // 89\n\t            var map = this._map;                                                                                      // 90\n\t            var reverseMap = this._reverseMap;                                                                        // 91\n                                                                                                                       // 92\n\t            if (!reverseMap) {                                                                                        // 93\n\t                    reverseMap = this._reverseMap = [];                                                               // 94\n\t                    for (var j = 0; j < map.length; j++) {                                                            // 95\n\t                        reverseMap[map.charCodeAt(j)] = j;                                                            // 96\n\t                    }                                                                                                 // 97\n\t            }                                                                                                         // 98\n                                                                                                                       // 99\n\t            // Ignore padding                                                                                         // 100\n\t            var paddingChar = map.charAt(64);                                                                         // 101\n\t            if (paddingChar) {                                                                                        // 102\n\t                var paddingIndex = base64Str.indexOf(paddingChar);                                                    // 103\n\t                if (paddingIndex !== -1) {                                                                            // 104\n\t                    base64StrLength = paddingIndex;                                                                   // 105\n\t                }                                                                                                     // 106\n\t            }                                                                                                         // 107\n                                                                                                                       // 108\n\t            // Convert                                                                                                // 109\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);                                                 // 110\n                                                                                                                       // 111\n\t        },                                                                                                            // 112\n                                                                                                                       // 113\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='                                     // 114\n\t    };                                                                                                                // 115\n                                                                                                                       // 116\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {                                                      // 117\n\t      var words = [];                                                                                                 // 118\n\t      var nBytes = 0;                                                                                                 // 119\n\t      for (var i = 0; i < base64StrLength; i++) {                                                                     // 120\n\t          if (i % 4) {                                                                                                // 121\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);                                   // 122\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);                                  // 123\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);                                      // 124\n\t              nBytes++;                                                                                               // 125\n\t          }                                                                                                           // 126\n\t      }                                                                                                               // 127\n\t      return WordArray.create(words, nBytes);                                                                         // 128\n\t    }                                                                                                                 // 129\n\t}());                                                                                                                 // 130\n                                                                                                                       // 131\n                                                                                                                       // 132\n\treturn CryptoJS.enc.Base64;                                                                                           // 133\n                                                                                                                       // 134\n}));                                                                                                                   // 135\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"md5.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/md5.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function (Math) {                                                                                                    // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var Hasher = C_lib.Hasher;                                                                                        // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n                                                                                                                       // 23\n\t    // Constants table                                                                                                // 24\n\t    var T = [];                                                                                                       // 25\n                                                                                                                       // 26\n\t    // Compute constants                                                                                              // 27\n\t    (function () {                                                                                                    // 28\n\t        for (var i = 0; i < 64; i++) {                                                                                // 29\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;                                                     // 30\n\t        }                                                                                                             // 31\n\t    }());                                                                                                             // 32\n                                                                                                                       // 33\n\t    /**                                                                                                               // 34\n\t     * MD5 hash algorithm.                                                                                            // 35\n\t     */                                                                                                               // 36\n\t    var MD5 = C_algo.MD5 = Hasher.extend({                                                                            // 37\n\t        _doReset: function () {                                                                                       // 38\n\t            this._hash = new WordArray.init([                                                                         // 39\n\t                0x67452301, 0xefcdab89,                                                                               // 40\n\t                0x98badcfe, 0x10325476                                                                                // 41\n\t            ]);                                                                                                       // 42\n\t        },                                                                                                            // 43\n                                                                                                                       // 44\n\t        _doProcessBlock: function (M, offset) {                                                                       // 45\n\t            // Swap endian                                                                                            // 46\n\t            for (var i = 0; i < 16; i++) {                                                                            // 47\n\t                // Shortcuts                                                                                          // 48\n\t                var offset_i = offset + i;                                                                            // 49\n\t                var M_offset_i = M[offset_i];                                                                         // 50\n                                                                                                                       // 51\n\t                M[offset_i] = (                                                                                       // 52\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 53\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 54\n\t                );                                                                                                    // 55\n\t            }                                                                                                         // 56\n                                                                                                                       // 57\n\t            // Shortcuts                                                                                              // 58\n\t            var H = this._hash.words;                                                                                 // 59\n                                                                                                                       // 60\n\t            var M_offset_0  = M[offset + 0];                                                                          // 61\n\t            var M_offset_1  = M[offset + 1];                                                                          // 62\n\t            var M_offset_2  = M[offset + 2];                                                                          // 63\n\t            var M_offset_3  = M[offset + 3];                                                                          // 64\n\t            var M_offset_4  = M[offset + 4];                                                                          // 65\n\t            var M_offset_5  = M[offset + 5];                                                                          // 66\n\t            var M_offset_6  = M[offset + 6];                                                                          // 67\n\t            var M_offset_7  = M[offset + 7];                                                                          // 68\n\t            var M_offset_8  = M[offset + 8];                                                                          // 69\n\t            var M_offset_9  = M[offset + 9];                                                                          // 70\n\t            var M_offset_10 = M[offset + 10];                                                                         // 71\n\t            var M_offset_11 = M[offset + 11];                                                                         // 72\n\t            var M_offset_12 = M[offset + 12];                                                                         // 73\n\t            var M_offset_13 = M[offset + 13];                                                                         // 74\n\t            var M_offset_14 = M[offset + 14];                                                                         // 75\n\t            var M_offset_15 = M[offset + 15];                                                                         // 76\n                                                                                                                       // 77\n\t            // Working varialbes                                                                                      // 78\n\t            var a = H[0];                                                                                             // 79\n\t            var b = H[1];                                                                                             // 80\n\t            var c = H[2];                                                                                             // 81\n\t            var d = H[3];                                                                                             // 82\n                                                                                                                       // 83\n\t            // Computation                                                                                            // 84\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);                                                                // 85\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);                                                                // 86\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);                                                                // 87\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);                                                                // 88\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);                                                                // 89\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);                                                                // 90\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);                                                                // 91\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);                                                                // 92\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);                                                                // 93\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);                                                                // 94\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);                                                               // 95\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);                                                               // 96\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);                                                               // 97\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);                                                               // 98\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);                                                               // 99\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);                                                               // 100\n                                                                                                                       // 101\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);                                                               // 102\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);                                                               // 103\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);                                                               // 104\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);                                                               // 105\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);                                                               // 106\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);                                                               // 107\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);                                                               // 108\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);                                                               // 109\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);                                                               // 110\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);                                                               // 111\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);                                                               // 112\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);                                                               // 113\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);                                                               // 114\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);                                                               // 115\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);                                                               // 116\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);                                                               // 117\n                                                                                                                       // 118\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);                                                               // 119\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);                                                               // 120\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);                                                               // 121\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);                                                               // 122\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);                                                               // 123\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);                                                               // 124\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);                                                               // 125\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);                                                               // 126\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);                                                               // 127\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);                                                               // 128\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);                                                               // 129\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);                                                               // 130\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);                                                               // 131\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);                                                               // 132\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);                                                               // 133\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);                                                               // 134\n                                                                                                                       // 135\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);                                                               // 136\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);                                                               // 137\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);                                                               // 138\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);                                                               // 139\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);                                                               // 140\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);                                                               // 141\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);                                                               // 142\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);                                                               // 143\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);                                                               // 144\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);                                                               // 145\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);                                                               // 146\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);                                                               // 147\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);                                                               // 148\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);                                                               // 149\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);                                                               // 150\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);                                                               // 151\n                                                                                                                       // 152\n\t            // Intermediate hash value                                                                                // 153\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 154\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 155\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 156\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 157\n\t        },                                                                                                            // 158\n                                                                                                                       // 159\n\t        _doFinalize: function () {                                                                                    // 160\n\t            // Shortcuts                                                                                              // 161\n\t            var data = this._data;                                                                                    // 162\n\t            var dataWords = data.words;                                                                               // 163\n                                                                                                                       // 164\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 165\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 166\n                                                                                                                       // 167\n\t            // Add padding                                                                                            // 168\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 169\n                                                                                                                       // 170\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);                                                   // 171\n\t            var nBitsTotalL = nBitsTotal;                                                                             // 172\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (                                                       // 173\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |                                         // 174\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)                                           // 175\n\t            );                                                                                                        // 176\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 177\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |                                         // 178\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)                                           // 179\n\t            );                                                                                                        // 180\n                                                                                                                       // 181\n\t            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 182\n                                                                                                                       // 183\n\t            // Hash final blocks                                                                                      // 184\n\t            this._process();                                                                                          // 185\n                                                                                                                       // 186\n\t            // Shortcuts                                                                                              // 187\n\t            var hash = this._hash;                                                                                    // 188\n\t            var H = hash.words;                                                                                       // 189\n                                                                                                                       // 190\n\t            // Swap endian                                                                                            // 191\n\t            for (var i = 0; i < 4; i++) {                                                                             // 192\n\t                // Shortcut                                                                                           // 193\n\t                var H_i = H[i];                                                                                       // 194\n                                                                                                                       // 195\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 196\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 197\n\t            }                                                                                                         // 198\n                                                                                                                       // 199\n\t            // Return final computed hash                                                                             // 200\n\t            return hash;                                                                                              // 201\n\t        },                                                                                                            // 202\n                                                                                                                       // 203\n\t        clone: function () {                                                                                          // 204\n\t            var clone = Hasher.clone.call(this);                                                                      // 205\n\t            clone._hash = this._hash.clone();                                                                         // 206\n                                                                                                                       // 207\n\t            return clone;                                                                                             // 208\n\t        }                                                                                                             // 209\n\t    });                                                                                                               // 210\n                                                                                                                       // 211\n\t    function FF(a, b, c, d, x, s, t) {                                                                                // 212\n\t        var n = a + ((b & c) | (~b & d)) + x + t;                                                                     // 213\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 214\n\t    }                                                                                                                 // 215\n                                                                                                                       // 216\n\t    function GG(a, b, c, d, x, s, t) {                                                                                // 217\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;                                                                     // 218\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 219\n\t    }                                                                                                                 // 220\n                                                                                                                       // 221\n\t    function HH(a, b, c, d, x, s, t) {                                                                                // 222\n\t        var n = a + (b ^ c ^ d) + x + t;                                                                              // 223\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 224\n\t    }                                                                                                                 // 225\n                                                                                                                       // 226\n\t    function II(a, b, c, d, x, s, t) {                                                                                // 227\n\t        var n = a + (c ^ (b | ~d)) + x + t;                                                                           // 228\n\t        return ((n << s) | (n >>> (32 - s))) + b;                                                                     // 229\n\t    }                                                                                                                 // 230\n                                                                                                                       // 231\n\t    /**                                                                                                               // 232\n\t     * Shortcut function to the hasher's object interface.                                                            // 233\n\t     *                                                                                                                // 234\n\t     * @param {WordArray|string} message The message to hash.                                                         // 235\n\t     *                                                                                                                // 236\n\t     * @return {WordArray} The hash.                                                                                  // 237\n\t     *                                                                                                                // 238\n\t     * @static                                                                                                        // 239\n\t     *                                                                                                                // 240\n\t     * @example                                                                                                       // 241\n\t     *                                                                                                                // 242\n\t     *     var hash = CryptoJS.MD5('message');                                                                        // 243\n\t     *     var hash = CryptoJS.MD5(wordArray);                                                                        // 244\n\t     */                                                                                                               // 245\n\t    C.MD5 = Hasher._createHelper(MD5);                                                                                // 246\n                                                                                                                       // 247\n\t    /**                                                                                                               // 248\n\t     * Shortcut function to the HMAC's object interface.                                                              // 249\n\t     *                                                                                                                // 250\n\t     * @param {WordArray|string} message The message to hash.                                                         // 251\n\t     * @param {WordArray|string} key The secret key.                                                                  // 252\n\t     *                                                                                                                // 253\n\t     * @return {WordArray} The HMAC.                                                                                  // 254\n\t     *                                                                                                                // 255\n\t     * @static                                                                                                        // 256\n\t     *                                                                                                                // 257\n\t     * @example                                                                                                       // 258\n\t     *                                                                                                                // 259\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);                                                                 // 260\n\t     */                                                                                                               // 261\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);                                                                        // 262\n\t}(Math));                                                                                                             // 263\n                                                                                                                       // 264\n                                                                                                                       // 265\n\treturn CryptoJS.MD5;                                                                                                  // 266\n                                                                                                                       // 267\n}));                                                                                                                   // 268\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha1.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha1.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var Hasher = C_lib.Hasher;                                                                                        // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n                                                                                                                       // 23\n\t    // Reusable object                                                                                                // 24\n\t    var W = [];                                                                                                       // 25\n                                                                                                                       // 26\n\t    /**                                                                                                               // 27\n\t     * SHA-1 hash algorithm.                                                                                          // 28\n\t     */                                                                                                               // 29\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({                                                                          // 30\n\t        _doReset: function () {                                                                                       // 31\n\t            this._hash = new WordArray.init([                                                                         // 32\n\t                0x67452301, 0xefcdab89,                                                                               // 33\n\t                0x98badcfe, 0x10325476,                                                                               // 34\n\t                0xc3d2e1f0                                                                                            // 35\n\t            ]);                                                                                                       // 36\n\t        },                                                                                                            // 37\n                                                                                                                       // 38\n\t        _doProcessBlock: function (M, offset) {                                                                       // 39\n\t            // Shortcut                                                                                               // 40\n\t            var H = this._hash.words;                                                                                 // 41\n                                                                                                                       // 42\n\t            // Working variables                                                                                      // 43\n\t            var a = H[0];                                                                                             // 44\n\t            var b = H[1];                                                                                             // 45\n\t            var c = H[2];                                                                                             // 46\n\t            var d = H[3];                                                                                             // 47\n\t            var e = H[4];                                                                                             // 48\n                                                                                                                       // 49\n\t            // Computation                                                                                            // 50\n\t            for (var i = 0; i < 80; i++) {                                                                            // 51\n\t                if (i < 16) {                                                                                         // 52\n\t                    W[i] = M[offset + i] | 0;                                                                         // 53\n\t                } else {                                                                                              // 54\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];                                              // 55\n\t                    W[i] = (n << 1) | (n >>> 31);                                                                     // 56\n\t                }                                                                                                     // 57\n                                                                                                                       // 58\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];                                                           // 59\n\t                if (i < 20) {                                                                                         // 60\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;                                                           // 61\n\t                } else if (i < 40) {                                                                                  // 62\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;                                                                    // 63\n\t                } else if (i < 60) {                                                                                  // 64\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;                                                  // 65\n\t                } else /* if (i < 80) */ {                                                                            // 66\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;                                                                    // 67\n\t                }                                                                                                     // 68\n                                                                                                                       // 69\n\t                e = d;                                                                                                // 70\n\t                d = c;                                                                                                // 71\n\t                c = (b << 30) | (b >>> 2);                                                                            // 72\n\t                b = a;                                                                                                // 73\n\t                a = t;                                                                                                // 74\n\t            }                                                                                                         // 75\n                                                                                                                       // 76\n\t            // Intermediate hash value                                                                                // 77\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 78\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 79\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 80\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 81\n\t            H[4] = (H[4] + e) | 0;                                                                                    // 82\n\t        },                                                                                                            // 83\n                                                                                                                       // 84\n\t        _doFinalize: function () {                                                                                    // 85\n\t            // Shortcuts                                                                                              // 86\n\t            var data = this._data;                                                                                    // 87\n\t            var dataWords = data.words;                                                                               // 88\n                                                                                                                       // 89\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 90\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 91\n                                                                                                                       // 92\n\t            // Add padding                                                                                            // 93\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 94\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 95\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 96\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 97\n                                                                                                                       // 98\n\t            // Hash final blocks                                                                                      // 99\n\t            this._process();                                                                                          // 100\n                                                                                                                       // 101\n\t            // Return final computed hash                                                                             // 102\n\t            return this._hash;                                                                                        // 103\n\t        },                                                                                                            // 104\n                                                                                                                       // 105\n\t        clone: function () {                                                                                          // 106\n\t            var clone = Hasher.clone.call(this);                                                                      // 107\n\t            clone._hash = this._hash.clone();                                                                         // 108\n                                                                                                                       // 109\n\t            return clone;                                                                                             // 110\n\t        }                                                                                                             // 111\n\t    });                                                                                                               // 112\n                                                                                                                       // 113\n\t    /**                                                                                                               // 114\n\t     * Shortcut function to the hasher's object interface.                                                            // 115\n\t     *                                                                                                                // 116\n\t     * @param {WordArray|string} message The message to hash.                                                         // 117\n\t     *                                                                                                                // 118\n\t     * @return {WordArray} The hash.                                                                                  // 119\n\t     *                                                                                                                // 120\n\t     * @static                                                                                                        // 121\n\t     *                                                                                                                // 122\n\t     * @example                                                                                                       // 123\n\t     *                                                                                                                // 124\n\t     *     var hash = CryptoJS.SHA1('message');                                                                       // 125\n\t     *     var hash = CryptoJS.SHA1(wordArray);                                                                       // 126\n\t     */                                                                                                               // 127\n\t    C.SHA1 = Hasher._createHelper(SHA1);                                                                              // 128\n                                                                                                                       // 129\n\t    /**                                                                                                               // 130\n\t     * Shortcut function to the HMAC's object interface.                                                              // 131\n\t     *                                                                                                                // 132\n\t     * @param {WordArray|string} message The message to hash.                                                         // 133\n\t     * @param {WordArray|string} key The secret key.                                                                  // 134\n\t     *                                                                                                                // 135\n\t     * @return {WordArray} The HMAC.                                                                                  // 136\n\t     *                                                                                                                // 137\n\t     * @static                                                                                                        // 138\n\t     *                                                                                                                // 139\n\t     * @example                                                                                                       // 140\n\t     *                                                                                                                // 141\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);                                                                // 142\n\t     */                                                                                                               // 143\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);                                                                      // 144\n\t}());                                                                                                                 // 145\n                                                                                                                       // 146\n                                                                                                                       // 147\n\treturn CryptoJS.SHA1;                                                                                                 // 148\n                                                                                                                       // 149\n}));                                                                                                                   // 150\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha256.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha256.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function (Math) {                                                                                                    // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var Hasher = C_lib.Hasher;                                                                                        // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n                                                                                                                       // 23\n\t    // Initialization and round constants tables                                                                      // 24\n\t    var H = [];                                                                                                       // 25\n\t    var K = [];                                                                                                       // 26\n                                                                                                                       // 27\n\t    // Compute constants                                                                                              // 28\n\t    (function () {                                                                                                    // 29\n\t        function isPrime(n) {                                                                                         // 30\n\t            var sqrtN = Math.sqrt(n);                                                                                 // 31\n\t            for (var factor = 2; factor <= sqrtN; factor++) {                                                         // 32\n\t                if (!(n % factor)) {                                                                                  // 33\n\t                    return false;                                                                                     // 34\n\t                }                                                                                                     // 35\n\t            }                                                                                                         // 36\n                                                                                                                       // 37\n\t            return true;                                                                                              // 38\n\t        }                                                                                                             // 39\n                                                                                                                       // 40\n\t        function getFractionalBits(n) {                                                                               // 41\n\t            return ((n - (n | 0)) * 0x100000000) | 0;                                                                 // 42\n\t        }                                                                                                             // 43\n                                                                                                                       // 44\n\t        var n = 2;                                                                                                    // 45\n\t        var nPrime = 0;                                                                                               // 46\n\t        while (nPrime < 64) {                                                                                         // 47\n\t            if (isPrime(n)) {                                                                                         // 48\n\t                if (nPrime < 8) {                                                                                     // 49\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));                                                // 50\n\t                }                                                                                                     // 51\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));                                                    // 52\n                                                                                                                       // 53\n\t                nPrime++;                                                                                             // 54\n\t            }                                                                                                         // 55\n                                                                                                                       // 56\n\t            n++;                                                                                                      // 57\n\t        }                                                                                                             // 58\n\t    }());                                                                                                             // 59\n                                                                                                                       // 60\n\t    // Reusable object                                                                                                // 61\n\t    var W = [];                                                                                                       // 62\n                                                                                                                       // 63\n\t    /**                                                                                                               // 64\n\t     * SHA-256 hash algorithm.                                                                                        // 65\n\t     */                                                                                                               // 66\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({                                                                      // 67\n\t        _doReset: function () {                                                                                       // 68\n\t            this._hash = new WordArray.init(H.slice(0));                                                              // 69\n\t        },                                                                                                            // 70\n                                                                                                                       // 71\n\t        _doProcessBlock: function (M, offset) {                                                                       // 72\n\t            // Shortcut                                                                                               // 73\n\t            var H = this._hash.words;                                                                                 // 74\n                                                                                                                       // 75\n\t            // Working variables                                                                                      // 76\n\t            var a = H[0];                                                                                             // 77\n\t            var b = H[1];                                                                                             // 78\n\t            var c = H[2];                                                                                             // 79\n\t            var d = H[3];                                                                                             // 80\n\t            var e = H[4];                                                                                             // 81\n\t            var f = H[5];                                                                                             // 82\n\t            var g = H[6];                                                                                             // 83\n\t            var h = H[7];                                                                                             // 84\n                                                                                                                       // 85\n\t            // Computation                                                                                            // 86\n\t            for (var i = 0; i < 64; i++) {                                                                            // 87\n\t                if (i < 16) {                                                                                         // 88\n\t                    W[i] = M[offset + i] | 0;                                                                         // 89\n\t                } else {                                                                                              // 90\n\t                    var gamma0x = W[i - 15];                                                                          // 91\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^                                              // 92\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^                                              // 93\n\t                                   (gamma0x >>> 3);                                                                   // 94\n                                                                                                                       // 95\n\t                    var gamma1x = W[i - 2];                                                                           // 96\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^                                              // 97\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^                                              // 98\n\t                                   (gamma1x >>> 10);                                                                  // 99\n                                                                                                                       // 100\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];                                                    // 101\n\t                }                                                                                                     // 102\n                                                                                                                       // 103\n\t                var ch  = (e & f) ^ (~e & g);                                                                         // 104\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);                                                                // 105\n                                                                                                                       // 106\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));           // 107\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));           // 108\n                                                                                                                       // 109\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];                                                               // 110\n\t                var t2 = sigma0 + maj;                                                                                // 111\n                                                                                                                       // 112\n\t                h = g;                                                                                                // 113\n\t                g = f;                                                                                                // 114\n\t                f = e;                                                                                                // 115\n\t                e = (d + t1) | 0;                                                                                     // 116\n\t                d = c;                                                                                                // 117\n\t                c = b;                                                                                                // 118\n\t                b = a;                                                                                                // 119\n\t                a = (t1 + t2) | 0;                                                                                    // 120\n\t            }                                                                                                         // 121\n                                                                                                                       // 122\n\t            // Intermediate hash value                                                                                // 123\n\t            H[0] = (H[0] + a) | 0;                                                                                    // 124\n\t            H[1] = (H[1] + b) | 0;                                                                                    // 125\n\t            H[2] = (H[2] + c) | 0;                                                                                    // 126\n\t            H[3] = (H[3] + d) | 0;                                                                                    // 127\n\t            H[4] = (H[4] + e) | 0;                                                                                    // 128\n\t            H[5] = (H[5] + f) | 0;                                                                                    // 129\n\t            H[6] = (H[6] + g) | 0;                                                                                    // 130\n\t            H[7] = (H[7] + h) | 0;                                                                                    // 131\n\t        },                                                                                                            // 132\n                                                                                                                       // 133\n\t        _doFinalize: function () {                                                                                    // 134\n\t            // Shortcuts                                                                                              // 135\n\t            var data = this._data;                                                                                    // 136\n\t            var dataWords = data.words;                                                                               // 137\n                                                                                                                       // 138\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 139\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 140\n                                                                                                                       // 141\n\t            // Add padding                                                                                            // 142\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 143\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);                   // 144\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;                                             // 145\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 146\n                                                                                                                       // 147\n\t            // Hash final blocks                                                                                      // 148\n\t            this._process();                                                                                          // 149\n                                                                                                                       // 150\n\t            // Return final computed hash                                                                             // 151\n\t            return this._hash;                                                                                        // 152\n\t        },                                                                                                            // 153\n                                                                                                                       // 154\n\t        clone: function () {                                                                                          // 155\n\t            var clone = Hasher.clone.call(this);                                                                      // 156\n\t            clone._hash = this._hash.clone();                                                                         // 157\n                                                                                                                       // 158\n\t            return clone;                                                                                             // 159\n\t        }                                                                                                             // 160\n\t    });                                                                                                               // 161\n                                                                                                                       // 162\n\t    /**                                                                                                               // 163\n\t     * Shortcut function to the hasher's object interface.                                                            // 164\n\t     *                                                                                                                // 165\n\t     * @param {WordArray|string} message The message to hash.                                                         // 166\n\t     *                                                                                                                // 167\n\t     * @return {WordArray} The hash.                                                                                  // 168\n\t     *                                                                                                                // 169\n\t     * @static                                                                                                        // 170\n\t     *                                                                                                                // 171\n\t     * @example                                                                                                       // 172\n\t     *                                                                                                                // 173\n\t     *     var hash = CryptoJS.SHA256('message');                                                                     // 174\n\t     *     var hash = CryptoJS.SHA256(wordArray);                                                                     // 175\n\t     */                                                                                                               // 176\n\t    C.SHA256 = Hasher._createHelper(SHA256);                                                                          // 177\n                                                                                                                       // 178\n\t    /**                                                                                                               // 179\n\t     * Shortcut function to the HMAC's object interface.                                                              // 180\n\t     *                                                                                                                // 181\n\t     * @param {WordArray|string} message The message to hash.                                                         // 182\n\t     * @param {WordArray|string} key The secret key.                                                                  // 183\n\t     *                                                                                                                // 184\n\t     * @return {WordArray} The HMAC.                                                                                  // 185\n\t     *                                                                                                                // 186\n\t     * @static                                                                                                        // 187\n\t     *                                                                                                                // 188\n\t     * @example                                                                                                       // 189\n\t     *                                                                                                                // 190\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);                                                              // 191\n\t     */                                                                                                               // 192\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);                                                                  // 193\n\t}(Math));                                                                                                             // 194\n                                                                                                                       // 195\n                                                                                                                       // 196\n\treturn CryptoJS.SHA256;                                                                                               // 197\n                                                                                                                       // 198\n}));                                                                                                                   // 199\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha224.js\":[\"./core\",\"./sha256\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha224.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));                                          // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./sha256\"], factory);                                                                             // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var C_algo = C.algo;                                                                                              // 21\n\t    var SHA256 = C_algo.SHA256;                                                                                       // 22\n                                                                                                                       // 23\n\t    /**                                                                                                               // 24\n\t     * SHA-224 hash algorithm.                                                                                        // 25\n\t     */                                                                                                               // 26\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({                                                                      // 27\n\t        _doReset: function () {                                                                                       // 28\n\t            this._hash = new WordArray.init([                                                                         // 29\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,                                                       // 30\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4                                                        // 31\n\t            ]);                                                                                                       // 32\n\t        },                                                                                                            // 33\n                                                                                                                       // 34\n\t        _doFinalize: function () {                                                                                    // 35\n\t            var hash = SHA256._doFinalize.call(this);                                                                 // 36\n                                                                                                                       // 37\n\t            hash.sigBytes -= 4;                                                                                       // 38\n                                                                                                                       // 39\n\t            return hash;                                                                                              // 40\n\t        }                                                                                                             // 41\n\t    });                                                                                                               // 42\n                                                                                                                       // 43\n\t    /**                                                                                                               // 44\n\t     * Shortcut function to the hasher's object interface.                                                            // 45\n\t     *                                                                                                                // 46\n\t     * @param {WordArray|string} message The message to hash.                                                         // 47\n\t     *                                                                                                                // 48\n\t     * @return {WordArray} The hash.                                                                                  // 49\n\t     *                                                                                                                // 50\n\t     * @static                                                                                                        // 51\n\t     *                                                                                                                // 52\n\t     * @example                                                                                                       // 53\n\t     *                                                                                                                // 54\n\t     *     var hash = CryptoJS.SHA224('message');                                                                     // 55\n\t     *     var hash = CryptoJS.SHA224(wordArray);                                                                     // 56\n\t     */                                                                                                               // 57\n\t    C.SHA224 = SHA256._createHelper(SHA224);                                                                          // 58\n                                                                                                                       // 59\n\t    /**                                                                                                               // 60\n\t     * Shortcut function to the HMAC's object interface.                                                              // 61\n\t     *                                                                                                                // 62\n\t     * @param {WordArray|string} message The message to hash.                                                         // 63\n\t     * @param {WordArray|string} key The secret key.                                                                  // 64\n\t     *                                                                                                                // 65\n\t     * @return {WordArray} The HMAC.                                                                                  // 66\n\t     *                                                                                                                // 67\n\t     * @static                                                                                                        // 68\n\t     *                                                                                                                // 69\n\t     * @example                                                                                                       // 70\n\t     *                                                                                                                // 71\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);                                                              // 72\n\t     */                                                                                                               // 73\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);                                                                  // 74\n\t}());                                                                                                                 // 75\n                                                                                                                       // 76\n                                                                                                                       // 77\n\treturn CryptoJS.SHA224;                                                                                               // 78\n                                                                                                                       // 79\n}));                                                                                                                   // 80\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha512.js\":[\"./core\",\"./x64-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha512.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));                                        // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./x64-core\"], factory);                                                                           // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var Hasher = C_lib.Hasher;                                                                                        // 20\n\t    var C_x64 = C.x64;                                                                                                // 21\n\t    var X64Word = C_x64.Word;                                                                                         // 22\n\t    var X64WordArray = C_x64.WordArray;                                                                               // 23\n\t    var C_algo = C.algo;                                                                                              // 24\n                                                                                                                       // 25\n\t    function X64Word_create() {                                                                                       // 26\n\t        return X64Word.create.apply(X64Word, arguments);                                                              // 27\n\t    }                                                                                                                 // 28\n                                                                                                                       // 29\n\t    // Constants                                                                                                      // 30\n\t    var K = [                                                                                                         // 31\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),                               // 32\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),                               // 33\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),                               // 34\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),                               // 35\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),                               // 36\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),                               // 37\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),                               // 38\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),                               // 39\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),                               // 40\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),                               // 41\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),                               // 42\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),                               // 43\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),                               // 44\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),                               // 45\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),                               // 46\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),                               // 47\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),                               // 48\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),                               // 49\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),                               // 50\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),                               // 51\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),                               // 52\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),                               // 53\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),                               // 54\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),                               // 55\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),                               // 56\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),                               // 57\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),                               // 58\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),                               // 59\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),                               // 60\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),                               // 61\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),                               // 62\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),                               // 63\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),                               // 64\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),                               // 65\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),                               // 66\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),                               // 67\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),                               // 68\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),                               // 69\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),                               // 70\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)                                // 71\n\t    ];                                                                                                                // 72\n                                                                                                                       // 73\n\t    // Reusable objects                                                                                               // 74\n\t    var W = [];                                                                                                       // 75\n\t    (function () {                                                                                                    // 76\n\t        for (var i = 0; i < 80; i++) {                                                                                // 77\n\t            W[i] = X64Word_create();                                                                                  // 78\n\t        }                                                                                                             // 79\n\t    }());                                                                                                             // 80\n                                                                                                                       // 81\n\t    /**                                                                                                               // 82\n\t     * SHA-512 hash algorithm.                                                                                        // 83\n\t     */                                                                                                               // 84\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({                                                                      // 85\n\t        _doReset: function () {                                                                                       // 86\n\t            this._hash = new X64WordArray.init([                                                                      // 87\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),                   // 88\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),                   // 89\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),                   // 90\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)                    // 91\n\t            ]);                                                                                                       // 92\n\t        },                                                                                                            // 93\n                                                                                                                       // 94\n\t        _doProcessBlock: function (M, offset) {                                                                       // 95\n\t            // Shortcuts                                                                                              // 96\n\t            var H = this._hash.words;                                                                                 // 97\n                                                                                                                       // 98\n\t            var H0 = H[0];                                                                                            // 99\n\t            var H1 = H[1];                                                                                            // 100\n\t            var H2 = H[2];                                                                                            // 101\n\t            var H3 = H[3];                                                                                            // 102\n\t            var H4 = H[4];                                                                                            // 103\n\t            var H5 = H[5];                                                                                            // 104\n\t            var H6 = H[6];                                                                                            // 105\n\t            var H7 = H[7];                                                                                            // 106\n                                                                                                                       // 107\n\t            var H0h = H0.high;                                                                                        // 108\n\t            var H0l = H0.low;                                                                                         // 109\n\t            var H1h = H1.high;                                                                                        // 110\n\t            var H1l = H1.low;                                                                                         // 111\n\t            var H2h = H2.high;                                                                                        // 112\n\t            var H2l = H2.low;                                                                                         // 113\n\t            var H3h = H3.high;                                                                                        // 114\n\t            var H3l = H3.low;                                                                                         // 115\n\t            var H4h = H4.high;                                                                                        // 116\n\t            var H4l = H4.low;                                                                                         // 117\n\t            var H5h = H5.high;                                                                                        // 118\n\t            var H5l = H5.low;                                                                                         // 119\n\t            var H6h = H6.high;                                                                                        // 120\n\t            var H6l = H6.low;                                                                                         // 121\n\t            var H7h = H7.high;                                                                                        // 122\n\t            var H7l = H7.low;                                                                                         // 123\n                                                                                                                       // 124\n\t            // Working variables                                                                                      // 125\n\t            var ah = H0h;                                                                                             // 126\n\t            var al = H0l;                                                                                             // 127\n\t            var bh = H1h;                                                                                             // 128\n\t            var bl = H1l;                                                                                             // 129\n\t            var ch = H2h;                                                                                             // 130\n\t            var cl = H2l;                                                                                             // 131\n\t            var dh = H3h;                                                                                             // 132\n\t            var dl = H3l;                                                                                             // 133\n\t            var eh = H4h;                                                                                             // 134\n\t            var el = H4l;                                                                                             // 135\n\t            var fh = H5h;                                                                                             // 136\n\t            var fl = H5l;                                                                                             // 137\n\t            var gh = H6h;                                                                                             // 138\n\t            var gl = H6l;                                                                                             // 139\n\t            var hh = H7h;                                                                                             // 140\n\t            var hl = H7l;                                                                                             // 141\n                                                                                                                       // 142\n\t            // Rounds                                                                                                 // 143\n\t            for (var i = 0; i < 80; i++) {                                                                            // 144\n\t                // Shortcut                                                                                           // 145\n\t                var Wi = W[i];                                                                                        // 146\n                                                                                                                       // 147\n\t                // Extend message                                                                                     // 148\n\t                if (i < 16) {                                                                                         // 149\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;                                                    // 150\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;                                                    // 151\n\t                } else {                                                                                              // 152\n\t                    // Gamma0                                                                                         // 153\n\t                    var gamma0x  = W[i - 15];                                                                         // 154\n\t                    var gamma0xh = gamma0x.high;                                                                      // 155\n\t                    var gamma0xl = gamma0x.low;                                                                       // 156\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n                                                                                                                       // 159\n\t                    // Gamma1                                                                                         // 160\n\t                    var gamma1x  = W[i - 2];                                                                          // 161\n\t                    var gamma1xh = gamma1x.high;                                                                      // 162\n\t                    var gamma1xl = gamma1x.low;                                                                       // 163\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n                                                                                                                       // 166\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]                                                  // 167\n\t                    var Wi7  = W[i - 7];                                                                              // 168\n\t                    var Wi7h = Wi7.high;                                                                              // 169\n\t                    var Wi7l = Wi7.low;                                                                               // 170\n                                                                                                                       // 171\n\t                    var Wi16  = W[i - 16];                                                                            // 172\n\t                    var Wi16h = Wi16.high;                                                                            // 173\n\t                    var Wi16l = Wi16.low;                                                                             // 174\n                                                                                                                       // 175\n\t                    var Wil = gamma0l + Wi7l;                                                                         // 176\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);                               // 177\n\t                    var Wil = Wil + gamma1l;                                                                          // 178\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);                                // 179\n\t                    var Wil = Wil + Wi16l;                                                                            // 180\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);                                    // 181\n                                                                                                                       // 182\n\t                    Wi.high = Wih;                                                                                    // 183\n\t                    Wi.low  = Wil;                                                                                    // 184\n\t                }                                                                                                     // 185\n                                                                                                                       // 186\n\t                var chh  = (eh & fh) ^ (~eh & gh);                                                                    // 187\n\t                var chl  = (el & fl) ^ (~el & gl);                                                                    // 188\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);                                                         // 189\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);                                                         // 190\n                                                                                                                       // 191\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));    // 192\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));    // 193\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));    // 194\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));    // 195\n                                                                                                                       // 196\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]                                                                 // 197\n\t                var Ki  = K[i];                                                                                       // 198\n\t                var Kih = Ki.high;                                                                                    // 199\n\t                var Kil = Ki.low;                                                                                     // 200\n                                                                                                                       // 201\n\t                var t1l = hl + sigma1l;                                                                               // 202\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);                                          // 203\n\t                var t1l = t1l + chl;                                                                                  // 204\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);                                            // 205\n\t                var t1l = t1l + Kil;                                                                                  // 206\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);                                            // 207\n\t                var t1l = t1l + Wil;                                                                                  // 208\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);                                            // 209\n                                                                                                                       // 210\n\t                // t2 = sigma0 + maj                                                                                  // 211\n\t                var t2l = sigma0l + majl;                                                                             // 212\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);                                   // 213\n                                                                                                                       // 214\n\t                // Update working variables                                                                           // 215\n\t                hh = gh;                                                                                              // 216\n\t                hl = gl;                                                                                              // 217\n\t                gh = fh;                                                                                              // 218\n\t                gl = fl;                                                                                              // 219\n\t                fh = eh;                                                                                              // 220\n\t                fl = el;                                                                                              // 221\n\t                el = (dl + t1l) | 0;                                                                                  // 222\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;                                              // 223\n\t                dh = ch;                                                                                              // 224\n\t                dl = cl;                                                                                              // 225\n\t                ch = bh;                                                                                              // 226\n\t                cl = bl;                                                                                              // 227\n\t                bh = ah;                                                                                              // 228\n\t                bl = al;                                                                                              // 229\n\t                al = (t1l + t2l) | 0;                                                                                 // 230\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;                                            // 231\n\t            }                                                                                                         // 232\n                                                                                                                       // 233\n\t            // Intermediate hash value                                                                                // 234\n\t            H0l = H0.low  = (H0l + al);                                                                               // 235\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));                                                // 236\n\t            H1l = H1.low  = (H1l + bl);                                                                               // 237\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));                                                // 238\n\t            H2l = H2.low  = (H2l + cl);                                                                               // 239\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));                                                // 240\n\t            H3l = H3.low  = (H3l + dl);                                                                               // 241\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));                                                // 242\n\t            H4l = H4.low  = (H4l + el);                                                                               // 243\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));                                                // 244\n\t            H5l = H5.low  = (H5l + fl);                                                                               // 245\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));                                                // 246\n\t            H6l = H6.low  = (H6l + gl);                                                                               // 247\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));                                                // 248\n\t            H7l = H7.low  = (H7l + hl);                                                                               // 249\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));                                                // 250\n\t        },                                                                                                            // 251\n                                                                                                                       // 252\n\t        _doFinalize: function () {                                                                                    // 253\n\t            // Shortcuts                                                                                              // 254\n\t            var data = this._data;                                                                                    // 255\n\t            var dataWords = data.words;                                                                               // 256\n                                                                                                                       // 257\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 258\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 259\n                                                                                                                       // 260\n\t            // Add padding                                                                                            // 261\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 262\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);                 // 263\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;                                           // 264\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 265\n                                                                                                                       // 266\n\t            // Hash final blocks                                                                                      // 267\n\t            this._process();                                                                                          // 268\n                                                                                                                       // 269\n\t            // Convert hash to 32-bit word array before returning                                                     // 270\n\t            var hash = this._hash.toX32();                                                                            // 271\n                                                                                                                       // 272\n\t            // Return final computed hash                                                                             // 273\n\t            return hash;                                                                                              // 274\n\t        },                                                                                                            // 275\n                                                                                                                       // 276\n\t        clone: function () {                                                                                          // 277\n\t            var clone = Hasher.clone.call(this);                                                                      // 278\n\t            clone._hash = this._hash.clone();                                                                         // 279\n                                                                                                                       // 280\n\t            return clone;                                                                                             // 281\n\t        },                                                                                                            // 282\n                                                                                                                       // 283\n\t        blockSize: 1024/32                                                                                            // 284\n\t    });                                                                                                               // 285\n                                                                                                                       // 286\n\t    /**                                                                                                               // 287\n\t     * Shortcut function to the hasher's object interface.                                                            // 288\n\t     *                                                                                                                // 289\n\t     * @param {WordArray|string} message The message to hash.                                                         // 290\n\t     *                                                                                                                // 291\n\t     * @return {WordArray} The hash.                                                                                  // 292\n\t     *                                                                                                                // 293\n\t     * @static                                                                                                        // 294\n\t     *                                                                                                                // 295\n\t     * @example                                                                                                       // 296\n\t     *                                                                                                                // 297\n\t     *     var hash = CryptoJS.SHA512('message');                                                                     // 298\n\t     *     var hash = CryptoJS.SHA512(wordArray);                                                                     // 299\n\t     */                                                                                                               // 300\n\t    C.SHA512 = Hasher._createHelper(SHA512);                                                                          // 301\n                                                                                                                       // 302\n\t    /**                                                                                                               // 303\n\t     * Shortcut function to the HMAC's object interface.                                                              // 304\n\t     *                                                                                                                // 305\n\t     * @param {WordArray|string} message The message to hash.                                                         // 306\n\t     * @param {WordArray|string} key The secret key.                                                                  // 307\n\t     *                                                                                                                // 308\n\t     * @return {WordArray} The HMAC.                                                                                  // 309\n\t     *                                                                                                                // 310\n\t     * @static                                                                                                        // 311\n\t     *                                                                                                                // 312\n\t     * @example                                                                                                       // 313\n\t     *                                                                                                                // 314\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);                                                              // 315\n\t     */                                                                                                               // 316\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);                                                                  // 317\n\t}());                                                                                                                 // 318\n                                                                                                                       // 319\n                                                                                                                       // 320\n\treturn CryptoJS.SHA512;                                                                                               // 321\n                                                                                                                       // 322\n}));                                                                                                                   // 323\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha384.js\":[\"./core\",\"./x64-core\",\"./sha512\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha384.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));                   // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);                                                               // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_x64 = C.x64;                                                                                                // 19\n\t    var X64Word = C_x64.Word;                                                                                         // 20\n\t    var X64WordArray = C_x64.WordArray;                                                                               // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n\t    var SHA512 = C_algo.SHA512;                                                                                       // 23\n                                                                                                                       // 24\n\t    /**                                                                                                               // 25\n\t     * SHA-384 hash algorithm.                                                                                        // 26\n\t     */                                                                                                               // 27\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({                                                                      // 28\n\t        _doReset: function () {                                                                                       // 29\n\t            this._hash = new X64WordArray.init([                                                                      // 30\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),                   // 31\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),                   // 32\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),                   // 33\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)                    // 34\n\t            ]);                                                                                                       // 35\n\t        },                                                                                                            // 36\n                                                                                                                       // 37\n\t        _doFinalize: function () {                                                                                    // 38\n\t            var hash = SHA512._doFinalize.call(this);                                                                 // 39\n                                                                                                                       // 40\n\t            hash.sigBytes -= 16;                                                                                      // 41\n                                                                                                                       // 42\n\t            return hash;                                                                                              // 43\n\t        }                                                                                                             // 44\n\t    });                                                                                                               // 45\n                                                                                                                       // 46\n\t    /**                                                                                                               // 47\n\t     * Shortcut function to the hasher's object interface.                                                            // 48\n\t     *                                                                                                                // 49\n\t     * @param {WordArray|string} message The message to hash.                                                         // 50\n\t     *                                                                                                                // 51\n\t     * @return {WordArray} The hash.                                                                                  // 52\n\t     *                                                                                                                // 53\n\t     * @static                                                                                                        // 54\n\t     *                                                                                                                // 55\n\t     * @example                                                                                                       // 56\n\t     *                                                                                                                // 57\n\t     *     var hash = CryptoJS.SHA384('message');                                                                     // 58\n\t     *     var hash = CryptoJS.SHA384(wordArray);                                                                     // 59\n\t     */                                                                                                               // 60\n\t    C.SHA384 = SHA512._createHelper(SHA384);                                                                          // 61\n                                                                                                                       // 62\n\t    /**                                                                                                               // 63\n\t     * Shortcut function to the HMAC's object interface.                                                              // 64\n\t     *                                                                                                                // 65\n\t     * @param {WordArray|string} message The message to hash.                                                         // 66\n\t     * @param {WordArray|string} key The secret key.                                                                  // 67\n\t     *                                                                                                                // 68\n\t     * @return {WordArray} The HMAC.                                                                                  // 69\n\t     *                                                                                                                // 70\n\t     * @static                                                                                                        // 71\n\t     *                                                                                                                // 72\n\t     * @example                                                                                                       // 73\n\t     *                                                                                                                // 74\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);                                                              // 75\n\t     */                                                                                                               // 76\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);                                                                  // 77\n\t}());                                                                                                                 // 78\n                                                                                                                       // 79\n                                                                                                                       // 80\n\treturn CryptoJS.SHA384;                                                                                               // 81\n                                                                                                                       // 82\n}));                                                                                                                   // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha3.js\":[\"./core\",\"./x64-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/sha3.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));                                        // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./x64-core\"], factory);                                                                           // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function (Math) {                                                                                                    // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var Hasher = C_lib.Hasher;                                                                                        // 21\n\t    var C_x64 = C.x64;                                                                                                // 22\n\t    var X64Word = C_x64.Word;                                                                                         // 23\n\t    var C_algo = C.algo;                                                                                              // 24\n                                                                                                                       // 25\n\t    // Constants tables                                                                                               // 26\n\t    var RHO_OFFSETS = [];                                                                                             // 27\n\t    var PI_INDEXES  = [];                                                                                             // 28\n\t    var ROUND_CONSTANTS = [];                                                                                         // 29\n                                                                                                                       // 30\n\t    // Compute Constants                                                                                              // 31\n\t    (function () {                                                                                                    // 32\n\t        // Compute rho offset constants                                                                               // 33\n\t        var x = 1, y = 0;                                                                                             // 34\n\t        for (var t = 0; t < 24; t++) {                                                                                // 35\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;                                                    // 36\n                                                                                                                       // 37\n\t            var newX = y % 5;                                                                                         // 38\n\t            var newY = (2 * x + 3 * y) % 5;                                                                           // 39\n\t            x = newX;                                                                                                 // 40\n\t            y = newY;                                                                                                 // 41\n\t        }                                                                                                             // 42\n                                                                                                                       // 43\n\t        // Compute pi index constants                                                                                 // 44\n\t        for (var x = 0; x < 5; x++) {                                                                                 // 45\n\t            for (var y = 0; y < 5; y++) {                                                                             // 46\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;                                                // 47\n\t            }                                                                                                         // 48\n\t        }                                                                                                             // 49\n                                                                                                                       // 50\n\t        // Compute round constants                                                                                    // 51\n\t        var LFSR = 0x01;                                                                                              // 52\n\t        for (var i = 0; i < 24; i++) {                                                                                // 53\n\t            var roundConstantMsw = 0;                                                                                 // 54\n\t            var roundConstantLsw = 0;                                                                                 // 55\n                                                                                                                       // 56\n\t            for (var j = 0; j < 7; j++) {                                                                             // 57\n\t                if (LFSR & 0x01) {                                                                                    // 58\n\t                    var bitPosition = (1 << j) - 1;                                                                   // 59\n\t                    if (bitPosition < 32) {                                                                           // 60\n\t                        roundConstantLsw ^= 1 << bitPosition;                                                         // 61\n\t                    } else /* if (bitPosition >= 32) */ {                                                             // 62\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);                                                  // 63\n\t                    }                                                                                                 // 64\n\t                }                                                                                                     // 65\n                                                                                                                       // 66\n\t                // Compute next LFSR                                                                                  // 67\n\t                if (LFSR & 0x80) {                                                                                    // 68\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1                                     // 69\n\t                    LFSR = (LFSR << 1) ^ 0x71;                                                                        // 70\n\t                } else {                                                                                              // 71\n\t                    LFSR <<= 1;                                                                                       // 72\n\t                }                                                                                                     // 73\n\t            }                                                                                                         // 74\n                                                                                                                       // 75\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);                                  // 76\n\t        }                                                                                                             // 77\n\t    }());                                                                                                             // 78\n                                                                                                                       // 79\n\t    // Reusable objects for temporary values                                                                          // 80\n\t    var T = [];                                                                                                       // 81\n\t    (function () {                                                                                                    // 82\n\t        for (var i = 0; i < 25; i++) {                                                                                // 83\n\t            T[i] = X64Word.create();                                                                                  // 84\n\t        }                                                                                                             // 85\n\t    }());                                                                                                             // 86\n                                                                                                                       // 87\n\t    /**                                                                                                               // 88\n\t     * SHA-3 hash algorithm.                                                                                          // 89\n\t     */                                                                                                               // 90\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({                                                                          // 91\n\t        /**                                                                                                           // 92\n\t         * Configuration options.                                                                                     // 93\n\t         *                                                                                                            // 94\n\t         * @property {number} outputLength                                                                            // 95\n\t         *   The desired number of bits in the output hash.                                                           // 96\n\t         *   Only values permitted are: 224, 256, 384, 512.                                                           // 97\n\t         *   Default: 512                                                                                             // 98\n\t         */                                                                                                           // 99\n\t        cfg: Hasher.cfg.extend({                                                                                      // 100\n\t            outputLength: 512                                                                                         // 101\n\t        }),                                                                                                           // 102\n                                                                                                                       // 103\n\t        _doReset: function () {                                                                                       // 104\n\t            var state = this._state = []                                                                              // 105\n\t            for (var i = 0; i < 25; i++) {                                                                            // 106\n\t                state[i] = new X64Word.init();                                                                        // 107\n\t            }                                                                                                         // 108\n                                                                                                                       // 109\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;                                                 // 110\n\t        },                                                                                                            // 111\n                                                                                                                       // 112\n\t        _doProcessBlock: function (M, offset) {                                                                       // 113\n\t            // Shortcuts                                                                                              // 114\n\t            var state = this._state;                                                                                  // 115\n\t            var nBlockSizeLanes = this.blockSize / 2;                                                                 // 116\n                                                                                                                       // 117\n\t            // Absorb                                                                                                 // 118\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {                                                               // 119\n\t                // Shortcuts                                                                                          // 120\n\t                var M2i  = M[offset + 2 * i];                                                                         // 121\n\t                var M2i1 = M[offset + 2 * i + 1];                                                                     // 122\n                                                                                                                       // 123\n\t                // Swap endian                                                                                        // 124\n\t                M2i = (                                                                                               // 125\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |                                                     // 126\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)                                                       // 127\n\t                );                                                                                                    // 128\n\t                M2i1 = (                                                                                              // 129\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |                                                   // 130\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)                                                     // 131\n\t                );                                                                                                    // 132\n                                                                                                                       // 133\n\t                // Absorb message into state                                                                          // 134\n\t                var lane = state[i];                                                                                  // 135\n\t                lane.high ^= M2i1;                                                                                    // 136\n\t                lane.low  ^= M2i;                                                                                     // 137\n\t            }                                                                                                         // 138\n                                                                                                                       // 139\n\t            // Rounds                                                                                                 // 140\n\t            for (var round = 0; round < 24; round++) {                                                                // 141\n\t                // Theta                                                                                              // 142\n\t                for (var x = 0; x < 5; x++) {                                                                         // 143\n\t                    // Mix column lanes                                                                               // 144\n\t                    var tMsw = 0, tLsw = 0;                                                                           // 145\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 146\n\t                        var lane = state[x + 5 * y];                                                                  // 147\n\t                        tMsw ^= lane.high;                                                                            // 148\n\t                        tLsw ^= lane.low;                                                                             // 149\n\t                    }                                                                                                 // 150\n                                                                                                                       // 151\n\t                    // Temporary values                                                                               // 152\n\t                    var Tx = T[x];                                                                                    // 153\n\t                    Tx.high = tMsw;                                                                                   // 154\n\t                    Tx.low  = tLsw;                                                                                   // 155\n\t                }                                                                                                     // 156\n\t                for (var x = 0; x < 5; x++) {                                                                         // 157\n\t                    // Shortcuts                                                                                      // 158\n\t                    var Tx4 = T[(x + 4) % 5];                                                                         // 159\n\t                    var Tx1 = T[(x + 1) % 5];                                                                         // 160\n\t                    var Tx1Msw = Tx1.high;                                                                            // 161\n\t                    var Tx1Lsw = Tx1.low;                                                                             // 162\n                                                                                                                       // 163\n\t                    // Mix surrounding columns                                                                        // 164\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));                                          // 165\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));                                          // 166\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 167\n\t                        var lane = state[x + 5 * y];                                                                  // 168\n\t                        lane.high ^= tMsw;                                                                            // 169\n\t                        lane.low  ^= tLsw;                                                                            // 170\n\t                    }                                                                                                 // 171\n\t                }                                                                                                     // 172\n                                                                                                                       // 173\n\t                // Rho Pi                                                                                             // 174\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {                                                // 175\n\t                    // Shortcuts                                                                                      // 176\n\t                    var lane = state[laneIndex];                                                                      // 177\n\t                    var laneMsw = lane.high;                                                                          // 178\n\t                    var laneLsw = lane.low;                                                                           // 179\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];                                                           // 180\n                                                                                                                       // 181\n\t                    // Rotate lanes                                                                                   // 182\n\t                    if (rhoOffset < 32) {                                                                             // 183\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));                           // 184\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));                           // 185\n\t                    } else /* if (rhoOffset >= 32) */ {                                                               // 186\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));                    // 187\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));                    // 188\n\t                    }                                                                                                 // 189\n                                                                                                                       // 190\n\t                    // Transpose lanes                                                                                // 191\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];                                                           // 192\n\t                    TPiLane.high = tMsw;                                                                              // 193\n\t                    TPiLane.low  = tLsw;                                                                              // 194\n\t                }                                                                                                     // 195\n                                                                                                                       // 196\n\t                // Rho pi at x = y = 0                                                                                // 197\n\t                var T0 = T[0];                                                                                        // 198\n\t                var state0 = state[0];                                                                                // 199\n\t                T0.high = state0.high;                                                                                // 200\n\t                T0.low  = state0.low;                                                                                 // 201\n                                                                                                                       // 202\n\t                // Chi                                                                                                // 203\n\t                for (var x = 0; x < 5; x++) {                                                                         // 204\n\t                    for (var y = 0; y < 5; y++) {                                                                     // 205\n\t                        // Shortcuts                                                                                  // 206\n\t                        var laneIndex = x + 5 * y;                                                                    // 207\n\t                        var lane = state[laneIndex];                                                                  // 208\n\t                        var TLane = T[laneIndex];                                                                     // 209\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];                                                       // 210\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];                                                       // 211\n                                                                                                                       // 212\n\t                        // Mix rows                                                                                   // 213\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);                                      // 214\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);                                       // 215\n\t                    }                                                                                                 // 216\n\t                }                                                                                                     // 217\n                                                                                                                       // 218\n\t                // Iota                                                                                               // 219\n\t                var lane = state[0];                                                                                  // 220\n\t                var roundConstant = ROUND_CONSTANTS[round];                                                           // 221\n\t                lane.high ^= roundConstant.high;                                                                      // 222\n\t                lane.low  ^= roundConstant.low;;                                                                      // 223\n\t            }                                                                                                         // 224\n\t        },                                                                                                            // 225\n                                                                                                                       // 226\n\t        _doFinalize: function () {                                                                                    // 227\n\t            // Shortcuts                                                                                              // 228\n\t            var data = this._data;                                                                                    // 229\n\t            var dataWords = data.words;                                                                               // 230\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 231\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 232\n\t            var blockSizeBits = this.blockSize * 32;                                                                  // 233\n                                                                                                                       // 234\n\t            // Add padding                                                                                            // 235\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);                                               // 236\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;              // 237\n\t            data.sigBytes = dataWords.length * 4;                                                                     // 238\n                                                                                                                       // 239\n\t            // Hash final blocks                                                                                      // 240\n\t            this._process();                                                                                          // 241\n                                                                                                                       // 242\n\t            // Shortcuts                                                                                              // 243\n\t            var state = this._state;                                                                                  // 244\n\t            var outputLengthBytes = this.cfg.outputLength / 8;                                                        // 245\n\t            var outputLengthLanes = outputLengthBytes / 8;                                                            // 246\n                                                                                                                       // 247\n\t            // Squeeze                                                                                                // 248\n\t            var hashWords = [];                                                                                       // 249\n\t            for (var i = 0; i < outputLengthLanes; i++) {                                                             // 250\n\t                // Shortcuts                                                                                          // 251\n\t                var lane = state[i];                                                                                  // 252\n\t                var laneMsw = lane.high;                                                                              // 253\n\t                var laneLsw = lane.low;                                                                               // 254\n                                                                                                                       // 255\n\t                // Swap endian                                                                                        // 256\n\t                laneMsw = (                                                                                           // 257\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |                                             // 258\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)                                               // 259\n\t                );                                                                                                    // 260\n\t                laneLsw = (                                                                                           // 261\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |                                             // 262\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)                                               // 263\n\t                );                                                                                                    // 264\n                                                                                                                       // 265\n\t                // Squeeze state to retrieve hash                                                                     // 266\n\t                hashWords.push(laneLsw);                                                                              // 267\n\t                hashWords.push(laneMsw);                                                                              // 268\n\t            }                                                                                                         // 269\n                                                                                                                       // 270\n\t            // Return final computed hash                                                                             // 271\n\t            return new WordArray.init(hashWords, outputLengthBytes);                                                  // 272\n\t        },                                                                                                            // 273\n                                                                                                                       // 274\n\t        clone: function () {                                                                                          // 275\n\t            var clone = Hasher.clone.call(this);                                                                      // 276\n                                                                                                                       // 277\n\t            var state = clone._state = this._state.slice(0);                                                          // 278\n\t            for (var i = 0; i < 25; i++) {                                                                            // 279\n\t                state[i] = state[i].clone();                                                                          // 280\n\t            }                                                                                                         // 281\n                                                                                                                       // 282\n\t            return clone;                                                                                             // 283\n\t        }                                                                                                             // 284\n\t    });                                                                                                               // 285\n                                                                                                                       // 286\n\t    /**                                                                                                               // 287\n\t     * Shortcut function to the hasher's object interface.                                                            // 288\n\t     *                                                                                                                // 289\n\t     * @param {WordArray|string} message The message to hash.                                                         // 290\n\t     *                                                                                                                // 291\n\t     * @return {WordArray} The hash.                                                                                  // 292\n\t     *                                                                                                                // 293\n\t     * @static                                                                                                        // 294\n\t     *                                                                                                                // 295\n\t     * @example                                                                                                       // 296\n\t     *                                                                                                                // 297\n\t     *     var hash = CryptoJS.SHA3('message');                                                                       // 298\n\t     *     var hash = CryptoJS.SHA3(wordArray);                                                                       // 299\n\t     */                                                                                                               // 300\n\t    C.SHA3 = Hasher._createHelper(SHA3);                                                                              // 301\n                                                                                                                       // 302\n\t    /**                                                                                                               // 303\n\t     * Shortcut function to the HMAC's object interface.                                                              // 304\n\t     *                                                                                                                // 305\n\t     * @param {WordArray|string} message The message to hash.                                                         // 306\n\t     * @param {WordArray|string} key The secret key.                                                                  // 307\n\t     *                                                                                                                // 308\n\t     * @return {WordArray} The HMAC.                                                                                  // 309\n\t     *                                                                                                                // 310\n\t     * @static                                                                                                        // 311\n\t     *                                                                                                                // 312\n\t     * @example                                                                                                       // 313\n\t     *                                                                                                                // 314\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);                                                                // 315\n\t     */                                                                                                               // 316\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);                                                                      // 317\n\t}(Math));                                                                                                             // 318\n                                                                                                                       // 319\n                                                                                                                       // 320\n\treturn CryptoJS.SHA3;                                                                                                 // 321\n                                                                                                                       // 322\n}));                                                                                                                   // 323\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ripemd160.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/ripemd160.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/** @preserve                                                                                                         // 16\n\t(c) 2012 by Cédric Mesnil. All rights reserved.                                                                       // 17\n                                                                                                                       // 18\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n                                                                                                                       // 20\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n                                                                                                                       // 23\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/                                                                                                                    // 25\n                                                                                                                       // 26\n\t(function (Math) {                                                                                                    // 27\n\t    // Shortcuts                                                                                                      // 28\n\t    var C = CryptoJS;                                                                                                 // 29\n\t    var C_lib = C.lib;                                                                                                // 30\n\t    var WordArray = C_lib.WordArray;                                                                                  // 31\n\t    var Hasher = C_lib.Hasher;                                                                                        // 32\n\t    var C_algo = C.algo;                                                                                              // 33\n                                                                                                                       // 34\n\t    // Constants table                                                                                                // 35\n\t    var _zl = WordArray.create([                                                                                      // 36\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,                                                // 37\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,                                                // 38\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,                                                // 39\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,                                                // 40\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);                                              // 41\n\t    var _zr = WordArray.create([                                                                                      // 42\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,                                                // 43\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,                                                // 44\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,                                               // 45\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,                                                // 46\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);                                             // 47\n\t    var _sl = WordArray.create([                                                                                      // 48\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,                                              // 49\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,                                                // 50\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,                                               // 51\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,                                             // 52\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);                                             // 53\n\t    var _sr = WordArray.create([                                                                                      // 54\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,                                                // 55\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,                                                // 56\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,                                                // 57\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,                                               // 58\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);                                             // 59\n                                                                                                                       // 60\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);                       // 61\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);                       // 62\n                                                                                                                       // 63\n\t    /**                                                                                                               // 64\n\t     * RIPEMD160 hash algorithm.                                                                                      // 65\n\t     */                                                                                                               // 66\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({                                                                // 67\n\t        _doReset: function () {                                                                                       // 68\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);             // 69\n\t        },                                                                                                            // 70\n                                                                                                                       // 71\n\t        _doProcessBlock: function (M, offset) {                                                                       // 72\n                                                                                                                       // 73\n\t            // Swap endian                                                                                            // 74\n\t            for (var i = 0; i < 16; i++) {                                                                            // 75\n\t                // Shortcuts                                                                                          // 76\n\t                var offset_i = offset + i;                                                                            // 77\n\t                var M_offset_i = M[offset_i];                                                                         // 78\n                                                                                                                       // 79\n\t                // Swap                                                                                               // 80\n\t                M[offset_i] = (                                                                                       // 81\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |                                       // 82\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)                                         // 83\n\t                );                                                                                                    // 84\n\t            }                                                                                                         // 85\n\t            // Shortcut                                                                                               // 86\n\t            var H  = this._hash.words;                                                                                // 87\n\t            var hl = _hl.words;                                                                                       // 88\n\t            var hr = _hr.words;                                                                                       // 89\n\t            var zl = _zl.words;                                                                                       // 90\n\t            var zr = _zr.words;                                                                                       // 91\n\t            var sl = _sl.words;                                                                                       // 92\n\t            var sr = _sr.words;                                                                                       // 93\n                                                                                                                       // 94\n\t            // Working variables                                                                                      // 95\n\t            var al, bl, cl, dl, el;                                                                                   // 96\n\t            var ar, br, cr, dr, er;                                                                                   // 97\n                                                                                                                       // 98\n\t            ar = al = H[0];                                                                                           // 99\n\t            br = bl = H[1];                                                                                           // 100\n\t            cr = cl = H[2];                                                                                           // 101\n\t            dr = dl = H[3];                                                                                           // 102\n\t            er = el = H[4];                                                                                           // 103\n\t            // Computation                                                                                            // 104\n\t            var t;                                                                                                    // 105\n\t            for (var i = 0; i < 80; i += 1) {                                                                         // 106\n\t                t = (al +  M[offset+zl[i]])|0;                                                                        // 107\n\t                if (i<16){                                                                                            // 108\n\t\t            t +=  f1(bl,cl,dl) + hl[0];                                                                              // 109\n\t                } else if (i<32) {                                                                                    // 110\n\t\t            t +=  f2(bl,cl,dl) + hl[1];                                                                              // 111\n\t                } else if (i<48) {                                                                                    // 112\n\t\t            t +=  f3(bl,cl,dl) + hl[2];                                                                              // 113\n\t                } else if (i<64) {                                                                                    // 114\n\t\t            t +=  f4(bl,cl,dl) + hl[3];                                                                              // 115\n\t                } else {// if (i<80) {                                                                                // 116\n\t\t            t +=  f5(bl,cl,dl) + hl[4];                                                                              // 117\n\t                }                                                                                                     // 118\n\t                t = t|0;                                                                                              // 119\n\t                t =  rotl(t,sl[i]);                                                                                   // 120\n\t                t = (t+el)|0;                                                                                         // 121\n\t                al = el;                                                                                              // 122\n\t                el = dl;                                                                                              // 123\n\t                dl = rotl(cl, 10);                                                                                    // 124\n\t                cl = bl;                                                                                              // 125\n\t                bl = t;                                                                                               // 126\n                                                                                                                       // 127\n\t                t = (ar + M[offset+zr[i]])|0;                                                                         // 128\n\t                if (i<16){                                                                                            // 129\n\t\t            t +=  f5(br,cr,dr) + hr[0];                                                                              // 130\n\t                } else if (i<32) {                                                                                    // 131\n\t\t            t +=  f4(br,cr,dr) + hr[1];                                                                              // 132\n\t                } else if (i<48) {                                                                                    // 133\n\t\t            t +=  f3(br,cr,dr) + hr[2];                                                                              // 134\n\t                } else if (i<64) {                                                                                    // 135\n\t\t            t +=  f2(br,cr,dr) + hr[3];                                                                              // 136\n\t                } else {// if (i<80) {                                                                                // 137\n\t\t            t +=  f1(br,cr,dr) + hr[4];                                                                              // 138\n\t                }                                                                                                     // 139\n\t                t = t|0;                                                                                              // 140\n\t                t =  rotl(t,sr[i]) ;                                                                                  // 141\n\t                t = (t+er)|0;                                                                                         // 142\n\t                ar = er;                                                                                              // 143\n\t                er = dr;                                                                                              // 144\n\t                dr = rotl(cr, 10);                                                                                    // 145\n\t                cr = br;                                                                                              // 146\n\t                br = t;                                                                                               // 147\n\t            }                                                                                                         // 148\n\t            // Intermediate hash value                                                                                // 149\n\t            t    = (H[1] + cl + dr)|0;                                                                                // 150\n\t            H[1] = (H[2] + dl + er)|0;                                                                                // 151\n\t            H[2] = (H[3] + el + ar)|0;                                                                                // 152\n\t            H[3] = (H[4] + al + br)|0;                                                                                // 153\n\t            H[4] = (H[0] + bl + cr)|0;                                                                                // 154\n\t            H[0] =  t;                                                                                                // 155\n\t        },                                                                                                            // 156\n                                                                                                                       // 157\n\t        _doFinalize: function () {                                                                                    // 158\n\t            // Shortcuts                                                                                              // 159\n\t            var data = this._data;                                                                                    // 160\n\t            var dataWords = data.words;                                                                               // 161\n                                                                                                                       // 162\n\t            var nBitsTotal = this._nDataBytes * 8;                                                                    // 163\n\t            var nBitsLeft = data.sigBytes * 8;                                                                        // 164\n                                                                                                                       // 165\n\t            // Add padding                                                                                            // 166\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);                                              // 167\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (                                                       // 168\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |                                           // 169\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)                                             // 170\n\t            );                                                                                                        // 171\n\t            data.sigBytes = (dataWords.length + 1) * 4;                                                               // 172\n                                                                                                                       // 173\n\t            // Hash final blocks                                                                                      // 174\n\t            this._process();                                                                                          // 175\n                                                                                                                       // 176\n\t            // Shortcuts                                                                                              // 177\n\t            var hash = this._hash;                                                                                    // 178\n\t            var H = hash.words;                                                                                       // 179\n                                                                                                                       // 180\n\t            // Swap endian                                                                                            // 181\n\t            for (var i = 0; i < 5; i++) {                                                                             // 182\n\t                // Shortcut                                                                                           // 183\n\t                var H_i = H[i];                                                                                       // 184\n                                                                                                                       // 185\n\t                // Swap                                                                                               // 186\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |                                                  // 187\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);                                                   // 188\n\t            }                                                                                                         // 189\n                                                                                                                       // 190\n\t            // Return final computed hash                                                                             // 191\n\t            return hash;                                                                                              // 192\n\t        },                                                                                                            // 193\n                                                                                                                       // 194\n\t        clone: function () {                                                                                          // 195\n\t            var clone = Hasher.clone.call(this);                                                                      // 196\n\t            clone._hash = this._hash.clone();                                                                         // 197\n                                                                                                                       // 198\n\t            return clone;                                                                                             // 199\n\t        }                                                                                                             // 200\n\t    });                                                                                                               // 201\n                                                                                                                       // 202\n                                                                                                                       // 203\n\t    function f1(x, y, z) {                                                                                            // 204\n\t        return ((x) ^ (y) ^ (z));                                                                                     // 205\n                                                                                                                       // 206\n\t    }                                                                                                                 // 207\n                                                                                                                       // 208\n\t    function f2(x, y, z) {                                                                                            // 209\n\t        return (((x)&(y)) | ((~x)&(z)));                                                                              // 210\n\t    }                                                                                                                 // 211\n                                                                                                                       // 212\n\t    function f3(x, y, z) {                                                                                            // 213\n\t        return (((x) | (~(y))) ^ (z));                                                                                // 214\n\t    }                                                                                                                 // 215\n                                                                                                                       // 216\n\t    function f4(x, y, z) {                                                                                            // 217\n\t        return (((x) & (z)) | ((y)&(~(z))));                                                                          // 218\n\t    }                                                                                                                 // 219\n                                                                                                                       // 220\n\t    function f5(x, y, z) {                                                                                            // 221\n\t        return ((x) ^ ((y) |(~(z))));                                                                                 // 222\n                                                                                                                       // 223\n\t    }                                                                                                                 // 224\n                                                                                                                       // 225\n\t    function rotl(x,n) {                                                                                              // 226\n\t        return (x<<n) | (x>>>(32-n));                                                                                 // 227\n\t    }                                                                                                                 // 228\n                                                                                                                       // 229\n                                                                                                                       // 230\n\t    /**                                                                                                               // 231\n\t     * Shortcut function to the hasher's object interface.                                                            // 232\n\t     *                                                                                                                // 233\n\t     * @param {WordArray|string} message The message to hash.                                                         // 234\n\t     *                                                                                                                // 235\n\t     * @return {WordArray} The hash.                                                                                  // 236\n\t     *                                                                                                                // 237\n\t     * @static                                                                                                        // 238\n\t     *                                                                                                                // 239\n\t     * @example                                                                                                       // 240\n\t     *                                                                                                                // 241\n\t     *     var hash = CryptoJS.RIPEMD160('message');                                                                  // 242\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);                                                                  // 243\n\t     */                                                                                                               // 244\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);                                                                    // 245\n                                                                                                                       // 246\n\t    /**                                                                                                               // 247\n\t     * Shortcut function to the HMAC's object interface.                                                              // 248\n\t     *                                                                                                                // 249\n\t     * @param {WordArray|string} message The message to hash.                                                         // 250\n\t     * @param {WordArray|string} key The secret key.                                                                  // 251\n\t     *                                                                                                                // 252\n\t     * @return {WordArray} The HMAC.                                                                                  // 253\n\t     *                                                                                                                // 254\n\t     * @static                                                                                                        // 255\n\t     *                                                                                                                // 256\n\t     * @example                                                                                                       // 257\n\t     *                                                                                                                // 258\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);                                                           // 259\n\t     */                                                                                                               // 260\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);                                                            // 261\n\t}(Math));                                                                                                             // 262\n                                                                                                                       // 263\n                                                                                                                       // 264\n\treturn CryptoJS.RIPEMD160;                                                                                            // 265\n                                                                                                                       // 266\n}));                                                                                                                   // 267\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"hmac.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/hmac.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var Base = C_lib.Base;                                                                                            // 20\n\t    var C_enc = C.enc;                                                                                                // 21\n\t    var Utf8 = C_enc.Utf8;                                                                                            // 22\n\t    var C_algo = C.algo;                                                                                              // 23\n                                                                                                                       // 24\n\t    /**                                                                                                               // 25\n\t     * HMAC algorithm.                                                                                                // 26\n\t     */                                                                                                               // 27\n\t    var HMAC = C_algo.HMAC = Base.extend({                                                                            // 28\n\t        /**                                                                                                           // 29\n\t         * Initializes a newly created HMAC.                                                                          // 30\n\t         *                                                                                                            // 31\n\t         * @param {Hasher} hasher The hash algorithm to use.                                                          // 32\n\t         * @param {WordArray|string} key The secret key.                                                              // 33\n\t         *                                                                                                            // 34\n\t         * @example                                                                                                   // 35\n\t         *                                                                                                            // 36\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);                                 // 37\n\t         */                                                                                                           // 38\n\t        init: function (hasher, key) {                                                                                // 39\n\t            // Init hasher                                                                                            // 40\n\t            hasher = this._hasher = new hasher.init();                                                                // 41\n                                                                                                                       // 42\n\t            // Convert string to WordArray, else assume WordArray already                                             // 43\n\t            if (typeof key == 'string') {                                                                             // 44\n\t                key = Utf8.parse(key);                                                                                // 45\n\t            }                                                                                                         // 46\n                                                                                                                       // 47\n\t            // Shortcuts                                                                                              // 48\n\t            var hasherBlockSize = hasher.blockSize;                                                                   // 49\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;                                                           // 50\n                                                                                                                       // 51\n\t            // Allow arbitrary length keys                                                                            // 52\n\t            if (key.sigBytes > hasherBlockSizeBytes) {                                                                // 53\n\t                key = hasher.finalize(key);                                                                           // 54\n\t            }                                                                                                         // 55\n                                                                                                                       // 56\n\t            // Clamp excess bits                                                                                      // 57\n\t            key.clamp();                                                                                              // 58\n                                                                                                                       // 59\n\t            // Clone key for inner and outer pads                                                                     // 60\n\t            var oKey = this._oKey = key.clone();                                                                      // 61\n\t            var iKey = this._iKey = key.clone();                                                                      // 62\n                                                                                                                       // 63\n\t            // Shortcuts                                                                                              // 64\n\t            var oKeyWords = oKey.words;                                                                               // 65\n\t            var iKeyWords = iKey.words;                                                                               // 66\n                                                                                                                       // 67\n\t            // XOR keys with pad constants                                                                            // 68\n\t            for (var i = 0; i < hasherBlockSize; i++) {                                                               // 69\n\t                oKeyWords[i] ^= 0x5c5c5c5c;                                                                           // 70\n\t                iKeyWords[i] ^= 0x36363636;                                                                           // 71\n\t            }                                                                                                         // 72\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;                                                     // 73\n                                                                                                                       // 74\n\t            // Set initial values                                                                                     // 75\n\t            this.reset();                                                                                             // 76\n\t        },                                                                                                            // 77\n                                                                                                                       // 78\n\t        /**                                                                                                           // 79\n\t         * Resets this HMAC to its initial state.                                                                     // 80\n\t         *                                                                                                            // 81\n\t         * @example                                                                                                   // 82\n\t         *                                                                                                            // 83\n\t         *     hmacHasher.reset();                                                                                    // 84\n\t         */                                                                                                           // 85\n\t        reset: function () {                                                                                          // 86\n\t            // Shortcut                                                                                               // 87\n\t            var hasher = this._hasher;                                                                                // 88\n                                                                                                                       // 89\n\t            // Reset                                                                                                  // 90\n\t            hasher.reset();                                                                                           // 91\n\t            hasher.update(this._iKey);                                                                                // 92\n\t        },                                                                                                            // 93\n                                                                                                                       // 94\n\t        /**                                                                                                           // 95\n\t         * Updates this HMAC with a message.                                                                          // 96\n\t         *                                                                                                            // 97\n\t         * @param {WordArray|string} messageUpdate The message to append.                                             // 98\n\t         *                                                                                                            // 99\n\t         * @return {HMAC} This HMAC instance.                                                                         // 100\n\t         *                                                                                                            // 101\n\t         * @example                                                                                                   // 102\n\t         *                                                                                                            // 103\n\t         *     hmacHasher.update('message');                                                                          // 104\n\t         *     hmacHasher.update(wordArray);                                                                          // 105\n\t         */                                                                                                           // 106\n\t        update: function (messageUpdate) {                                                                            // 107\n\t            this._hasher.update(messageUpdate);                                                                       // 108\n                                                                                                                       // 109\n\t            // Chainable                                                                                              // 110\n\t            return this;                                                                                              // 111\n\t        },                                                                                                            // 112\n                                                                                                                       // 113\n\t        /**                                                                                                           // 114\n\t         * Finalizes the HMAC computation.                                                                            // 115\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 116\n\t         *                                                                                                            // 117\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.                                 // 118\n\t         *                                                                                                            // 119\n\t         * @return {WordArray} The HMAC.                                                                              // 120\n\t         *                                                                                                            // 121\n\t         * @example                                                                                                   // 122\n\t         *                                                                                                            // 123\n\t         *     var hmac = hmacHasher.finalize();                                                                      // 124\n\t         *     var hmac = hmacHasher.finalize('message');                                                             // 125\n\t         *     var hmac = hmacHasher.finalize(wordArray);                                                             // 126\n\t         */                                                                                                           // 127\n\t        finalize: function (messageUpdate) {                                                                          // 128\n\t            // Shortcut                                                                                               // 129\n\t            var hasher = this._hasher;                                                                                // 130\n                                                                                                                       // 131\n\t            // Compute HMAC                                                                                           // 132\n\t            var innerHash = hasher.finalize(messageUpdate);                                                           // 133\n\t            hasher.reset();                                                                                           // 134\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));                                         // 135\n                                                                                                                       // 136\n\t            return hmac;                                                                                              // 137\n\t        }                                                                                                             // 138\n\t    });                                                                                                               // 139\n\t}());                                                                                                                 // 140\n                                                                                                                       // 141\n                                                                                                                       // 142\n}));                                                                                                                   // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pbkdf2.js\":[\"./core\",\"./sha1\",\"./hmac\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pbkdf2.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));                         // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);                                                                     // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var Base = C_lib.Base;                                                                                            // 20\n\t    var WordArray = C_lib.WordArray;                                                                                  // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n\t    var SHA1 = C_algo.SHA1;                                                                                           // 23\n\t    var HMAC = C_algo.HMAC;                                                                                           // 24\n                                                                                                                       // 25\n\t    /**                                                                                                               // 26\n\t     * Password-Based Key Derivation Function 2 algorithm.                                                            // 27\n\t     */                                                                                                               // 28\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({                                                                        // 29\n\t        /**                                                                                                           // 30\n\t         * Configuration options.                                                                                     // 31\n\t         *                                                                                                            // 32\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 33\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1                                                 // 34\n\t         * @property {number} iterations The number of iterations to perform. Default: 1                              // 35\n\t         */                                                                                                           // 36\n\t        cfg: Base.extend({                                                                                            // 37\n\t            keySize: 128/32,                                                                                          // 38\n\t            hasher: SHA1,                                                                                             // 39\n\t            iterations: 1                                                                                             // 40\n\t        }),                                                                                                           // 41\n                                                                                                                       // 42\n\t        /**                                                                                                           // 43\n\t         * Initializes a newly created key derivation function.                                                       // 44\n\t         *                                                                                                            // 45\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 46\n\t         *                                                                                                            // 47\n\t         * @example                                                                                                   // 48\n\t         *                                                                                                            // 49\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();                                                               // 50\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });                                                 // 51\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });                               // 52\n\t         */                                                                                                           // 53\n\t        init: function (cfg) {                                                                                        // 54\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 55\n\t        },                                                                                                            // 56\n                                                                                                                       // 57\n\t        /**                                                                                                           // 58\n\t         * Computes the Password-Based Key Derivation Function 2.                                                     // 59\n\t         *                                                                                                            // 60\n\t         * @param {WordArray|string} password The password.                                                           // 61\n\t         * @param {WordArray|string} salt A salt.                                                                     // 62\n\t         *                                                                                                            // 63\n\t         * @return {WordArray} The derived key.                                                                       // 64\n\t         *                                                                                                            // 65\n\t         * @example                                                                                                   // 66\n\t         *                                                                                                            // 67\n\t         *     var key = kdf.compute(password, salt);                                                                 // 68\n\t         */                                                                                                           // 69\n\t        compute: function (password, salt) {                                                                          // 70\n\t            // Shortcut                                                                                               // 71\n\t            var cfg = this.cfg;                                                                                       // 72\n                                                                                                                       // 73\n\t            // Init HMAC                                                                                              // 74\n\t            var hmac = HMAC.create(cfg.hasher, password);                                                             // 75\n                                                                                                                       // 76\n\t            // Initial values                                                                                         // 77\n\t            var derivedKey = WordArray.create();                                                                      // 78\n\t            var blockIndex = WordArray.create([0x00000001]);                                                          // 79\n                                                                                                                       // 80\n\t            // Shortcuts                                                                                              // 81\n\t            var derivedKeyWords = derivedKey.words;                                                                   // 82\n\t            var blockIndexWords = blockIndex.words;                                                                   // 83\n\t            var keySize = cfg.keySize;                                                                                // 84\n\t            var iterations = cfg.iterations;                                                                          // 85\n                                                                                                                       // 86\n\t            // Generate key                                                                                           // 87\n\t            while (derivedKeyWords.length < keySize) {                                                                // 88\n\t                var block = hmac.update(salt).finalize(blockIndex);                                                   // 89\n\t                hmac.reset();                                                                                         // 90\n                                                                                                                       // 91\n\t                // Shortcuts                                                                                          // 92\n\t                var blockWords = block.words;                                                                         // 93\n\t                var blockWordsLength = blockWords.length;                                                             // 94\n                                                                                                                       // 95\n\t                // Iterations                                                                                         // 96\n\t                var intermediate = block;                                                                             // 97\n\t                for (var i = 1; i < iterations; i++) {                                                                // 98\n\t                    intermediate = hmac.finalize(intermediate);                                                       // 99\n\t                    hmac.reset();                                                                                     // 100\n                                                                                                                       // 101\n\t                    // Shortcut                                                                                       // 102\n\t                    var intermediateWords = intermediate.words;                                                       // 103\n                                                                                                                       // 104\n\t                    // XOR intermediate with block                                                                    // 105\n\t                    for (var j = 0; j < blockWordsLength; j++) {                                                      // 106\n\t                        blockWords[j] ^= intermediateWords[j];                                                        // 107\n\t                    }                                                                                                 // 108\n\t                }                                                                                                     // 109\n                                                                                                                       // 110\n\t                derivedKey.concat(block);                                                                             // 111\n\t                blockIndexWords[0]++;                                                                                 // 112\n\t            }                                                                                                         // 113\n\t            derivedKey.sigBytes = keySize * 4;                                                                        // 114\n                                                                                                                       // 115\n\t            return derivedKey;                                                                                        // 116\n\t        }                                                                                                             // 117\n\t    });                                                                                                               // 118\n                                                                                                                       // 119\n\t    /**                                                                                                               // 120\n\t     * Computes the Password-Based Key Derivation Function 2.                                                         // 121\n\t     *                                                                                                                // 122\n\t     * @param {WordArray|string} password The password.                                                               // 123\n\t     * @param {WordArray|string} salt A salt.                                                                         // 124\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 125\n\t     *                                                                                                                // 126\n\t     * @return {WordArray} The derived key.                                                                           // 127\n\t     *                                                                                                                // 128\n\t     * @static                                                                                                        // 129\n\t     *                                                                                                                // 130\n\t     * @example                                                                                                       // 131\n\t     *                                                                                                                // 132\n\t     *     var key = CryptoJS.PBKDF2(password, salt);                                                                 // 133\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });                                                 // 134\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });                               // 135\n\t     */                                                                                                               // 136\n\t    C.PBKDF2 = function (password, salt, cfg) {                                                                       // 137\n\t        return PBKDF2.create(cfg).compute(password, salt);                                                            // 138\n\t    };                                                                                                                // 139\n\t}());                                                                                                                 // 140\n                                                                                                                       // 141\n                                                                                                                       // 142\n\treturn CryptoJS.PBKDF2;                                                                                               // 143\n                                                                                                                       // 144\n}));                                                                                                                   // 145\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"evpkdf.js\":[\"./core\",\"./sha1\",\"./hmac\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/evpkdf.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));                         // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);                                                                     // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var Base = C_lib.Base;                                                                                            // 20\n\t    var WordArray = C_lib.WordArray;                                                                                  // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n\t    var MD5 = C_algo.MD5;                                                                                             // 23\n                                                                                                                       // 24\n\t    /**                                                                                                               // 25\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.                                          // 26\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html                                                                // 27\n\t     */                                                                                                               // 28\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({                                                                        // 29\n\t        /**                                                                                                           // 30\n\t         * Configuration options.                                                                                     // 31\n\t         *                                                                                                            // 32\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)                        // 33\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5                                          // 34\n\t         * @property {number} iterations The number of iterations to perform. Default: 1                              // 35\n\t         */                                                                                                           // 36\n\t        cfg: Base.extend({                                                                                            // 37\n\t            keySize: 128/32,                                                                                          // 38\n\t            hasher: MD5,                                                                                              // 39\n\t            iterations: 1                                                                                             // 40\n\t        }),                                                                                                           // 41\n                                                                                                                       // 42\n\t        /**                                                                                                           // 43\n\t         * Initializes a newly created key derivation function.                                                       // 44\n\t         *                                                                                                            // 45\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.                        // 46\n\t         *                                                                                                            // 47\n\t         * @example                                                                                                   // 48\n\t         *                                                                                                            // 49\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();                                                               // 50\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });                                                 // 51\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });                               // 52\n\t         */                                                                                                           // 53\n\t        init: function (cfg) {                                                                                        // 54\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 55\n\t        },                                                                                                            // 56\n                                                                                                                       // 57\n\t        /**                                                                                                           // 58\n\t         * Derives a key from a password.                                                                             // 59\n\t         *                                                                                                            // 60\n\t         * @param {WordArray|string} password The password.                                                           // 61\n\t         * @param {WordArray|string} salt A salt.                                                                     // 62\n\t         *                                                                                                            // 63\n\t         * @return {WordArray} The derived key.                                                                       // 64\n\t         *                                                                                                            // 65\n\t         * @example                                                                                                   // 66\n\t         *                                                                                                            // 67\n\t         *     var key = kdf.compute(password, salt);                                                                 // 68\n\t         */                                                                                                           // 69\n\t        compute: function (password, salt) {                                                                          // 70\n\t            // Shortcut                                                                                               // 71\n\t            var cfg = this.cfg;                                                                                       // 72\n                                                                                                                       // 73\n\t            // Init hasher                                                                                            // 74\n\t            var hasher = cfg.hasher.create();                                                                         // 75\n                                                                                                                       // 76\n\t            // Initial values                                                                                         // 77\n\t            var derivedKey = WordArray.create();                                                                      // 78\n                                                                                                                       // 79\n\t            // Shortcuts                                                                                              // 80\n\t            var derivedKeyWords = derivedKey.words;                                                                   // 81\n\t            var keySize = cfg.keySize;                                                                                // 82\n\t            var iterations = cfg.iterations;                                                                          // 83\n                                                                                                                       // 84\n\t            // Generate key                                                                                           // 85\n\t            while (derivedKeyWords.length < keySize) {                                                                // 86\n\t                if (block) {                                                                                          // 87\n\t                    hasher.update(block);                                                                             // 88\n\t                }                                                                                                     // 89\n\t                var block = hasher.update(password).finalize(salt);                                                   // 90\n\t                hasher.reset();                                                                                       // 91\n                                                                                                                       // 92\n\t                // Iterations                                                                                         // 93\n\t                for (var i = 1; i < iterations; i++) {                                                                // 94\n\t                    block = hasher.finalize(block);                                                                   // 95\n\t                    hasher.reset();                                                                                   // 96\n\t                }                                                                                                     // 97\n                                                                                                                       // 98\n\t                derivedKey.concat(block);                                                                             // 99\n\t            }                                                                                                         // 100\n\t            derivedKey.sigBytes = keySize * 4;                                                                        // 101\n                                                                                                                       // 102\n\t            return derivedKey;                                                                                        // 103\n\t        }                                                                                                             // 104\n\t    });                                                                                                               // 105\n                                                                                                                       // 106\n\t    /**                                                                                                               // 107\n\t     * Derives a key from a password.                                                                                 // 108\n\t     *                                                                                                                // 109\n\t     * @param {WordArray|string} password The password.                                                               // 110\n\t     * @param {WordArray|string} salt A salt.                                                                         // 111\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.                          // 112\n\t     *                                                                                                                // 113\n\t     * @return {WordArray} The derived key.                                                                           // 114\n\t     *                                                                                                                // 115\n\t     * @static                                                                                                        // 116\n\t     *                                                                                                                // 117\n\t     * @example                                                                                                       // 118\n\t     *                                                                                                                // 119\n\t     *     var key = CryptoJS.EvpKDF(password, salt);                                                                 // 120\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });                                                 // 121\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });                               // 122\n\t     */                                                                                                               // 123\n\t    C.EvpKDF = function (password, salt, cfg) {                                                                       // 124\n\t        return EvpKDF.create(cfg).compute(password, salt);                                                            // 125\n\t    };                                                                                                                // 126\n\t}());                                                                                                                 // 127\n                                                                                                                       // 128\n                                                                                                                       // 129\n\treturn CryptoJS.EvpKDF;                                                                                               // 130\n                                                                                                                       // 131\n}));                                                                                                                   // 132\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"cipher-core.js\":[\"./core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/cipher-core.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory) {                                                                                           // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"));                                                               // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\"], factory);                                                                                         // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Cipher core components.                                                                                            // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.lib.Cipher || (function (undefined) {                                                                        // 19\n\t    // Shortcuts                                                                                                      // 20\n\t    var C = CryptoJS;                                                                                                 // 21\n\t    var C_lib = C.lib;                                                                                                // 22\n\t    var Base = C_lib.Base;                                                                                            // 23\n\t    var WordArray = C_lib.WordArray;                                                                                  // 24\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;                                                        // 25\n\t    var C_enc = C.enc;                                                                                                // 26\n\t    var Utf8 = C_enc.Utf8;                                                                                            // 27\n\t    var Base64 = C_enc.Base64;                                                                                        // 28\n\t    var C_algo = C.algo;                                                                                              // 29\n\t    var EvpKDF = C_algo.EvpKDF;                                                                                       // 30\n                                                                                                                       // 31\n\t    /**                                                                                                               // 32\n\t     * Abstract base cipher template.                                                                                 // 33\n\t     *                                                                                                                // 34\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)                                       // 35\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)                                         // 36\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.                                    // 37\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.                                    // 38\n\t     */                                                                                                               // 39\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({                                                       // 40\n\t        /**                                                                                                           // 41\n\t         * Configuration options.                                                                                     // 42\n\t         *                                                                                                            // 43\n\t         * @property {WordArray} iv The IV to use for this operation.                                                 // 44\n\t         */                                                                                                           // 45\n\t        cfg: Base.extend(),                                                                                           // 46\n                                                                                                                       // 47\n\t        /**                                                                                                           // 48\n\t         * Creates this cipher in encryption mode.                                                                    // 49\n\t         *                                                                                                            // 50\n\t         * @param {WordArray} key The key.                                                                            // 51\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 52\n\t         *                                                                                                            // 53\n\t         * @return {Cipher} A cipher instance.                                                                        // 54\n\t         *                                                                                                            // 55\n\t         * @static                                                                                                    // 56\n\t         *                                                                                                            // 57\n\t         * @example                                                                                                   // 58\n\t         *                                                                                                            // 59\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });                     // 60\n\t         */                                                                                                           // 61\n\t        createEncryptor: function (key, cfg) {                                                                        // 62\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);                                                       // 63\n\t        },                                                                                                            // 64\n                                                                                                                       // 65\n\t        /**                                                                                                           // 66\n\t         * Creates this cipher in decryption mode.                                                                    // 67\n\t         *                                                                                                            // 68\n\t         * @param {WordArray} key The key.                                                                            // 69\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 70\n\t         *                                                                                                            // 71\n\t         * @return {Cipher} A cipher instance.                                                                        // 72\n\t         *                                                                                                            // 73\n\t         * @static                                                                                                    // 74\n\t         *                                                                                                            // 75\n\t         * @example                                                                                                   // 76\n\t         *                                                                                                            // 77\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });                     // 78\n\t         */                                                                                                           // 79\n\t        createDecryptor: function (key, cfg) {                                                                        // 80\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);                                                       // 81\n\t        },                                                                                                            // 82\n                                                                                                                       // 83\n\t        /**                                                                                                           // 84\n\t         * Initializes a newly created cipher.                                                                        // 85\n\t         *                                                                                                            // 86\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.                 // 87\n\t         * @param {WordArray} key The key.                                                                            // 88\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 89\n\t         *                                                                                                            // 90\n\t         * @example                                                                                                   // 91\n\t         *                                                                                                            // 92\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */                                                                                                           // 94\n\t        init: function (xformMode, key, cfg) {                                                                        // 95\n\t            // Apply config defaults                                                                                  // 96\n\t            this.cfg = this.cfg.extend(cfg);                                                                          // 97\n                                                                                                                       // 98\n\t            // Store transform mode and key                                                                           // 99\n\t            this._xformMode = xformMode;                                                                              // 100\n\t            this._key = key;                                                                                          // 101\n                                                                                                                       // 102\n\t            // Set initial values                                                                                     // 103\n\t            this.reset();                                                                                             // 104\n\t        },                                                                                                            // 105\n                                                                                                                       // 106\n\t        /**                                                                                                           // 107\n\t         * Resets this cipher to its initial state.                                                                   // 108\n\t         *                                                                                                            // 109\n\t         * @example                                                                                                   // 110\n\t         *                                                                                                            // 111\n\t         *     cipher.reset();                                                                                        // 112\n\t         */                                                                                                           // 113\n\t        reset: function () {                                                                                          // 114\n\t            // Reset data buffer                                                                                      // 115\n\t            BufferedBlockAlgorithm.reset.call(this);                                                                  // 116\n                                                                                                                       // 117\n\t            // Perform concrete-cipher logic                                                                          // 118\n\t            this._doReset();                                                                                          // 119\n\t        },                                                                                                            // 120\n                                                                                                                       // 121\n\t        /**                                                                                                           // 122\n\t         * Adds data to be encrypted or decrypted.                                                                    // 123\n\t         *                                                                                                            // 124\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.                                       // 125\n\t         *                                                                                                            // 126\n\t         * @return {WordArray} The data after processing.                                                             // 127\n\t         *                                                                                                            // 128\n\t         * @example                                                                                                   // 129\n\t         *                                                                                                            // 130\n\t         *     var encrypted = cipher.process('data');                                                                // 131\n\t         *     var encrypted = cipher.process(wordArray);                                                             // 132\n\t         */                                                                                                           // 133\n\t        process: function (dataUpdate) {                                                                              // 134\n\t            // Append                                                                                                 // 135\n\t            this._append(dataUpdate);                                                                                 // 136\n                                                                                                                       // 137\n\t            // Process available blocks                                                                               // 138\n\t            return this._process();                                                                                   // 139\n\t        },                                                                                                            // 140\n                                                                                                                       // 141\n\t        /**                                                                                                           // 142\n\t         * Finalizes the encryption or decryption process.                                                            // 143\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.                        // 144\n\t         *                                                                                                            // 145\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.                                 // 146\n\t         *                                                                                                            // 147\n\t         * @return {WordArray} The data after final processing.                                                       // 148\n\t         *                                                                                                            // 149\n\t         * @example                                                                                                   // 150\n\t         *                                                                                                            // 151\n\t         *     var encrypted = cipher.finalize();                                                                     // 152\n\t         *     var encrypted = cipher.finalize('data');                                                               // 153\n\t         *     var encrypted = cipher.finalize(wordArray);                                                            // 154\n\t         */                                                                                                           // 155\n\t        finalize: function (dataUpdate) {                                                                             // 156\n\t            // Final data update                                                                                      // 157\n\t            if (dataUpdate) {                                                                                         // 158\n\t                this._append(dataUpdate);                                                                             // 159\n\t            }                                                                                                         // 160\n                                                                                                                       // 161\n\t            // Perform concrete-cipher logic                                                                          // 162\n\t            var finalProcessedData = this._doFinalize();                                                              // 163\n                                                                                                                       // 164\n\t            return finalProcessedData;                                                                                // 165\n\t        },                                                                                                            // 166\n                                                                                                                       // 167\n\t        keySize: 128/32,                                                                                              // 168\n                                                                                                                       // 169\n\t        ivSize: 128/32,                                                                                               // 170\n                                                                                                                       // 171\n\t        _ENC_XFORM_MODE: 1,                                                                                           // 172\n                                                                                                                       // 173\n\t        _DEC_XFORM_MODE: 2,                                                                                           // 174\n                                                                                                                       // 175\n\t        /**                                                                                                           // 176\n\t         * Creates shortcut functions to a cipher's object interface.                                                 // 177\n\t         *                                                                                                            // 178\n\t         * @param {Cipher} cipher The cipher to create a helper for.                                                  // 179\n\t         *                                                                                                            // 180\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.                                    // 181\n\t         *                                                                                                            // 182\n\t         * @static                                                                                                    // 183\n\t         *                                                                                                            // 184\n\t         * @example                                                                                                   // 185\n\t         *                                                                                                            // 186\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);                                        // 187\n\t         */                                                                                                           // 188\n\t        _createHelper: (function () {                                                                                 // 189\n\t            function selectCipherStrategy(key) {                                                                      // 190\n\t                if (typeof key == 'string') {                                                                         // 191\n\t                    return PasswordBasedCipher;                                                                       // 192\n\t                } else {                                                                                              // 193\n\t                    return SerializableCipher;                                                                        // 194\n\t                }                                                                                                     // 195\n\t            }                                                                                                         // 196\n                                                                                                                       // 197\n\t            return function (cipher) {                                                                                // 198\n\t                return {                                                                                              // 199\n\t                    encrypt: function (message, key, cfg) {                                                           // 200\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);                          // 201\n\t                    },                                                                                                // 202\n                                                                                                                       // 203\n\t                    decrypt: function (ciphertext, key, cfg) {                                                        // 204\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);                       // 205\n\t                    }                                                                                                 // 206\n\t                };                                                                                                    // 207\n\t            };                                                                                                        // 208\n\t        }())                                                                                                          // 209\n\t    });                                                                                                               // 210\n                                                                                                                       // 211\n\t    /**                                                                                                               // 212\n\t     * Abstract base stream cipher template.                                                                          // 213\n\t     *                                                                                                                // 214\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)          // 215\n\t     */                                                                                                               // 216\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({                                                           // 217\n\t        _doFinalize: function () {                                                                                    // 218\n\t            // Process partial blocks                                                                                 // 219\n\t            var finalProcessedBlocks = this._process(!!'flush');                                                      // 220\n                                                                                                                       // 221\n\t            return finalProcessedBlocks;                                                                              // 222\n\t        },                                                                                                            // 223\n                                                                                                                       // 224\n\t        blockSize: 1                                                                                                  // 225\n\t    });                                                                                                               // 226\n                                                                                                                       // 227\n\t    /**                                                                                                               // 228\n\t     * Mode namespace.                                                                                                // 229\n\t     */                                                                                                               // 230\n\t    var C_mode = C.mode = {};                                                                                         // 231\n                                                                                                                       // 232\n\t    /**                                                                                                               // 233\n\t     * Abstract base block cipher mode template.                                                                      // 234\n\t     */                                                                                                               // 235\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({                                                       // 236\n\t        /**                                                                                                           // 237\n\t         * Creates this mode for encryption.                                                                          // 238\n\t         *                                                                                                            // 239\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 240\n\t         * @param {Array} iv The IV words.                                                                            // 241\n\t         *                                                                                                            // 242\n\t         * @static                                                                                                    // 243\n\t         *                                                                                                            // 244\n\t         * @example                                                                                                   // 245\n\t         *                                                                                                            // 246\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);                                        // 247\n\t         */                                                                                                           // 248\n\t        createEncryptor: function (cipher, iv) {                                                                      // 249\n\t            return this.Encryptor.create(cipher, iv);                                                                 // 250\n\t        },                                                                                                            // 251\n                                                                                                                       // 252\n\t        /**                                                                                                           // 253\n\t         * Creates this mode for decryption.                                                                          // 254\n\t         *                                                                                                            // 255\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 256\n\t         * @param {Array} iv The IV words.                                                                            // 257\n\t         *                                                                                                            // 258\n\t         * @static                                                                                                    // 259\n\t         *                                                                                                            // 260\n\t         * @example                                                                                                   // 261\n\t         *                                                                                                            // 262\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);                                        // 263\n\t         */                                                                                                           // 264\n\t        createDecryptor: function (cipher, iv) {                                                                      // 265\n\t            return this.Decryptor.create(cipher, iv);                                                                 // 266\n\t        },                                                                                                            // 267\n                                                                                                                       // 268\n\t        /**                                                                                                           // 269\n\t         * Initializes a newly created mode.                                                                          // 270\n\t         *                                                                                                            // 271\n\t         * @param {Cipher} cipher A block cipher instance.                                                            // 272\n\t         * @param {Array} iv The IV words.                                                                            // 273\n\t         *                                                                                                            // 274\n\t         * @example                                                                                                   // 275\n\t         *                                                                                                            // 276\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);                                       // 277\n\t         */                                                                                                           // 278\n\t        init: function (cipher, iv) {                                                                                 // 279\n\t            this._cipher = cipher;                                                                                    // 280\n\t            this._iv = iv;                                                                                            // 281\n\t        }                                                                                                             // 282\n\t    });                                                                                                               // 283\n                                                                                                                       // 284\n\t    /**                                                                                                               // 285\n\t     * Cipher Block Chaining mode.                                                                                    // 286\n\t     */                                                                                                               // 287\n\t    var CBC = C_mode.CBC = (function () {                                                                             // 288\n\t        /**                                                                                                           // 289\n\t         * Abstract base CBC mode.                                                                                    // 290\n\t         */                                                                                                           // 291\n\t        var CBC = BlockCipherMode.extend();                                                                           // 292\n                                                                                                                       // 293\n\t        /**                                                                                                           // 294\n\t         * CBC encryptor.                                                                                             // 295\n\t         */                                                                                                           // 296\n\t        CBC.Encryptor = CBC.extend({                                                                                  // 297\n\t            /**                                                                                                       // 298\n\t             * Processes the data block at offset.                                                                    // 299\n\t             *                                                                                                        // 300\n\t             * @param {Array} words The data words to operate on.                                                     // 301\n\t             * @param {number} offset The offset where the block starts.                                              // 302\n\t             *                                                                                                        // 303\n\t             * @example                                                                                               // 304\n\t             *                                                                                                        // 305\n\t             *     mode.processBlock(data.words, offset);                                                             // 306\n\t             */                                                                                                       // 307\n\t            processBlock: function (words, offset) {                                                                  // 308\n\t                // Shortcuts                                                                                          // 309\n\t                var cipher = this._cipher;                                                                            // 310\n\t                var blockSize = cipher.blockSize;                                                                     // 311\n                                                                                                                       // 312\n\t                // XOR and encrypt                                                                                    // 313\n\t                xorBlock.call(this, words, offset, blockSize);                                                        // 314\n\t                cipher.encryptBlock(words, offset);                                                                   // 315\n                                                                                                                       // 316\n\t                // Remember this block to use with next block                                                         // 317\n\t                this._prevBlock = words.slice(offset, offset + blockSize);                                            // 318\n\t            }                                                                                                         // 319\n\t        });                                                                                                           // 320\n                                                                                                                       // 321\n\t        /**                                                                                                           // 322\n\t         * CBC decryptor.                                                                                             // 323\n\t         */                                                                                                           // 324\n\t        CBC.Decryptor = CBC.extend({                                                                                  // 325\n\t            /**                                                                                                       // 326\n\t             * Processes the data block at offset.                                                                    // 327\n\t             *                                                                                                        // 328\n\t             * @param {Array} words The data words to operate on.                                                     // 329\n\t             * @param {number} offset The offset where the block starts.                                              // 330\n\t             *                                                                                                        // 331\n\t             * @example                                                                                               // 332\n\t             *                                                                                                        // 333\n\t             *     mode.processBlock(data.words, offset);                                                             // 334\n\t             */                                                                                                       // 335\n\t            processBlock: function (words, offset) {                                                                  // 336\n\t                // Shortcuts                                                                                          // 337\n\t                var cipher = this._cipher;                                                                            // 338\n\t                var blockSize = cipher.blockSize;                                                                     // 339\n                                                                                                                       // 340\n\t                // Remember this block to use with next block                                                         // 341\n\t                var thisBlock = words.slice(offset, offset + blockSize);                                              // 342\n                                                                                                                       // 343\n\t                // Decrypt and XOR                                                                                    // 344\n\t                cipher.decryptBlock(words, offset);                                                                   // 345\n\t                xorBlock.call(this, words, offset, blockSize);                                                        // 346\n                                                                                                                       // 347\n\t                // This block becomes the previous block                                                              // 348\n\t                this._prevBlock = thisBlock;                                                                          // 349\n\t            }                                                                                                         // 350\n\t        });                                                                                                           // 351\n                                                                                                                       // 352\n\t        function xorBlock(words, offset, blockSize) {                                                                 // 353\n\t            // Shortcut                                                                                               // 354\n\t            var iv = this._iv;                                                                                        // 355\n                                                                                                                       // 356\n\t            // Choose mixing block                                                                                    // 357\n\t            if (iv) {                                                                                                 // 358\n\t                var block = iv;                                                                                       // 359\n                                                                                                                       // 360\n\t                // Remove IV for subsequent blocks                                                                    // 361\n\t                this._iv = undefined;                                                                                 // 362\n\t            } else {                                                                                                  // 363\n\t                var block = this._prevBlock;                                                                          // 364\n\t            }                                                                                                         // 365\n                                                                                                                       // 366\n\t            // XOR blocks                                                                                             // 367\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 368\n\t                words[offset + i] ^= block[i];                                                                        // 369\n\t            }                                                                                                         // 370\n\t        }                                                                                                             // 371\n                                                                                                                       // 372\n\t        return CBC;                                                                                                   // 373\n\t    }());                                                                                                             // 374\n                                                                                                                       // 375\n\t    /**                                                                                                               // 376\n\t     * Padding namespace.                                                                                             // 377\n\t     */                                                                                                               // 378\n\t    var C_pad = C.pad = {};                                                                                           // 379\n                                                                                                                       // 380\n\t    /**                                                                                                               // 381\n\t     * PKCS #5/7 padding strategy.                                                                                    // 382\n\t     */                                                                                                               // 383\n\t    var Pkcs7 = C_pad.Pkcs7 = {                                                                                       // 384\n\t        /**                                                                                                           // 385\n\t         * Pads data using the algorithm defined in PKCS #5/7.                                                        // 386\n\t         *                                                                                                            // 387\n\t         * @param {WordArray} data The data to pad.                                                                   // 388\n\t         * @param {number} blockSize The multiple that the data should be padded to.                                  // 389\n\t         *                                                                                                            // 390\n\t         * @static                                                                                                    // 391\n\t         *                                                                                                            // 392\n\t         * @example                                                                                                   // 393\n\t         *                                                                                                            // 394\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);                                                                  // 395\n\t         */                                                                                                           // 396\n\t        pad: function (data, blockSize) {                                                                             // 397\n\t            // Shortcut                                                                                               // 398\n\t            var blockSizeBytes = blockSize * 4;                                                                       // 399\n                                                                                                                       // 400\n\t            // Count padding bytes                                                                                    // 401\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                      // 402\n                                                                                                                       // 403\n\t            // Create padding word                                                                                    // 404\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;   // 405\n                                                                                                                       // 406\n\t            // Create padding                                                                                         // 407\n\t            var paddingWords = [];                                                                                    // 408\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {                                                              // 409\n\t                paddingWords.push(paddingWord);                                                                       // 410\n\t            }                                                                                                         // 411\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);                                              // 412\n                                                                                                                       // 413\n\t            // Add padding                                                                                            // 414\n\t            data.concat(padding);                                                                                     // 415\n\t        },                                                                                                            // 416\n                                                                                                                       // 417\n\t        /**                                                                                                           // 418\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.                                 // 419\n\t         *                                                                                                            // 420\n\t         * @param {WordArray} data The data to unpad.                                                                 // 421\n\t         *                                                                                                            // 422\n\t         * @static                                                                                                    // 423\n\t         *                                                                                                            // 424\n\t         * @example                                                                                                   // 425\n\t         *                                                                                                            // 426\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);                                                                   // 427\n\t         */                                                                                                           // 428\n\t        unpad: function (data) {                                                                                      // 429\n\t            // Get number of padding bytes from last byte                                                             // 430\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                         // 431\n                                                                                                                       // 432\n\t            // Remove padding                                                                                         // 433\n\t            data.sigBytes -= nPaddingBytes;                                                                           // 434\n\t        }                                                                                                             // 435\n\t    };                                                                                                                // 436\n                                                                                                                       // 437\n\t    /**                                                                                                               // 438\n\t     * Abstract base block cipher template.                                                                           // 439\n\t     *                                                                                                                // 440\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)         // 441\n\t     */                                                                                                               // 442\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({                                                             // 443\n\t        /**                                                                                                           // 444\n\t         * Configuration options.                                                                                     // 445\n\t         *                                                                                                            // 446\n\t         * @property {Mode} mode The block mode to use. Default: CBC                                                  // 447\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7                                    // 448\n\t         */                                                                                                           // 449\n\t        cfg: Cipher.cfg.extend({                                                                                      // 450\n\t            mode: CBC,                                                                                                // 451\n\t            padding: Pkcs7                                                                                            // 452\n\t        }),                                                                                                           // 453\n                                                                                                                       // 454\n\t        reset: function () {                                                                                          // 455\n\t            // Reset cipher                                                                                           // 456\n\t            Cipher.reset.call(this);                                                                                  // 457\n                                                                                                                       // 458\n\t            // Shortcuts                                                                                              // 459\n\t            var cfg = this.cfg;                                                                                       // 460\n\t            var iv = cfg.iv;                                                                                          // 461\n\t            var mode = cfg.mode;                                                                                      // 462\n                                                                                                                       // 463\n\t            // Reset block mode                                                                                       // 464\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 465\n\t                var modeCreator = mode.createEncryptor;                                                               // 466\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 467\n\t                var modeCreator = mode.createDecryptor;                                                               // 468\n                                                                                                                       // 469\n\t                // Keep at least one block in the buffer for unpadding                                                // 470\n\t                this._minBufferSize = 1;                                                                              // 471\n\t            }                                                                                                         // 472\n\t            this._mode = modeCreator.call(mode, this, iv && iv.words);                                                // 473\n\t        },                                                                                                            // 474\n                                                                                                                       // 475\n\t        _doProcessBlock: function (words, offset) {                                                                   // 476\n\t            this._mode.processBlock(words, offset);                                                                   // 477\n\t        },                                                                                                            // 478\n                                                                                                                       // 479\n\t        _doFinalize: function () {                                                                                    // 480\n\t            // Shortcut                                                                                               // 481\n\t            var padding = this.cfg.padding;                                                                           // 482\n                                                                                                                       // 483\n\t            // Finalize                                                                                               // 484\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {                                                            // 485\n\t                // Pad data                                                                                           // 486\n\t                padding.pad(this._data, this.blockSize);                                                              // 487\n                                                                                                                       // 488\n\t                // Process final blocks                                                                               // 489\n\t                var finalProcessedBlocks = this._process(!!'flush');                                                  // 490\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {                                               // 491\n\t                // Process final blocks                                                                               // 492\n\t                var finalProcessedBlocks = this._process(!!'flush');                                                  // 493\n                                                                                                                       // 494\n\t                // Unpad data                                                                                         // 495\n\t                padding.unpad(finalProcessedBlocks);                                                                  // 496\n\t            }                                                                                                         // 497\n                                                                                                                       // 498\n\t            return finalProcessedBlocks;                                                                              // 499\n\t        },                                                                                                            // 500\n                                                                                                                       // 501\n\t        blockSize: 128/32                                                                                             // 502\n\t    });                                                                                                               // 503\n                                                                                                                       // 504\n\t    /**                                                                                                               // 505\n\t     * A collection of cipher parameters.                                                                             // 506\n\t     *                                                                                                                // 507\n\t     * @property {WordArray} ciphertext The raw ciphertext.                                                           // 508\n\t     * @property {WordArray} key The key to this ciphertext.                                                          // 509\n\t     * @property {WordArray} iv The IV used in the ciphering operation.                                               // 510\n\t     * @property {WordArray} salt The salt used with a key derivation function.                                       // 511\n\t     * @property {Cipher} algorithm The cipher algorithm.                                                             // 512\n\t     * @property {Mode} mode The block mode used in the ciphering operation.                                          // 513\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.                                // 514\n\t     * @property {number} blockSize The block size of the cipher.                                                     // 515\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */                                                                                                               // 517\n\t    var CipherParams = C_lib.CipherParams = Base.extend({                                                             // 518\n\t        /**                                                                                                           // 519\n\t         * Initializes a newly created cipher params object.                                                          // 520\n\t         *                                                                                                            // 521\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.                         // 522\n\t         *                                                                                                            // 523\n\t         * @example                                                                                                   // 524\n\t         *                                                                                                            // 525\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({                                                  // 526\n\t         *         ciphertext: ciphertextWordArray,                                                                   // 527\n\t         *         key: keyWordArray,                                                                                 // 528\n\t         *         iv: ivWordArray,                                                                                   // 529\n\t         *         salt: saltWordArray,                                                                               // 530\n\t         *         algorithm: CryptoJS.algo.AES,                                                                      // 531\n\t         *         mode: CryptoJS.mode.CBC,                                                                           // 532\n\t         *         padding: CryptoJS.pad.PKCS7,                                                                       // 533\n\t         *         blockSize: 4,                                                                                      // 534\n\t         *         formatter: CryptoJS.format.OpenSSL                                                                 // 535\n\t         *     });                                                                                                    // 536\n\t         */                                                                                                           // 537\n\t        init: function (cipherParams) {                                                                               // 538\n\t            this.mixIn(cipherParams);                                                                                 // 539\n\t        },                                                                                                            // 540\n                                                                                                                       // 541\n\t        /**                                                                                                           // 542\n\t         * Converts this cipher params object to a string.                                                            // 543\n\t         *                                                                                                            // 544\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.                                       // 545\n\t         *                                                                                                            // 546\n\t         * @return {string} The stringified cipher params.                                                            // 547\n\t         *                                                                                                            // 548\n\t         * @throws Error If neither the formatter nor the default formatter is set.                                   // 549\n\t         *                                                                                                            // 550\n\t         * @example                                                                                                   // 551\n\t         *                                                                                                            // 552\n\t         *     var string = cipherParams + '';                                                                        // 553\n\t         *     var string = cipherParams.toString();                                                                  // 554\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);                                           // 555\n\t         */                                                                                                           // 556\n\t        toString: function (formatter) {                                                                              // 557\n\t            return (formatter || this.formatter).stringify(this);                                                     // 558\n\t        }                                                                                                             // 559\n\t    });                                                                                                               // 560\n                                                                                                                       // 561\n\t    /**                                                                                                               // 562\n\t     * Format namespace.                                                                                              // 563\n\t     */                                                                                                               // 564\n\t    var C_format = C.format = {};                                                                                     // 565\n                                                                                                                       // 566\n\t    /**                                                                                                               // 567\n\t     * OpenSSL formatting strategy.                                                                                   // 568\n\t     */                                                                                                               // 569\n\t    var OpenSSLFormatter = C_format.OpenSSL = {                                                                       // 570\n\t        /**                                                                                                           // 571\n\t         * Converts a cipher params object to an OpenSSL-compatible string.                                           // 572\n\t         *                                                                                                            // 573\n\t         * @param {CipherParams} cipherParams The cipher params object.                                               // 574\n\t         *                                                                                                            // 575\n\t         * @return {string} The OpenSSL-compatible string.                                                            // 576\n\t         *                                                                                                            // 577\n\t         * @static                                                                                                    // 578\n\t         *                                                                                                            // 579\n\t         * @example                                                                                                   // 580\n\t         *                                                                                                            // 581\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);                                   // 582\n\t         */                                                                                                           // 583\n\t        stringify: function (cipherParams) {                                                                          // 584\n\t            // Shortcuts                                                                                              // 585\n\t            var ciphertext = cipherParams.ciphertext;                                                                 // 586\n\t            var salt = cipherParams.salt;                                                                             // 587\n                                                                                                                       // 588\n\t            // Format                                                                                                 // 589\n\t            if (salt) {                                                                                               // 590\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);           // 591\n\t            } else {                                                                                                  // 592\n\t                var wordArray = ciphertext;                                                                           // 593\n\t            }                                                                                                         // 594\n                                                                                                                       // 595\n\t            return wordArray.toString(Base64);                                                                        // 596\n\t        },                                                                                                            // 597\n                                                                                                                       // 598\n\t        /**                                                                                                           // 599\n\t         * Converts an OpenSSL-compatible string to a cipher params object.                                           // 600\n\t         *                                                                                                            // 601\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.                                                  // 602\n\t         *                                                                                                            // 603\n\t         * @return {CipherParams} The cipher params object.                                                           // 604\n\t         *                                                                                                            // 605\n\t         * @static                                                                                                    // 606\n\t         *                                                                                                            // 607\n\t         * @example                                                                                                   // 608\n\t         *                                                                                                            // 609\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);                                       // 610\n\t         */                                                                                                           // 611\n\t        parse: function (openSSLStr) {                                                                                // 612\n\t            // Parse base64                                                                                           // 613\n\t            var ciphertext = Base64.parse(openSSLStr);                                                                // 614\n                                                                                                                       // 615\n\t            // Shortcut                                                                                               // 616\n\t            var ciphertextWords = ciphertext.words;                                                                   // 617\n                                                                                                                       // 618\n\t            // Test for salt                                                                                          // 619\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {                               // 620\n\t                // Extract salt                                                                                       // 621\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));                                             // 622\n                                                                                                                       // 623\n\t                // Remove salt from ciphertext                                                                        // 624\n\t                ciphertextWords.splice(0, 4);                                                                         // 625\n\t                ciphertext.sigBytes -= 16;                                                                            // 626\n\t            }                                                                                                         // 627\n                                                                                                                       // 628\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });                                       // 629\n\t        }                                                                                                             // 630\n\t    };                                                                                                                // 631\n                                                                                                                       // 632\n\t    /**                                                                                                               // 633\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.                               // 634\n\t     */                                                                                                               // 635\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({                                                 // 636\n\t        /**                                                                                                           // 637\n\t         * Configuration options.                                                                                     // 638\n\t         *                                                                                                            // 639\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */                                                                                                           // 641\n\t        cfg: Base.extend({                                                                                            // 642\n\t            format: OpenSSLFormatter                                                                                  // 643\n\t        }),                                                                                                           // 644\n                                                                                                                       // 645\n\t        /**                                                                                                           // 646\n\t         * Encrypts a message.                                                                                        // 647\n\t         *                                                                                                            // 648\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 649\n\t         * @param {WordArray|string} message The message to encrypt.                                                  // 650\n\t         * @param {WordArray} key The key.                                                                            // 651\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 652\n\t         *                                                                                                            // 653\n\t         * @return {CipherParams} A cipher params object.                                                             // 654\n\t         *                                                                                                            // 655\n\t         * @static                                                                                                    // 656\n\t         *                                                                                                            // 657\n\t         * @example                                                                                                   // 658\n\t         *                                                                                                            // 659\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);       // 660\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 663\n\t        encrypt: function (cipher, message, key, cfg) {                                                               // 664\n\t            // Apply config defaults                                                                                  // 665\n\t            cfg = this.cfg.extend(cfg);                                                                               // 666\n                                                                                                                       // 667\n\t            // Encrypt                                                                                                // 668\n\t            var encryptor = cipher.createEncryptor(key, cfg);                                                         // 669\n\t            var ciphertext = encryptor.finalize(message);                                                             // 670\n                                                                                                                       // 671\n\t            // Shortcut                                                                                               // 672\n\t            var cipherCfg = encryptor.cfg;                                                                            // 673\n                                                                                                                       // 674\n\t            // Create and return serializable cipher params                                                           // 675\n\t            return CipherParams.create({                                                                              // 676\n\t                ciphertext: ciphertext,                                                                               // 677\n\t                key: key,                                                                                             // 678\n\t                iv: cipherCfg.iv,                                                                                     // 679\n\t                algorithm: cipher,                                                                                    // 680\n\t                mode: cipherCfg.mode,                                                                                 // 681\n\t                padding: cipherCfg.padding,                                                                           // 682\n\t                blockSize: cipher.blockSize,                                                                          // 683\n\t                formatter: cfg.format                                                                                 // 684\n\t            });                                                                                                       // 685\n\t        },                                                                                                            // 686\n                                                                                                                       // 687\n\t        /**                                                                                                           // 688\n\t         * Decrypts serialized ciphertext.                                                                            // 689\n\t         *                                                                                                            // 690\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 691\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 692\n\t         * @param {WordArray} key The key.                                                                            // 693\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 694\n\t         *                                                                                                            // 695\n\t         * @return {WordArray} The plaintext.                                                                         // 696\n\t         *                                                                                                            // 697\n\t         * @static                                                                                                    // 698\n\t         *                                                                                                            // 699\n\t         * @example                                                                                                   // 700\n\t         *                                                                                                            // 701\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 704\n\t        decrypt: function (cipher, ciphertext, key, cfg) {                                                            // 705\n\t            // Apply config defaults                                                                                  // 706\n\t            cfg = this.cfg.extend(cfg);                                                                               // 707\n                                                                                                                       // 708\n\t            // Convert string to CipherParams                                                                         // 709\n\t            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 710\n                                                                                                                       // 711\n\t            // Decrypt                                                                                                // 712\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);                         // 713\n                                                                                                                       // 714\n\t            return plaintext;                                                                                         // 715\n\t        },                                                                                                            // 716\n                                                                                                                       // 717\n\t        /**                                                                                                           // 718\n\t         * Converts serialized ciphertext to CipherParams,                                                            // 719\n\t         * else assumed CipherParams already and returns ciphertext unchanged.                                        // 720\n\t         *                                                                                                            // 721\n\t         * @param {CipherParams|string} ciphertext The ciphertext.                                                    // 722\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.                   // 723\n\t         *                                                                                                            // 724\n\t         * @return {CipherParams} The unserialized ciphertext.                                                        // 725\n\t         *                                                                                                            // 726\n\t         * @static                                                                                                    // 727\n\t         *                                                                                                            // 728\n\t         * @example                                                                                                   // 729\n\t         *                                                                                                            // 730\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);       // 731\n\t         */                                                                                                           // 732\n\t        _parse: function (ciphertext, format) {                                                                       // 733\n\t            if (typeof ciphertext == 'string') {                                                                      // 734\n\t                return format.parse(ciphertext, this);                                                                // 735\n\t            } else {                                                                                                  // 736\n\t                return ciphertext;                                                                                    // 737\n\t            }                                                                                                         // 738\n\t        }                                                                                                             // 739\n\t    });                                                                                                               // 740\n                                                                                                                       // 741\n\t    /**                                                                                                               // 742\n\t     * Key derivation function namespace.                                                                             // 743\n\t     */                                                                                                               // 744\n\t    var C_kdf = C.kdf = {};                                                                                           // 745\n                                                                                                                       // 746\n\t    /**                                                                                                               // 747\n\t     * OpenSSL key derivation function.                                                                               // 748\n\t     */                                                                                                               // 749\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {                                                                                // 750\n\t        /**                                                                                                           // 751\n\t         * Derives a key and IV from a password.                                                                      // 752\n\t         *                                                                                                            // 753\n\t         * @param {string} password The password to derive from.                                                      // 754\n\t         * @param {number} keySize The size in words of the key to generate.                                          // 755\n\t         * @param {number} ivSize The size in words of the IV to generate.                                            // 756\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *                                                                                                            // 758\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.                                  // 759\n\t         *                                                                                                            // 760\n\t         * @static                                                                                                    // 761\n\t         *                                                                                                            // 762\n\t         * @example                                                                                                   // 763\n\t         *                                                                                                            // 764\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);                          // 765\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');              // 766\n\t         */                                                                                                           // 767\n\t        execute: function (password, keySize, ivSize, salt) {                                                         // 768\n\t            // Generate random salt                                                                                   // 769\n\t            if (!salt) {                                                                                              // 770\n\t                salt = WordArray.random(64/8);                                                                        // 771\n\t            }                                                                                                         // 772\n                                                                                                                       // 773\n\t            // Derive key and IV                                                                                      // 774\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);                           // 775\n                                                                                                                       // 776\n\t            // Separate key and IV                                                                                    // 777\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);                                          // 778\n\t            key.sigBytes = keySize * 4;                                                                               // 779\n                                                                                                                       // 780\n\t            // Return params                                                                                          // 781\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });                                             // 782\n\t        }                                                                                                             // 783\n\t    };                                                                                                                // 784\n                                                                                                                       // 785\n\t    /**                                                                                                               // 786\n\t     * A serializable cipher wrapper that derives the key from a password,                                            // 787\n\t     * and returns ciphertext as a serializable cipher params object.                                                 // 788\n\t     */                                                                                                               // 789\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({                                 // 790\n\t        /**                                                                                                           // 791\n\t         * Configuration options.                                                                                     // 792\n\t         *                                                                                                            // 793\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */                                                                                                           // 795\n\t        cfg: SerializableCipher.cfg.extend({                                                                          // 796\n\t            kdf: OpenSSLKdf                                                                                           // 797\n\t        }),                                                                                                           // 798\n                                                                                                                       // 799\n\t        /**                                                                                                           // 800\n\t         * Encrypts a message using a password.                                                                       // 801\n\t         *                                                                                                            // 802\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 803\n\t         * @param {WordArray|string} message The message to encrypt.                                                  // 804\n\t         * @param {string} password The password.                                                                     // 805\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 806\n\t         *                                                                                                            // 807\n\t         * @return {CipherParams} A cipher params object.                                                             // 808\n\t         *                                                                                                            // 809\n\t         * @static                                                                                                    // 810\n\t         *                                                                                                            // 811\n\t         * @example                                                                                                   // 812\n\t         *                                                                                                            // 813\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 816\n\t        encrypt: function (cipher, message, password, cfg) {                                                          // 817\n\t            // Apply config defaults                                                                                  // 818\n\t            cfg = this.cfg.extend(cfg);                                                                               // 819\n                                                                                                                       // 820\n\t            // Derive key and other params                                                                            // 821\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);                             // 822\n                                                                                                                       // 823\n\t            // Add IV to config                                                                                       // 824\n\t            cfg.iv = derivedParams.iv;                                                                                // 825\n                                                                                                                       // 826\n\t            // Encrypt                                                                                                // 827\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);          // 828\n                                                                                                                       // 829\n\t            // Mix in derived params                                                                                  // 830\n\t            ciphertext.mixIn(derivedParams);                                                                          // 831\n                                                                                                                       // 832\n\t            return ciphertext;                                                                                        // 833\n\t        },                                                                                                            // 834\n                                                                                                                       // 835\n\t        /**                                                                                                           // 836\n\t         * Decrypts serialized ciphertext using a password.                                                           // 837\n\t         *                                                                                                            // 838\n\t         * @param {Cipher} cipher The cipher algorithm to use.                                                        // 839\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.                                         // 840\n\t         * @param {string} password The password.                                                                     // 841\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.                        // 842\n\t         *                                                                                                            // 843\n\t         * @return {WordArray} The plaintext.                                                                         // 844\n\t         *                                                                                                            // 845\n\t         * @static                                                                                                    // 846\n\t         *                                                                                                            // 847\n\t         * @example                                                                                                   // 848\n\t         *                                                                                                            // 849\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */                                                                                                           // 852\n\t        decrypt: function (cipher, ciphertext, password, cfg) {                                                       // 853\n\t            // Apply config defaults                                                                                  // 854\n\t            cfg = this.cfg.extend(cfg);                                                                               // 855\n                                                                                                                       // 856\n\t            // Convert string to CipherParams                                                                         // 857\n\t            ciphertext = this._parse(ciphertext, cfg.format);                                                         // 858\n                                                                                                                       // 859\n\t            // Derive key and other params                                                                            // 860\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);            // 861\n                                                                                                                       // 862\n\t            // Add IV to config                                                                                       // 863\n\t            cfg.iv = derivedParams.iv;                                                                                // 864\n                                                                                                                       // 865\n\t            // Decrypt                                                                                                // 866\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);        // 867\n                                                                                                                       // 868\n\t            return plaintext;                                                                                         // 869\n\t        }                                                                                                             // 870\n\t    });                                                                                                               // 871\n\t}());                                                                                                                 // 872\n                                                                                                                       // 873\n                                                                                                                       // 874\n}));                                                                                                                   // 875\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mode-cfb.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/mode-cfb.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Cipher Feedback block mode.                                                                                        // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.mode.CFB = (function () {                                                                                    // 19\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 20\n                                                                                                                       // 21\n\t    CFB.Encryptor = CFB.extend({                                                                                      // 22\n\t        processBlock: function (words, offset) {                                                                      // 23\n\t            // Shortcuts                                                                                              // 24\n\t            var cipher = this._cipher;                                                                                // 25\n\t            var blockSize = cipher.blockSize;                                                                         // 26\n                                                                                                                       // 27\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 28\n                                                                                                                       // 29\n\t            // Remember this block to use with next block                                                             // 30\n\t            this._prevBlock = words.slice(offset, offset + blockSize);                                                // 31\n\t        }                                                                                                             // 32\n\t    });                                                                                                               // 33\n                                                                                                                       // 34\n\t    CFB.Decryptor = CFB.extend({                                                                                      // 35\n\t        processBlock: function (words, offset) {                                                                      // 36\n\t            // Shortcuts                                                                                              // 37\n\t            var cipher = this._cipher;                                                                                // 38\n\t            var blockSize = cipher.blockSize;                                                                         // 39\n                                                                                                                       // 40\n\t            // Remember this block to use with next block                                                             // 41\n\t            var thisBlock = words.slice(offset, offset + blockSize);                                                  // 42\n                                                                                                                       // 43\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);                                 // 44\n                                                                                                                       // 45\n\t            // This block becomes the previous block                                                                  // 46\n\t            this._prevBlock = thisBlock;                                                                              // 47\n\t        }                                                                                                             // 48\n\t    });                                                                                                               // 49\n                                                                                                                       // 50\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {                                          // 51\n\t        // Shortcut                                                                                                   // 52\n\t        var iv = this._iv;                                                                                            // 53\n                                                                                                                       // 54\n\t        // Generate keystream                                                                                         // 55\n\t        if (iv) {                                                                                                     // 56\n\t            var keystream = iv.slice(0);                                                                              // 57\n                                                                                                                       // 58\n\t            // Remove IV for subsequent blocks                                                                        // 59\n\t            this._iv = undefined;                                                                                     // 60\n\t        } else {                                                                                                      // 61\n\t            var keystream = this._prevBlock;                                                                          // 62\n\t        }                                                                                                             // 63\n\t        cipher.encryptBlock(keystream, 0);                                                                            // 64\n                                                                                                                       // 65\n\t        // Encrypt                                                                                                    // 66\n\t        for (var i = 0; i < blockSize; i++) {                                                                         // 67\n\t            words[offset + i] ^= keystream[i];                                                                        // 68\n\t        }                                                                                                             // 69\n\t    }                                                                                                                 // 70\n                                                                                                                       // 71\n\t    return CFB;                                                                                                       // 72\n\t}());                                                                                                                 // 73\n                                                                                                                       // 74\n                                                                                                                       // 75\n\treturn CryptoJS.mode.CFB;                                                                                             // 76\n                                                                                                                       // 77\n}));                                                                                                                   // 78\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mode-ctr.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/mode-ctr.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Counter block mode.                                                                                                // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.mode.CTR = (function () {                                                                                    // 19\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 20\n                                                                                                                       // 21\n\t    var Encryptor = CTR.Encryptor = CTR.extend({                                                                      // 22\n\t        processBlock: function (words, offset) {                                                                      // 23\n\t            // Shortcuts                                                                                              // 24\n\t            var cipher = this._cipher                                                                                 // 25\n\t            var blockSize = cipher.blockSize;                                                                         // 26\n\t            var iv = this._iv;                                                                                        // 27\n\t            var counter = this._counter;                                                                              // 28\n                                                                                                                       // 29\n\t            // Generate keystream                                                                                     // 30\n\t            if (iv) {                                                                                                 // 31\n\t                counter = this._counter = iv.slice(0);                                                                // 32\n                                                                                                                       // 33\n\t                // Remove IV for subsequent blocks                                                                    // 34\n\t                this._iv = undefined;                                                                                 // 35\n\t            }                                                                                                         // 36\n\t            var keystream = counter.slice(0);                                                                         // 37\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 38\n                                                                                                                       // 39\n\t            // Increment counter                                                                                      // 40\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0                                                 // 41\n                                                                                                                       // 42\n\t            // Encrypt                                                                                                // 43\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 44\n\t                words[offset + i] ^= keystream[i];                                                                    // 45\n\t            }                                                                                                         // 46\n\t        }                                                                                                             // 47\n\t    });                                                                                                               // 48\n                                                                                                                       // 49\n\t    CTR.Decryptor = Encryptor;                                                                                        // 50\n                                                                                                                       // 51\n\t    return CTR;                                                                                                       // 52\n\t}());                                                                                                                 // 53\n                                                                                                                       // 54\n                                                                                                                       // 55\n\treturn CryptoJS.mode.CTR;                                                                                             // 56\n                                                                                                                       // 57\n}));                                                                                                                   // 58\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mode-ctr-gladman.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/mode-ctr-gladman.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/** @preserve                                                                                                         // 16\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c                                                     // 17\n\t * derived from CryptoJS.mode.CTR                                                                                     // 18\n\t * Jan Hruby jhruby.web@gmail.com                                                                                     // 19\n\t */                                                                                                                   // 20\n\tCryptoJS.mode.CTRGladman = (function () {                                                                             // 21\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();                                                           // 22\n                                                                                                                       // 23\n\t\tfunction incWord(word)                                                                                               // 24\n\t\t{                                                                                                                    // 25\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow                                                                    // 26\n\t\t\tvar b1 = (word >> 16)&0xff;                                                                                         // 27\n\t\t\tvar b2 = (word >> 8)&0xff;                                                                                          // 28\n\t\t\tvar b3 = word & 0xff;                                                                                               // 29\n                                                                                                                       // 30\n\t\t\tif (b1 === 0xff) // overflow b1                                                                                     // 31\n\t\t\t{                                                                                                                   // 32\n\t\t\tb1 = 0;                                                                                                             // 33\n\t\t\tif (b2 === 0xff)                                                                                                    // 34\n\t\t\t{                                                                                                                   // 35\n\t\t\t\tb2 = 0;                                                                                                            // 36\n\t\t\t\tif (b3 === 0xff)                                                                                                   // 37\n\t\t\t\t{                                                                                                                  // 38\n\t\t\t\t\tb3 = 0;                                                                                                           // 39\n\t\t\t\t}                                                                                                                  // 40\n\t\t\t\telse                                                                                                               // 41\n\t\t\t\t{                                                                                                                  // 42\n\t\t\t\t\t++b3;                                                                                                             // 43\n\t\t\t\t}                                                                                                                  // 44\n\t\t\t}                                                                                                                   // 45\n\t\t\telse                                                                                                                // 46\n\t\t\t{                                                                                                                   // 47\n\t\t\t\t++b2;                                                                                                              // 48\n\t\t\t}                                                                                                                   // 49\n\t\t\t}                                                                                                                   // 50\n\t\t\telse                                                                                                                // 51\n\t\t\t{                                                                                                                   // 52\n\t\t\t++b1;                                                                                                               // 53\n\t\t\t}                                                                                                                   // 54\n                                                                                                                       // 55\n\t\t\tword = 0;                                                                                                           // 56\n\t\t\tword += (b1 << 16);                                                                                                 // 57\n\t\t\tword += (b2 << 8);                                                                                                  // 58\n\t\t\tword += b3;                                                                                                         // 59\n\t\t\t}                                                                                                                   // 60\n\t\t\telse                                                                                                                // 61\n\t\t\t{                                                                                                                   // 62\n\t\t\tword += (0x01 << 24);                                                                                               // 63\n\t\t\t}                                                                                                                   // 64\n\t\t\treturn word;                                                                                                        // 65\n\t\t}                                                                                                                    // 66\n                                                                                                                       // 67\n\t\tfunction incCounter(counter)                                                                                         // 68\n\t\t{                                                                                                                    // 69\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)                                                                       // 70\n\t\t\t{                                                                                                                   // 71\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8                                    // 72\n\t\t\t\tcounter[1] = incWord(counter[1]);                                                                                  // 73\n\t\t\t}                                                                                                                   // 74\n\t\t\treturn counter;                                                                                                     // 75\n\t\t}                                                                                                                    // 76\n                                                                                                                       // 77\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({                                                        // 78\n\t        processBlock: function (words, offset) {                                                                      // 79\n\t            // Shortcuts                                                                                              // 80\n\t            var cipher = this._cipher                                                                                 // 81\n\t            var blockSize = cipher.blockSize;                                                                         // 82\n\t            var iv = this._iv;                                                                                        // 83\n\t            var counter = this._counter;                                                                              // 84\n                                                                                                                       // 85\n\t            // Generate keystream                                                                                     // 86\n\t            if (iv) {                                                                                                 // 87\n\t                counter = this._counter = iv.slice(0);                                                                // 88\n                                                                                                                       // 89\n\t                // Remove IV for subsequent blocks                                                                    // 90\n\t                this._iv = undefined;                                                                                 // 91\n\t            }                                                                                                         // 92\n                                                                                                                       // 93\n\t\t\t\tincCounter(counter);                                                                                               // 94\n                                                                                                                       // 95\n\t\t\t\tvar keystream = counter.slice(0);                                                                                  // 96\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 97\n                                                                                                                       // 98\n\t            // Encrypt                                                                                                // 99\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 100\n\t                words[offset + i] ^= keystream[i];                                                                    // 101\n\t            }                                                                                                         // 102\n\t        }                                                                                                             // 103\n\t    });                                                                                                               // 104\n                                                                                                                       // 105\n\t    CTRGladman.Decryptor = Encryptor;                                                                                 // 106\n                                                                                                                       // 107\n\t    return CTRGladman;                                                                                                // 108\n\t}());                                                                                                                 // 109\n                                                                                                                       // 110\n                                                                                                                       // 111\n                                                                                                                       // 112\n                                                                                                                       // 113\n\treturn CryptoJS.mode.CTRGladman;                                                                                      // 114\n                                                                                                                       // 115\n}));                                                                                                                   // 116\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mode-ofb.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/mode-ofb.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Output Feedback block mode.                                                                                        // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.mode.OFB = (function () {                                                                                    // 19\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 20\n                                                                                                                       // 21\n\t    var Encryptor = OFB.Encryptor = OFB.extend({                                                                      // 22\n\t        processBlock: function (words, offset) {                                                                      // 23\n\t            // Shortcuts                                                                                              // 24\n\t            var cipher = this._cipher                                                                                 // 25\n\t            var blockSize = cipher.blockSize;                                                                         // 26\n\t            var iv = this._iv;                                                                                        // 27\n\t            var keystream = this._keystream;                                                                          // 28\n                                                                                                                       // 29\n\t            // Generate keystream                                                                                     // 30\n\t            if (iv) {                                                                                                 // 31\n\t                keystream = this._keystream = iv.slice(0);                                                            // 32\n                                                                                                                       // 33\n\t                // Remove IV for subsequent blocks                                                                    // 34\n\t                this._iv = undefined;                                                                                 // 35\n\t            }                                                                                                         // 36\n\t            cipher.encryptBlock(keystream, 0);                                                                        // 37\n                                                                                                                       // 38\n\t            // Encrypt                                                                                                // 39\n\t            for (var i = 0; i < blockSize; i++) {                                                                     // 40\n\t                words[offset + i] ^= keystream[i];                                                                    // 41\n\t            }                                                                                                         // 42\n\t        }                                                                                                             // 43\n\t    });                                                                                                               // 44\n                                                                                                                       // 45\n\t    OFB.Decryptor = Encryptor;                                                                                        // 46\n                                                                                                                       // 47\n\t    return OFB;                                                                                                       // 48\n\t}());                                                                                                                 // 49\n                                                                                                                       // 50\n                                                                                                                       // 51\n\treturn CryptoJS.mode.OFB;                                                                                             // 52\n                                                                                                                       // 53\n}));                                                                                                                   // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"mode-ecb.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/mode-ecb.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Electronic Codebook block mode.                                                                                    // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.mode.ECB = (function () {                                                                                    // 19\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();                                                                  // 20\n                                                                                                                       // 21\n\t    ECB.Encryptor = ECB.extend({                                                                                      // 22\n\t        processBlock: function (words, offset) {                                                                      // 23\n\t            this._cipher.encryptBlock(words, offset);                                                                 // 24\n\t        }                                                                                                             // 25\n\t    });                                                                                                               // 26\n                                                                                                                       // 27\n\t    ECB.Decryptor = ECB.extend({                                                                                      // 28\n\t        processBlock: function (words, offset) {                                                                      // 29\n\t            this._cipher.decryptBlock(words, offset);                                                                 // 30\n\t        }                                                                                                             // 31\n\t    });                                                                                                               // 32\n                                                                                                                       // 33\n\t    return ECB;                                                                                                       // 34\n\t}());                                                                                                                 // 35\n                                                                                                                       // 36\n                                                                                                                       // 37\n\treturn CryptoJS.mode.ECB;                                                                                             // 38\n                                                                                                                       // 39\n}));                                                                                                                   // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pad-ansix923.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pad-ansix923.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * ANSI X.923 padding strategy.                                                                                       // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.pad.AnsiX923 = {                                                                                             // 19\n\t    pad: function (data, blockSize) {                                                                                 // 20\n\t        // Shortcuts                                                                                                  // 21\n\t        var dataSigBytes = data.sigBytes;                                                                             // 22\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 23\n                                                                                                                       // 24\n\t        // Count padding bytes                                                                                        // 25\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;                                           // 26\n                                                                                                                       // 27\n\t        // Compute last byte position                                                                                 // 28\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;                                                           // 29\n                                                                                                                       // 30\n\t        // Pad                                                                                                        // 31\n\t        data.clamp();                                                                                                 // 32\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);                               // 33\n\t        data.sigBytes += nPaddingBytes;                                                                               // 34\n\t    },                                                                                                                // 35\n                                                                                                                       // 36\n\t    unpad: function (data) {                                                                                          // 37\n\t        // Get number of padding bytes from last byte                                                                 // 38\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 39\n                                                                                                                       // 40\n\t        // Remove padding                                                                                             // 41\n\t        data.sigBytes -= nPaddingBytes;                                                                               // 42\n\t    }                                                                                                                 // 43\n\t};                                                                                                                    // 44\n                                                                                                                       // 45\n                                                                                                                       // 46\n\treturn CryptoJS.pad.Ansix923;                                                                                         // 47\n                                                                                                                       // 48\n}));                                                                                                                   // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pad-iso10126.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pad-iso10126.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * ISO 10126 padding strategy.                                                                                        // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.pad.Iso10126 = {                                                                                             // 19\n\t    pad: function (data, blockSize) {                                                                                 // 20\n\t        // Shortcut                                                                                                   // 21\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 22\n                                                                                                                       // 23\n\t        // Count padding bytes                                                                                        // 24\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;                                          // 25\n                                                                                                                       // 26\n\t        // Pad                                                                                                        // 27\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).                                                // 28\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));                                         // 29\n\t    },                                                                                                                // 30\n                                                                                                                       // 31\n\t    unpad: function (data) {                                                                                          // 32\n\t        // Get number of padding bytes from last byte                                                                 // 33\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;                                             // 34\n                                                                                                                       // 35\n\t        // Remove padding                                                                                             // 36\n\t        data.sigBytes -= nPaddingBytes;                                                                               // 37\n\t    }                                                                                                                 // 38\n\t};                                                                                                                    // 39\n                                                                                                                       // 40\n                                                                                                                       // 41\n\treturn CryptoJS.pad.Iso10126;                                                                                         // 42\n                                                                                                                       // 43\n}));                                                                                                                   // 44\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pad-iso97971.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pad-iso97971.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * ISO/IEC 9797-1 Padding Method 2.                                                                                   // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.pad.Iso97971 = {                                                                                             // 19\n\t    pad: function (data, blockSize) {                                                                                 // 20\n\t        // Add 0x80 byte                                                                                              // 21\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));                                                  // 22\n                                                                                                                       // 23\n\t        // Zero pad the rest                                                                                          // 24\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);                                                                // 25\n\t    },                                                                                                                // 26\n                                                                                                                       // 27\n\t    unpad: function (data) {                                                                                          // 28\n\t        // Remove zero padding                                                                                        // 29\n\t        CryptoJS.pad.ZeroPadding.unpad(data);                                                                         // 30\n                                                                                                                       // 31\n\t        // Remove one more byte -- the 0x80 byte                                                                      // 32\n\t        data.sigBytes--;                                                                                              // 33\n\t    }                                                                                                                 // 34\n\t};                                                                                                                    // 35\n                                                                                                                       // 36\n                                                                                                                       // 37\n\treturn CryptoJS.pad.Iso97971;                                                                                         // 38\n                                                                                                                       // 39\n}));                                                                                                                   // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pad-zeropadding.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pad-zeropadding.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * Zero padding strategy.                                                                                             // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.pad.ZeroPadding = {                                                                                          // 19\n\t    pad: function (data, blockSize) {                                                                                 // 20\n\t        // Shortcut                                                                                                   // 21\n\t        var blockSizeBytes = blockSize * 4;                                                                           // 22\n                                                                                                                       // 23\n\t        // Pad                                                                                                        // 24\n\t        data.clamp();                                                                                                 // 25\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);                       // 26\n\t    },                                                                                                                // 27\n                                                                                                                       // 28\n\t    unpad: function (data) {                                                                                          // 29\n\t        // Shortcut                                                                                                   // 30\n\t        var dataWords = data.words;                                                                                   // 31\n                                                                                                                       // 32\n\t        // Unpad                                                                                                      // 33\n\t        var i = data.sigBytes - 1;                                                                                    // 34\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {                                               // 35\n\t            i--;                                                                                                      // 36\n\t        }                                                                                                             // 37\n\t        data.sigBytes = i + 1;                                                                                        // 38\n\t    }                                                                                                                 // 39\n\t};                                                                                                                    // 40\n                                                                                                                       // 41\n                                                                                                                       // 42\n\treturn CryptoJS.pad.ZeroPadding;                                                                                      // 43\n                                                                                                                       // 44\n}));                                                                                                                   // 45\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"pad-nopadding.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/pad-nopadding.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t/**                                                                                                                   // 16\n\t * A noop padding strategy.                                                                                           // 17\n\t */                                                                                                                   // 18\n\tCryptoJS.pad.NoPadding = {                                                                                            // 19\n\t    pad: function () {                                                                                                // 20\n\t    },                                                                                                                // 21\n                                                                                                                       // 22\n\t    unpad: function () {                                                                                              // 23\n\t    }                                                                                                                 // 24\n\t};                                                                                                                    // 25\n                                                                                                                       // 26\n                                                                                                                       // 27\n\treturn CryptoJS.pad.NoPadding;                                                                                        // 28\n                                                                                                                       // 29\n}));                                                                                                                   // 30\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"format-hex.js\":[\"./core\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/format-hex.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));                                     // 4\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);                                                                        // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function (undefined) {                                                                                               // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var CipherParams = C_lib.CipherParams;                                                                            // 20\n\t    var C_enc = C.enc;                                                                                                // 21\n\t    var Hex = C_enc.Hex;                                                                                              // 22\n\t    var C_format = C.format;                                                                                          // 23\n                                                                                                                       // 24\n\t    var HexFormatter = C_format.Hex = {                                                                               // 25\n\t        /**                                                                                                           // 26\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.                       // 27\n\t         *                                                                                                            // 28\n\t         * @param {CipherParams} cipherParams The cipher params object.                                               // 29\n\t         *                                                                                                            // 30\n\t         * @return {string} The hexadecimally encoded string.                                                         // 31\n\t         *                                                                                                            // 32\n\t         * @static                                                                                                    // 33\n\t         *                                                                                                            // 34\n\t         * @example                                                                                                   // 35\n\t         *                                                                                                            // 36\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);                                           // 37\n\t         */                                                                                                           // 38\n\t        stringify: function (cipherParams) {                                                                          // 39\n\t            return cipherParams.ciphertext.toString(Hex);                                                             // 40\n\t        },                                                                                                            // 41\n                                                                                                                       // 42\n\t        /**                                                                                                           // 43\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.                              // 44\n\t         *                                                                                                            // 45\n\t         * @param {string} input The hexadecimally encoded string.                                                    // 46\n\t         *                                                                                                            // 47\n\t         * @return {CipherParams} The cipher params object.                                                           // 48\n\t         *                                                                                                            // 49\n\t         * @static                                                                                                    // 50\n\t         *                                                                                                            // 51\n\t         * @example                                                                                                   // 52\n\t         *                                                                                                            // 53\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);                                               // 54\n\t         */                                                                                                           // 55\n\t        parse: function (input) {                                                                                     // 56\n\t            var ciphertext = Hex.parse(input);                                                                        // 57\n\t            return CipherParams.create({ ciphertext: ciphertext });                                                   // 58\n\t        }                                                                                                             // 59\n\t    };                                                                                                                // 60\n\t}());                                                                                                                 // 61\n                                                                                                                       // 62\n                                                                                                                       // 63\n\treturn CryptoJS.format.Hex;                                                                                           // 64\n                                                                                                                       // 65\n}));                                                                                                                   // 66\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"aes.js\":[\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/aes.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var BlockCipher = C_lib.BlockCipher;                                                                              // 20\n\t    var C_algo = C.algo;                                                                                              // 21\n                                                                                                                       // 22\n\t    // Lookup tables                                                                                                  // 23\n\t    var SBOX = [];                                                                                                    // 24\n\t    var INV_SBOX = [];                                                                                                // 25\n\t    var SUB_MIX_0 = [];                                                                                               // 26\n\t    var SUB_MIX_1 = [];                                                                                               // 27\n\t    var SUB_MIX_2 = [];                                                                                               // 28\n\t    var SUB_MIX_3 = [];                                                                                               // 29\n\t    var INV_SUB_MIX_0 = [];                                                                                           // 30\n\t    var INV_SUB_MIX_1 = [];                                                                                           // 31\n\t    var INV_SUB_MIX_2 = [];                                                                                           // 32\n\t    var INV_SUB_MIX_3 = [];                                                                                           // 33\n                                                                                                                       // 34\n\t    // Compute lookup tables                                                                                          // 35\n\t    (function () {                                                                                                    // 36\n\t        // Compute double table                                                                                       // 37\n\t        var d = [];                                                                                                   // 38\n\t        for (var i = 0; i < 256; i++) {                                                                               // 39\n\t            if (i < 128) {                                                                                            // 40\n\t                d[i] = i << 1;                                                                                        // 41\n\t            } else {                                                                                                  // 42\n\t                d[i] = (i << 1) ^ 0x11b;                                                                              // 43\n\t            }                                                                                                         // 44\n\t        }                                                                                                             // 45\n                                                                                                                       // 46\n\t        // Walk GF(2^8)                                                                                               // 47\n\t        var x = 0;                                                                                                    // 48\n\t        var xi = 0;                                                                                                   // 49\n\t        for (var i = 0; i < 256; i++) {                                                                               // 50\n\t            // Compute sbox                                                                                           // 51\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);                                              // 52\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;                                                                     // 53\n\t            SBOX[x] = sx;                                                                                             // 54\n\t            INV_SBOX[sx] = x;                                                                                         // 55\n                                                                                                                       // 56\n\t            // Compute multiplication                                                                                 // 57\n\t            var x2 = d[x];                                                                                            // 58\n\t            var x4 = d[x2];                                                                                           // 59\n\t            var x8 = d[x4];                                                                                           // 60\n                                                                                                                       // 61\n\t            // Compute sub bytes, mix columns tables                                                                  // 62\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);                                                               // 63\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);                                                                     // 64\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);                                                                    // 65\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);                                                                    // 66\n\t            SUB_MIX_3[x] = t;                                                                                         // 67\n                                                                                                                       // 68\n\t            // Compute inv sub bytes, inv mix columns tables                                                          // 69\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);                               // 70\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);                                                                // 71\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);                                                               // 72\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);                                                               // 73\n\t            INV_SUB_MIX_3[sx] = t;                                                                                    // 74\n                                                                                                                       // 75\n\t            // Compute next counter                                                                                   // 76\n\t            if (!x) {                                                                                                 // 77\n\t                x = xi = 1;                                                                                           // 78\n\t            } else {                                                                                                  // 79\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];                                                                            // 80\n\t                xi ^= d[d[xi]];                                                                                       // 81\n\t            }                                                                                                         // 82\n\t        }                                                                                                             // 83\n\t    }());                                                                                                             // 84\n                                                                                                                       // 85\n\t    // Precomputed Rcon lookup                                                                                        // 86\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];                                    // 87\n                                                                                                                       // 88\n\t    /**                                                                                                               // 89\n\t     * AES block cipher algorithm.                                                                                    // 90\n\t     */                                                                                                               // 91\n\t    var AES = C_algo.AES = BlockCipher.extend({                                                                       // 92\n\t        _doReset: function () {                                                                                       // 93\n\t            // Skip reset of nRounds has been set before and key did not change                                       // 94\n\t            if (this._nRounds && this._keyPriorReset === this._key) {                                                 // 95\n\t                return;                                                                                               // 96\n\t            }                                                                                                         // 97\n                                                                                                                       // 98\n\t            // Shortcuts                                                                                              // 99\n\t            var key = this._keyPriorReset = this._key;                                                                // 100\n\t            var keyWords = key.words;                                                                                 // 101\n\t            var keySize = key.sigBytes / 4;                                                                           // 102\n                                                                                                                       // 103\n\t            // Compute number of rounds                                                                               // 104\n\t            var nRounds = this._nRounds = keySize + 6;                                                                // 105\n                                                                                                                       // 106\n\t            // Compute number of key schedule rows                                                                    // 107\n\t            var ksRows = (nRounds + 1) * 4;                                                                           // 108\n                                                                                                                       // 109\n\t            // Compute key schedule                                                                                   // 110\n\t            var keySchedule = this._keySchedule = [];                                                                 // 111\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {                                                            // 112\n\t                if (ksRow < keySize) {                                                                                // 113\n\t                    keySchedule[ksRow] = keyWords[ksRow];                                                             // 114\n\t                } else {                                                                                              // 115\n\t                    var t = keySchedule[ksRow - 1];                                                                   // 116\n                                                                                                                       // 117\n\t                    if (!(ksRow % keySize)) {                                                                         // 118\n\t                        // Rot word                                                                                   // 119\n\t                        t = (t << 8) | (t >>> 24);                                                                    // 120\n                                                                                                                       // 121\n\t                        // Sub word                                                                                   // 122\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n                                                                                                                       // 124\n\t                        // Mix Rcon                                                                                   // 125\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;                                                       // 126\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {                                                 // 127\n\t                        // Sub word                                                                                   // 128\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }                                                                                                 // 130\n                                                                                                                       // 131\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;                                            // 132\n\t                }                                                                                                     // 133\n\t            }                                                                                                         // 134\n                                                                                                                       // 135\n\t            // Compute inv key schedule                                                                               // 136\n\t            var invKeySchedule = this._invKeySchedule = [];                                                           // 137\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {                                                   // 138\n\t                var ksRow = ksRows - invKsRow;                                                                        // 139\n                                                                                                                       // 140\n\t                if (invKsRow % 4) {                                                                                   // 141\n\t                    var t = keySchedule[ksRow];                                                                       // 142\n\t                } else {                                                                                              // 143\n\t                    var t = keySchedule[ksRow - 4];                                                                   // 144\n\t                }                                                                                                     // 145\n                                                                                                                       // 146\n\t                if (invKsRow < 4 || ksRow <= 4) {                                                                     // 147\n\t                    invKeySchedule[invKsRow] = t;                                                                     // 148\n\t                } else {                                                                                              // 149\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }                                                                                                     // 152\n\t            }                                                                                                         // 153\n\t        },                                                                                                            // 154\n                                                                                                                       // 155\n\t        encryptBlock: function (M, offset) {                                                                          // 156\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);       // 157\n\t        },                                                                                                            // 158\n                                                                                                                       // 159\n\t        decryptBlock: function (M, offset) {                                                                          // 160\n\t            // Swap 2nd and 4th rows                                                                                  // 161\n\t            var t = M[offset + 1];                                                                                    // 162\n\t            M[offset + 1] = M[offset + 3];                                                                            // 163\n\t            M[offset + 3] = t;                                                                                        // 164\n                                                                                                                       // 165\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n                                                                                                                       // 167\n\t            // Inv swap 2nd and 4th rows                                                                              // 168\n\t            var t = M[offset + 1];                                                                                    // 169\n\t            M[offset + 1] = M[offset + 3];                                                                            // 170\n\t            M[offset + 3] = t;                                                                                        // 171\n\t        },                                                                                                            // 172\n                                                                                                                       // 173\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {          // 174\n\t            // Shortcut                                                                                               // 175\n\t            var nRounds = this._nRounds;                                                                              // 176\n                                                                                                                       // 177\n\t            // Get input, add round key                                                                               // 178\n\t            var s0 = M[offset]     ^ keySchedule[0];                                                                  // 179\n\t            var s1 = M[offset + 1] ^ keySchedule[1];                                                                  // 180\n\t            var s2 = M[offset + 2] ^ keySchedule[2];                                                                  // 181\n\t            var s3 = M[offset + 3] ^ keySchedule[3];                                                                  // 182\n                                                                                                                       // 183\n\t            // Key schedule row counter                                                                               // 184\n\t            var ksRow = 4;                                                                                            // 185\n                                                                                                                       // 186\n\t            // Rounds                                                                                                 // 187\n\t            for (var round = 1; round < nRounds; round++) {                                                           // 188\n\t                // Shift rows, sub bytes, mix columns, add round key                                                  // 189\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n                                                                                                                       // 194\n\t                // Update state                                                                                       // 195\n\t                s0 = t0;                                                                                              // 196\n\t                s1 = t1;                                                                                              // 197\n\t                s2 = t2;                                                                                              // 198\n\t                s3 = t3;                                                                                              // 199\n\t            }                                                                                                         // 200\n                                                                                                                       // 201\n\t            // Shift rows, sub bytes, add round key                                                                   // 202\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n                                                                                                                       // 207\n\t            // Set output                                                                                             // 208\n\t            M[offset]     = t0;                                                                                       // 209\n\t            M[offset + 1] = t1;                                                                                       // 210\n\t            M[offset + 2] = t2;                                                                                       // 211\n\t            M[offset + 3] = t3;                                                                                       // 212\n\t        },                                                                                                            // 213\n                                                                                                                       // 214\n\t        keySize: 256/32                                                                                               // 215\n\t    });                                                                                                               // 216\n                                                                                                                       // 217\n\t    /**                                                                                                               // 218\n\t     * Shortcut functions to the cipher's object interface.                                                           // 219\n\t     *                                                                                                                // 220\n\t     * @example                                                                                                       // 221\n\t     *                                                                                                                // 222\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);                                                  // 223\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);                                               // 224\n\t     */                                                                                                               // 225\n\t    C.AES = BlockCipher._createHelper(AES);                                                                           // 226\n\t}());                                                                                                                 // 227\n                                                                                                                       // 228\n                                                                                                                       // 229\n\treturn CryptoJS.AES;                                                                                                  // 230\n                                                                                                                       // 231\n}));                                                                                                                   // 232\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"tripledes.js\":[\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/tripledes.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var WordArray = C_lib.WordArray;                                                                                  // 20\n\t    var BlockCipher = C_lib.BlockCipher;                                                                              // 21\n\t    var C_algo = C.algo;                                                                                              // 22\n                                                                                                                       // 23\n\t    // Permuted Choice 1 constants                                                                                    // 24\n\t    var PC1 = [                                                                                                       // 25\n\t        57, 49, 41, 33, 25, 17, 9,  1,                                                                                // 26\n\t        58, 50, 42, 34, 26, 18, 10, 2,                                                                                // 27\n\t        59, 51, 43, 35, 27, 19, 11, 3,                                                                                // 28\n\t        60, 52, 44, 36, 63, 55, 47, 39,                                                                               // 29\n\t        31, 23, 15, 7,  62, 54, 46, 38,                                                                               // 30\n\t        30, 22, 14, 6,  61, 53, 45, 37,                                                                               // 31\n\t        29, 21, 13, 5,  28, 20, 12, 4                                                                                 // 32\n\t    ];                                                                                                                // 33\n                                                                                                                       // 34\n\t    // Permuted Choice 2 constants                                                                                    // 35\n\t    var PC2 = [                                                                                                       // 36\n\t        14, 17, 11, 24, 1,  5,                                                                                        // 37\n\t        3,  28, 15, 6,  21, 10,                                                                                       // 38\n\t        23, 19, 12, 4,  26, 8,                                                                                        // 39\n\t        16, 7,  27, 20, 13, 2,                                                                                        // 40\n\t        41, 52, 31, 37, 47, 55,                                                                                       // 41\n\t        30, 40, 51, 45, 33, 48,                                                                                       // 42\n\t        44, 49, 39, 56, 34, 53,                                                                                       // 43\n\t        46, 42, 50, 36, 29, 32                                                                                        // 44\n\t    ];                                                                                                                // 45\n                                                                                                                       // 46\n\t    // Cumulative bit shift constants                                                                                 // 47\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];                                // 48\n                                                                                                                       // 49\n\t    // SBOXes and round permutation constants                                                                         // 50\n\t    var SBOX_P = [                                                                                                    // 51\n\t        {                                                                                                             // 52\n\t            0x0: 0x808200,                                                                                            // 53\n\t            0x10000000: 0x8000,                                                                                       // 54\n\t            0x20000000: 0x808002,                                                                                     // 55\n\t            0x30000000: 0x2,                                                                                          // 56\n\t            0x40000000: 0x200,                                                                                        // 57\n\t            0x50000000: 0x808202,                                                                                     // 58\n\t            0x60000000: 0x800202,                                                                                     // 59\n\t            0x70000000: 0x800000,                                                                                     // 60\n\t            0x80000000: 0x202,                                                                                        // 61\n\t            0x90000000: 0x800200,                                                                                     // 62\n\t            0xa0000000: 0x8200,                                                                                       // 63\n\t            0xb0000000: 0x808000,                                                                                     // 64\n\t            0xc0000000: 0x8002,                                                                                       // 65\n\t            0xd0000000: 0x800002,                                                                                     // 66\n\t            0xe0000000: 0x0,                                                                                          // 67\n\t            0xf0000000: 0x8202,                                                                                       // 68\n\t            0x8000000: 0x0,                                                                                           // 69\n\t            0x18000000: 0x808202,                                                                                     // 70\n\t            0x28000000: 0x8202,                                                                                       // 71\n\t            0x38000000: 0x8000,                                                                                       // 72\n\t            0x48000000: 0x808200,                                                                                     // 73\n\t            0x58000000: 0x200,                                                                                        // 74\n\t            0x68000000: 0x808002,                                                                                     // 75\n\t            0x78000000: 0x2,                                                                                          // 76\n\t            0x88000000: 0x800200,                                                                                     // 77\n\t            0x98000000: 0x8200,                                                                                       // 78\n\t            0xa8000000: 0x808000,                                                                                     // 79\n\t            0xb8000000: 0x800202,                                                                                     // 80\n\t            0xc8000000: 0x800002,                                                                                     // 81\n\t            0xd8000000: 0x8002,                                                                                       // 82\n\t            0xe8000000: 0x202,                                                                                        // 83\n\t            0xf8000000: 0x800000,                                                                                     // 84\n\t            0x1: 0x8000,                                                                                              // 85\n\t            0x10000001: 0x2,                                                                                          // 86\n\t            0x20000001: 0x808200,                                                                                     // 87\n\t            0x30000001: 0x800000,                                                                                     // 88\n\t            0x40000001: 0x808002,                                                                                     // 89\n\t            0x50000001: 0x8200,                                                                                       // 90\n\t            0x60000001: 0x200,                                                                                        // 91\n\t            0x70000001: 0x800202,                                                                                     // 92\n\t            0x80000001: 0x808202,                                                                                     // 93\n\t            0x90000001: 0x808000,                                                                                     // 94\n\t            0xa0000001: 0x800002,                                                                                     // 95\n\t            0xb0000001: 0x8202,                                                                                       // 96\n\t            0xc0000001: 0x202,                                                                                        // 97\n\t            0xd0000001: 0x800200,                                                                                     // 98\n\t            0xe0000001: 0x8002,                                                                                       // 99\n\t            0xf0000001: 0x0,                                                                                          // 100\n\t            0x8000001: 0x808202,                                                                                      // 101\n\t            0x18000001: 0x808000,                                                                                     // 102\n\t            0x28000001: 0x800000,                                                                                     // 103\n\t            0x38000001: 0x200,                                                                                        // 104\n\t            0x48000001: 0x8000,                                                                                       // 105\n\t            0x58000001: 0x800002,                                                                                     // 106\n\t            0x68000001: 0x2,                                                                                          // 107\n\t            0x78000001: 0x8202,                                                                                       // 108\n\t            0x88000001: 0x8002,                                                                                       // 109\n\t            0x98000001: 0x800202,                                                                                     // 110\n\t            0xa8000001: 0x202,                                                                                        // 111\n\t            0xb8000001: 0x808200,                                                                                     // 112\n\t            0xc8000001: 0x800200,                                                                                     // 113\n\t            0xd8000001: 0x0,                                                                                          // 114\n\t            0xe8000001: 0x8200,                                                                                       // 115\n\t            0xf8000001: 0x808002                                                                                      // 116\n\t        },                                                                                                            // 117\n\t        {                                                                                                             // 118\n\t            0x0: 0x40084010,                                                                                          // 119\n\t            0x1000000: 0x4000,                                                                                        // 120\n\t            0x2000000: 0x80000,                                                                                       // 121\n\t            0x3000000: 0x40080010,                                                                                    // 122\n\t            0x4000000: 0x40000010,                                                                                    // 123\n\t            0x5000000: 0x40084000,                                                                                    // 124\n\t            0x6000000: 0x40004000,                                                                                    // 125\n\t            0x7000000: 0x10,                                                                                          // 126\n\t            0x8000000: 0x84000,                                                                                       // 127\n\t            0x9000000: 0x40004010,                                                                                    // 128\n\t            0xa000000: 0x40000000,                                                                                    // 129\n\t            0xb000000: 0x84010,                                                                                       // 130\n\t            0xc000000: 0x80010,                                                                                       // 131\n\t            0xd000000: 0x0,                                                                                           // 132\n\t            0xe000000: 0x4010,                                                                                        // 133\n\t            0xf000000: 0x40080000,                                                                                    // 134\n\t            0x800000: 0x40004000,                                                                                     // 135\n\t            0x1800000: 0x84010,                                                                                       // 136\n\t            0x2800000: 0x10,                                                                                          // 137\n\t            0x3800000: 0x40004010,                                                                                    // 138\n\t            0x4800000: 0x40084010,                                                                                    // 139\n\t            0x5800000: 0x40000000,                                                                                    // 140\n\t            0x6800000: 0x80000,                                                                                       // 141\n\t            0x7800000: 0x40080010,                                                                                    // 142\n\t            0x8800000: 0x80010,                                                                                       // 143\n\t            0x9800000: 0x0,                                                                                           // 144\n\t            0xa800000: 0x4000,                                                                                        // 145\n\t            0xb800000: 0x40080000,                                                                                    // 146\n\t            0xc800000: 0x40000010,                                                                                    // 147\n\t            0xd800000: 0x84000,                                                                                       // 148\n\t            0xe800000: 0x40084000,                                                                                    // 149\n\t            0xf800000: 0x4010,                                                                                        // 150\n\t            0x10000000: 0x0,                                                                                          // 151\n\t            0x11000000: 0x40080010,                                                                                   // 152\n\t            0x12000000: 0x40004010,                                                                                   // 153\n\t            0x13000000: 0x40084000,                                                                                   // 154\n\t            0x14000000: 0x40080000,                                                                                   // 155\n\t            0x15000000: 0x10,                                                                                         // 156\n\t            0x16000000: 0x84010,                                                                                      // 157\n\t            0x17000000: 0x4000,                                                                                       // 158\n\t            0x18000000: 0x4010,                                                                                       // 159\n\t            0x19000000: 0x80000,                                                                                      // 160\n\t            0x1a000000: 0x80010,                                                                                      // 161\n\t            0x1b000000: 0x40000010,                                                                                   // 162\n\t            0x1c000000: 0x84000,                                                                                      // 163\n\t            0x1d000000: 0x40004000,                                                                                   // 164\n\t            0x1e000000: 0x40000000,                                                                                   // 165\n\t            0x1f000000: 0x40084010,                                                                                   // 166\n\t            0x10800000: 0x84010,                                                                                      // 167\n\t            0x11800000: 0x80000,                                                                                      // 168\n\t            0x12800000: 0x40080000,                                                                                   // 169\n\t            0x13800000: 0x4000,                                                                                       // 170\n\t            0x14800000: 0x40004000,                                                                                   // 171\n\t            0x15800000: 0x40084010,                                                                                   // 172\n\t            0x16800000: 0x10,                                                                                         // 173\n\t            0x17800000: 0x40000000,                                                                                   // 174\n\t            0x18800000: 0x40084000,                                                                                   // 175\n\t            0x19800000: 0x40000010,                                                                                   // 176\n\t            0x1a800000: 0x40004010,                                                                                   // 177\n\t            0x1b800000: 0x80010,                                                                                      // 178\n\t            0x1c800000: 0x0,                                                                                          // 179\n\t            0x1d800000: 0x4010,                                                                                       // 180\n\t            0x1e800000: 0x40080010,                                                                                   // 181\n\t            0x1f800000: 0x84000                                                                                       // 182\n\t        },                                                                                                            // 183\n\t        {                                                                                                             // 184\n\t            0x0: 0x104,                                                                                               // 185\n\t            0x100000: 0x0,                                                                                            // 186\n\t            0x200000: 0x4000100,                                                                                      // 187\n\t            0x300000: 0x10104,                                                                                        // 188\n\t            0x400000: 0x10004,                                                                                        // 189\n\t            0x500000: 0x4000004,                                                                                      // 190\n\t            0x600000: 0x4010104,                                                                                      // 191\n\t            0x700000: 0x4010000,                                                                                      // 192\n\t            0x800000: 0x4000000,                                                                                      // 193\n\t            0x900000: 0x4010100,                                                                                      // 194\n\t            0xa00000: 0x10100,                                                                                        // 195\n\t            0xb00000: 0x4010004,                                                                                      // 196\n\t            0xc00000: 0x4000104,                                                                                      // 197\n\t            0xd00000: 0x10000,                                                                                        // 198\n\t            0xe00000: 0x4,                                                                                            // 199\n\t            0xf00000: 0x100,                                                                                          // 200\n\t            0x80000: 0x4010100,                                                                                       // 201\n\t            0x180000: 0x4010004,                                                                                      // 202\n\t            0x280000: 0x0,                                                                                            // 203\n\t            0x380000: 0x4000100,                                                                                      // 204\n\t            0x480000: 0x4000004,                                                                                      // 205\n\t            0x580000: 0x10000,                                                                                        // 206\n\t            0x680000: 0x10004,                                                                                        // 207\n\t            0x780000: 0x104,                                                                                          // 208\n\t            0x880000: 0x4,                                                                                            // 209\n\t            0x980000: 0x100,                                                                                          // 210\n\t            0xa80000: 0x4010000,                                                                                      // 211\n\t            0xb80000: 0x10104,                                                                                        // 212\n\t            0xc80000: 0x10100,                                                                                        // 213\n\t            0xd80000: 0x4000104,                                                                                      // 214\n\t            0xe80000: 0x4010104,                                                                                      // 215\n\t            0xf80000: 0x4000000,                                                                                      // 216\n\t            0x1000000: 0x4010100,                                                                                     // 217\n\t            0x1100000: 0x10004,                                                                                       // 218\n\t            0x1200000: 0x10000,                                                                                       // 219\n\t            0x1300000: 0x4000100,                                                                                     // 220\n\t            0x1400000: 0x100,                                                                                         // 221\n\t            0x1500000: 0x4010104,                                                                                     // 222\n\t            0x1600000: 0x4000004,                                                                                     // 223\n\t            0x1700000: 0x0,                                                                                           // 224\n\t            0x1800000: 0x4000104,                                                                                     // 225\n\t            0x1900000: 0x4000000,                                                                                     // 226\n\t            0x1a00000: 0x4,                                                                                           // 227\n\t            0x1b00000: 0x10100,                                                                                       // 228\n\t            0x1c00000: 0x4010000,                                                                                     // 229\n\t            0x1d00000: 0x104,                                                                                         // 230\n\t            0x1e00000: 0x10104,                                                                                       // 231\n\t            0x1f00000: 0x4010004,                                                                                     // 232\n\t            0x1080000: 0x4000000,                                                                                     // 233\n\t            0x1180000: 0x104,                                                                                         // 234\n\t            0x1280000: 0x4010100,                                                                                     // 235\n\t            0x1380000: 0x0,                                                                                           // 236\n\t            0x1480000: 0x10004,                                                                                       // 237\n\t            0x1580000: 0x4000100,                                                                                     // 238\n\t            0x1680000: 0x100,                                                                                         // 239\n\t            0x1780000: 0x4010004,                                                                                     // 240\n\t            0x1880000: 0x10000,                                                                                       // 241\n\t            0x1980000: 0x4010104,                                                                                     // 242\n\t            0x1a80000: 0x10104,                                                                                       // 243\n\t            0x1b80000: 0x4000004,                                                                                     // 244\n\t            0x1c80000: 0x4000104,                                                                                     // 245\n\t            0x1d80000: 0x4010000,                                                                                     // 246\n\t            0x1e80000: 0x4,                                                                                           // 247\n\t            0x1f80000: 0x10100                                                                                        // 248\n\t        },                                                                                                            // 249\n\t        {                                                                                                             // 250\n\t            0x0: 0x80401000,                                                                                          // 251\n\t            0x10000: 0x80001040,                                                                                      // 252\n\t            0x20000: 0x401040,                                                                                        // 253\n\t            0x30000: 0x80400000,                                                                                      // 254\n\t            0x40000: 0x0,                                                                                             // 255\n\t            0x50000: 0x401000,                                                                                        // 256\n\t            0x60000: 0x80000040,                                                                                      // 257\n\t            0x70000: 0x400040,                                                                                        // 258\n\t            0x80000: 0x80000000,                                                                                      // 259\n\t            0x90000: 0x400000,                                                                                        // 260\n\t            0xa0000: 0x40,                                                                                            // 261\n\t            0xb0000: 0x80001000,                                                                                      // 262\n\t            0xc0000: 0x80400040,                                                                                      // 263\n\t            0xd0000: 0x1040,                                                                                          // 264\n\t            0xe0000: 0x1000,                                                                                          // 265\n\t            0xf0000: 0x80401040,                                                                                      // 266\n\t            0x8000: 0x80001040,                                                                                       // 267\n\t            0x18000: 0x40,                                                                                            // 268\n\t            0x28000: 0x80400040,                                                                                      // 269\n\t            0x38000: 0x80001000,                                                                                      // 270\n\t            0x48000: 0x401000,                                                                                        // 271\n\t            0x58000: 0x80401040,                                                                                      // 272\n\t            0x68000: 0x0,                                                                                             // 273\n\t            0x78000: 0x80400000,                                                                                      // 274\n\t            0x88000: 0x1000,                                                                                          // 275\n\t            0x98000: 0x80401000,                                                                                      // 276\n\t            0xa8000: 0x400000,                                                                                        // 277\n\t            0xb8000: 0x1040,                                                                                          // 278\n\t            0xc8000: 0x80000000,                                                                                      // 279\n\t            0xd8000: 0x400040,                                                                                        // 280\n\t            0xe8000: 0x401040,                                                                                        // 281\n\t            0xf8000: 0x80000040,                                                                                      // 282\n\t            0x100000: 0x400040,                                                                                       // 283\n\t            0x110000: 0x401000,                                                                                       // 284\n\t            0x120000: 0x80000040,                                                                                     // 285\n\t            0x130000: 0x0,                                                                                            // 286\n\t            0x140000: 0x1040,                                                                                         // 287\n\t            0x150000: 0x80400040,                                                                                     // 288\n\t            0x160000: 0x80401000,                                                                                     // 289\n\t            0x170000: 0x80001040,                                                                                     // 290\n\t            0x180000: 0x80401040,                                                                                     // 291\n\t            0x190000: 0x80000000,                                                                                     // 292\n\t            0x1a0000: 0x80400000,                                                                                     // 293\n\t            0x1b0000: 0x401040,                                                                                       // 294\n\t            0x1c0000: 0x80001000,                                                                                     // 295\n\t            0x1d0000: 0x400000,                                                                                       // 296\n\t            0x1e0000: 0x40,                                                                                           // 297\n\t            0x1f0000: 0x1000,                                                                                         // 298\n\t            0x108000: 0x80400000,                                                                                     // 299\n\t            0x118000: 0x80401040,                                                                                     // 300\n\t            0x128000: 0x0,                                                                                            // 301\n\t            0x138000: 0x401000,                                                                                       // 302\n\t            0x148000: 0x400040,                                                                                       // 303\n\t            0x158000: 0x80000000,                                                                                     // 304\n\t            0x168000: 0x80001040,                                                                                     // 305\n\t            0x178000: 0x40,                                                                                           // 306\n\t            0x188000: 0x80000040,                                                                                     // 307\n\t            0x198000: 0x1000,                                                                                         // 308\n\t            0x1a8000: 0x80001000,                                                                                     // 309\n\t            0x1b8000: 0x80400040,                                                                                     // 310\n\t            0x1c8000: 0x1040,                                                                                         // 311\n\t            0x1d8000: 0x80401000,                                                                                     // 312\n\t            0x1e8000: 0x400000,                                                                                       // 313\n\t            0x1f8000: 0x401040                                                                                        // 314\n\t        },                                                                                                            // 315\n\t        {                                                                                                             // 316\n\t            0x0: 0x80,                                                                                                // 317\n\t            0x1000: 0x1040000,                                                                                        // 318\n\t            0x2000: 0x40000,                                                                                          // 319\n\t            0x3000: 0x20000000,                                                                                       // 320\n\t            0x4000: 0x20040080,                                                                                       // 321\n\t            0x5000: 0x1000080,                                                                                        // 322\n\t            0x6000: 0x21000080,                                                                                       // 323\n\t            0x7000: 0x40080,                                                                                          // 324\n\t            0x8000: 0x1000000,                                                                                        // 325\n\t            0x9000: 0x20040000,                                                                                       // 326\n\t            0xa000: 0x20000080,                                                                                       // 327\n\t            0xb000: 0x21040080,                                                                                       // 328\n\t            0xc000: 0x21040000,                                                                                       // 329\n\t            0xd000: 0x0,                                                                                              // 330\n\t            0xe000: 0x1040080,                                                                                        // 331\n\t            0xf000: 0x21000000,                                                                                       // 332\n\t            0x800: 0x1040080,                                                                                         // 333\n\t            0x1800: 0x21000080,                                                                                       // 334\n\t            0x2800: 0x80,                                                                                             // 335\n\t            0x3800: 0x1040000,                                                                                        // 336\n\t            0x4800: 0x40000,                                                                                          // 337\n\t            0x5800: 0x20040080,                                                                                       // 338\n\t            0x6800: 0x21040000,                                                                                       // 339\n\t            0x7800: 0x20000000,                                                                                       // 340\n\t            0x8800: 0x20040000,                                                                                       // 341\n\t            0x9800: 0x0,                                                                                              // 342\n\t            0xa800: 0x21040080,                                                                                       // 343\n\t            0xb800: 0x1000080,                                                                                        // 344\n\t            0xc800: 0x20000080,                                                                                       // 345\n\t            0xd800: 0x21000000,                                                                                       // 346\n\t            0xe800: 0x1000000,                                                                                        // 347\n\t            0xf800: 0x40080,                                                                                          // 348\n\t            0x10000: 0x40000,                                                                                         // 349\n\t            0x11000: 0x80,                                                                                            // 350\n\t            0x12000: 0x20000000,                                                                                      // 351\n\t            0x13000: 0x21000080,                                                                                      // 352\n\t            0x14000: 0x1000080,                                                                                       // 353\n\t            0x15000: 0x21040000,                                                                                      // 354\n\t            0x16000: 0x20040080,                                                                                      // 355\n\t            0x17000: 0x1000000,                                                                                       // 356\n\t            0x18000: 0x21040080,                                                                                      // 357\n\t            0x19000: 0x21000000,                                                                                      // 358\n\t            0x1a000: 0x1040000,                                                                                       // 359\n\t            0x1b000: 0x20040000,                                                                                      // 360\n\t            0x1c000: 0x40080,                                                                                         // 361\n\t            0x1d000: 0x20000080,                                                                                      // 362\n\t            0x1e000: 0x0,                                                                                             // 363\n\t            0x1f000: 0x1040080,                                                                                       // 364\n\t            0x10800: 0x21000080,                                                                                      // 365\n\t            0x11800: 0x1000000,                                                                                       // 366\n\t            0x12800: 0x1040000,                                                                                       // 367\n\t            0x13800: 0x20040080,                                                                                      // 368\n\t            0x14800: 0x20000000,                                                                                      // 369\n\t            0x15800: 0x1040080,                                                                                       // 370\n\t            0x16800: 0x80,                                                                                            // 371\n\t            0x17800: 0x21040000,                                                                                      // 372\n\t            0x18800: 0x40080,                                                                                         // 373\n\t            0x19800: 0x21040080,                                                                                      // 374\n\t            0x1a800: 0x0,                                                                                             // 375\n\t            0x1b800: 0x21000000,                                                                                      // 376\n\t            0x1c800: 0x1000080,                                                                                       // 377\n\t            0x1d800: 0x40000,                                                                                         // 378\n\t            0x1e800: 0x20040000,                                                                                      // 379\n\t            0x1f800: 0x20000080                                                                                       // 380\n\t        },                                                                                                            // 381\n\t        {                                                                                                             // 382\n\t            0x0: 0x10000008,                                                                                          // 383\n\t            0x100: 0x2000,                                                                                            // 384\n\t            0x200: 0x10200000,                                                                                        // 385\n\t            0x300: 0x10202008,                                                                                        // 386\n\t            0x400: 0x10002000,                                                                                        // 387\n\t            0x500: 0x200000,                                                                                          // 388\n\t            0x600: 0x200008,                                                                                          // 389\n\t            0x700: 0x10000000,                                                                                        // 390\n\t            0x800: 0x0,                                                                                               // 391\n\t            0x900: 0x10002008,                                                                                        // 392\n\t            0xa00: 0x202000,                                                                                          // 393\n\t            0xb00: 0x8,                                                                                               // 394\n\t            0xc00: 0x10200008,                                                                                        // 395\n\t            0xd00: 0x202008,                                                                                          // 396\n\t            0xe00: 0x2008,                                                                                            // 397\n\t            0xf00: 0x10202000,                                                                                        // 398\n\t            0x80: 0x10200000,                                                                                         // 399\n\t            0x180: 0x10202008,                                                                                        // 400\n\t            0x280: 0x8,                                                                                               // 401\n\t            0x380: 0x200000,                                                                                          // 402\n\t            0x480: 0x202008,                                                                                          // 403\n\t            0x580: 0x10000008,                                                                                        // 404\n\t            0x680: 0x10002000,                                                                                        // 405\n\t            0x780: 0x2008,                                                                                            // 406\n\t            0x880: 0x200008,                                                                                          // 407\n\t            0x980: 0x2000,                                                                                            // 408\n\t            0xa80: 0x10002008,                                                                                        // 409\n\t            0xb80: 0x10200008,                                                                                        // 410\n\t            0xc80: 0x0,                                                                                               // 411\n\t            0xd80: 0x10202000,                                                                                        // 412\n\t            0xe80: 0x202000,                                                                                          // 413\n\t            0xf80: 0x10000000,                                                                                        // 414\n\t            0x1000: 0x10002000,                                                                                       // 415\n\t            0x1100: 0x10200008,                                                                                       // 416\n\t            0x1200: 0x10202008,                                                                                       // 417\n\t            0x1300: 0x2008,                                                                                           // 418\n\t            0x1400: 0x200000,                                                                                         // 419\n\t            0x1500: 0x10000000,                                                                                       // 420\n\t            0x1600: 0x10000008,                                                                                       // 421\n\t            0x1700: 0x202000,                                                                                         // 422\n\t            0x1800: 0x202008,                                                                                         // 423\n\t            0x1900: 0x0,                                                                                              // 424\n\t            0x1a00: 0x8,                                                                                              // 425\n\t            0x1b00: 0x10200000,                                                                                       // 426\n\t            0x1c00: 0x2000,                                                                                           // 427\n\t            0x1d00: 0x10002008,                                                                                       // 428\n\t            0x1e00: 0x10202000,                                                                                       // 429\n\t            0x1f00: 0x200008,                                                                                         // 430\n\t            0x1080: 0x8,                                                                                              // 431\n\t            0x1180: 0x202000,                                                                                         // 432\n\t            0x1280: 0x200000,                                                                                         // 433\n\t            0x1380: 0x10000008,                                                                                       // 434\n\t            0x1480: 0x10002000,                                                                                       // 435\n\t            0x1580: 0x2008,                                                                                           // 436\n\t            0x1680: 0x10202008,                                                                                       // 437\n\t            0x1780: 0x10200000,                                                                                       // 438\n\t            0x1880: 0x10202000,                                                                                       // 439\n\t            0x1980: 0x10200008,                                                                                       // 440\n\t            0x1a80: 0x2000,                                                                                           // 441\n\t            0x1b80: 0x202008,                                                                                         // 442\n\t            0x1c80: 0x200008,                                                                                         // 443\n\t            0x1d80: 0x0,                                                                                              // 444\n\t            0x1e80: 0x10000000,                                                                                       // 445\n\t            0x1f80: 0x10002008                                                                                        // 446\n\t        },                                                                                                            // 447\n\t        {                                                                                                             // 448\n\t            0x0: 0x100000,                                                                                            // 449\n\t            0x10: 0x2000401,                                                                                          // 450\n\t            0x20: 0x400,                                                                                              // 451\n\t            0x30: 0x100401,                                                                                           // 452\n\t            0x40: 0x2100401,                                                                                          // 453\n\t            0x50: 0x0,                                                                                                // 454\n\t            0x60: 0x1,                                                                                                // 455\n\t            0x70: 0x2100001,                                                                                          // 456\n\t            0x80: 0x2000400,                                                                                          // 457\n\t            0x90: 0x100001,                                                                                           // 458\n\t            0xa0: 0x2000001,                                                                                          // 459\n\t            0xb0: 0x2100400,                                                                                          // 460\n\t            0xc0: 0x2100000,                                                                                          // 461\n\t            0xd0: 0x401,                                                                                              // 462\n\t            0xe0: 0x100400,                                                                                           // 463\n\t            0xf0: 0x2000000,                                                                                          // 464\n\t            0x8: 0x2100001,                                                                                           // 465\n\t            0x18: 0x0,                                                                                                // 466\n\t            0x28: 0x2000401,                                                                                          // 467\n\t            0x38: 0x2100400,                                                                                          // 468\n\t            0x48: 0x100000,                                                                                           // 469\n\t            0x58: 0x2000001,                                                                                          // 470\n\t            0x68: 0x2000000,                                                                                          // 471\n\t            0x78: 0x401,                                                                                              // 472\n\t            0x88: 0x100401,                                                                                           // 473\n\t            0x98: 0x2000400,                                                                                          // 474\n\t            0xa8: 0x2100000,                                                                                          // 475\n\t            0xb8: 0x100001,                                                                                           // 476\n\t            0xc8: 0x400,                                                                                              // 477\n\t            0xd8: 0x2100401,                                                                                          // 478\n\t            0xe8: 0x1,                                                                                                // 479\n\t            0xf8: 0x100400,                                                                                           // 480\n\t            0x100: 0x2000000,                                                                                         // 481\n\t            0x110: 0x100000,                                                                                          // 482\n\t            0x120: 0x2000401,                                                                                         // 483\n\t            0x130: 0x2100001,                                                                                         // 484\n\t            0x140: 0x100001,                                                                                          // 485\n\t            0x150: 0x2000400,                                                                                         // 486\n\t            0x160: 0x2100400,                                                                                         // 487\n\t            0x170: 0x100401,                                                                                          // 488\n\t            0x180: 0x401,                                                                                             // 489\n\t            0x190: 0x2100401,                                                                                         // 490\n\t            0x1a0: 0x100400,                                                                                          // 491\n\t            0x1b0: 0x1,                                                                                               // 492\n\t            0x1c0: 0x0,                                                                                               // 493\n\t            0x1d0: 0x2100000,                                                                                         // 494\n\t            0x1e0: 0x2000001,                                                                                         // 495\n\t            0x1f0: 0x400,                                                                                             // 496\n\t            0x108: 0x100400,                                                                                          // 497\n\t            0x118: 0x2000401,                                                                                         // 498\n\t            0x128: 0x2100001,                                                                                         // 499\n\t            0x138: 0x1,                                                                                               // 500\n\t            0x148: 0x2000000,                                                                                         // 501\n\t            0x158: 0x100000,                                                                                          // 502\n\t            0x168: 0x401,                                                                                             // 503\n\t            0x178: 0x2100400,                                                                                         // 504\n\t            0x188: 0x2000001,                                                                                         // 505\n\t            0x198: 0x2100000,                                                                                         // 506\n\t            0x1a8: 0x0,                                                                                               // 507\n\t            0x1b8: 0x2100401,                                                                                         // 508\n\t            0x1c8: 0x100401,                                                                                          // 509\n\t            0x1d8: 0x400,                                                                                             // 510\n\t            0x1e8: 0x2000400,                                                                                         // 511\n\t            0x1f8: 0x100001                                                                                           // 512\n\t        },                                                                                                            // 513\n\t        {                                                                                                             // 514\n\t            0x0: 0x8000820,                                                                                           // 515\n\t            0x1: 0x20000,                                                                                             // 516\n\t            0x2: 0x8000000,                                                                                           // 517\n\t            0x3: 0x20,                                                                                                // 518\n\t            0x4: 0x20020,                                                                                             // 519\n\t            0x5: 0x8020820,                                                                                           // 520\n\t            0x6: 0x8020800,                                                                                           // 521\n\t            0x7: 0x800,                                                                                               // 522\n\t            0x8: 0x8020000,                                                                                           // 523\n\t            0x9: 0x8000800,                                                                                           // 524\n\t            0xa: 0x20800,                                                                                             // 525\n\t            0xb: 0x8020020,                                                                                           // 526\n\t            0xc: 0x820,                                                                                               // 527\n\t            0xd: 0x0,                                                                                                 // 528\n\t            0xe: 0x8000020,                                                                                           // 529\n\t            0xf: 0x20820,                                                                                             // 530\n\t            0x80000000: 0x800,                                                                                        // 531\n\t            0x80000001: 0x8020820,                                                                                    // 532\n\t            0x80000002: 0x8000820,                                                                                    // 533\n\t            0x80000003: 0x8000000,                                                                                    // 534\n\t            0x80000004: 0x8020000,                                                                                    // 535\n\t            0x80000005: 0x20800,                                                                                      // 536\n\t            0x80000006: 0x20820,                                                                                      // 537\n\t            0x80000007: 0x20,                                                                                         // 538\n\t            0x80000008: 0x8000020,                                                                                    // 539\n\t            0x80000009: 0x820,                                                                                        // 540\n\t            0x8000000a: 0x20020,                                                                                      // 541\n\t            0x8000000b: 0x8020800,                                                                                    // 542\n\t            0x8000000c: 0x0,                                                                                          // 543\n\t            0x8000000d: 0x8020020,                                                                                    // 544\n\t            0x8000000e: 0x8000800,                                                                                    // 545\n\t            0x8000000f: 0x20000,                                                                                      // 546\n\t            0x10: 0x20820,                                                                                            // 547\n\t            0x11: 0x8020800,                                                                                          // 548\n\t            0x12: 0x20,                                                                                               // 549\n\t            0x13: 0x800,                                                                                              // 550\n\t            0x14: 0x8000800,                                                                                          // 551\n\t            0x15: 0x8000020,                                                                                          // 552\n\t            0x16: 0x8020020,                                                                                          // 553\n\t            0x17: 0x20000,                                                                                            // 554\n\t            0x18: 0x0,                                                                                                // 555\n\t            0x19: 0x20020,                                                                                            // 556\n\t            0x1a: 0x8020000,                                                                                          // 557\n\t            0x1b: 0x8000820,                                                                                          // 558\n\t            0x1c: 0x8020820,                                                                                          // 559\n\t            0x1d: 0x20800,                                                                                            // 560\n\t            0x1e: 0x820,                                                                                              // 561\n\t            0x1f: 0x8000000,                                                                                          // 562\n\t            0x80000010: 0x20000,                                                                                      // 563\n\t            0x80000011: 0x800,                                                                                        // 564\n\t            0x80000012: 0x8020020,                                                                                    // 565\n\t            0x80000013: 0x20820,                                                                                      // 566\n\t            0x80000014: 0x20,                                                                                         // 567\n\t            0x80000015: 0x8020000,                                                                                    // 568\n\t            0x80000016: 0x8000000,                                                                                    // 569\n\t            0x80000017: 0x8000820,                                                                                    // 570\n\t            0x80000018: 0x8020820,                                                                                    // 571\n\t            0x80000019: 0x8000020,                                                                                    // 572\n\t            0x8000001a: 0x8000800,                                                                                    // 573\n\t            0x8000001b: 0x0,                                                                                          // 574\n\t            0x8000001c: 0x20800,                                                                                      // 575\n\t            0x8000001d: 0x820,                                                                                        // 576\n\t            0x8000001e: 0x20020,                                                                                      // 577\n\t            0x8000001f: 0x8020800                                                                                     // 578\n\t        }                                                                                                             // 579\n\t    ];                                                                                                                // 580\n                                                                                                                       // 581\n\t    // Masks that select the SBOX input                                                                               // 582\n\t    var SBOX_MASK = [                                                                                                 // 583\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,                                                               // 584\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f                                                                // 585\n\t    ];                                                                                                                // 586\n                                                                                                                       // 587\n\t    /**                                                                                                               // 588\n\t     * DES block cipher algorithm.                                                                                    // 589\n\t     */                                                                                                               // 590\n\t    var DES = C_algo.DES = BlockCipher.extend({                                                                       // 591\n\t        _doReset: function () {                                                                                       // 592\n\t            // Shortcuts                                                                                              // 593\n\t            var key = this._key;                                                                                      // 594\n\t            var keyWords = key.words;                                                                                 // 595\n                                                                                                                       // 596\n\t            // Select 56 bits according to PC1                                                                        // 597\n\t            var keyBits = [];                                                                                         // 598\n\t            for (var i = 0; i < 56; i++) {                                                                            // 599\n\t                var keyBitPos = PC1[i] - 1;                                                                           // 600\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;                               // 601\n\t            }                                                                                                         // 602\n                                                                                                                       // 603\n\t            // Assemble 16 subkeys                                                                                    // 604\n\t            var subKeys = this._subKeys = [];                                                                         // 605\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {                                                          // 606\n\t                // Create subkey                                                                                      // 607\n\t                var subKey = subKeys[nSubKey] = [];                                                                   // 608\n                                                                                                                       // 609\n\t                // Shortcut                                                                                           // 610\n\t                var bitShift = BIT_SHIFTS[nSubKey];                                                                   // 611\n                                                                                                                       // 612\n\t                // Select 48 bits according to PC2                                                                    // 613\n\t                for (var i = 0; i < 24; i++) {                                                                        // 614\n\t                    // Select from the left 28 key bits                                                               // 615\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);                   // 616\n                                                                                                                       // 617\n\t                    // Select from the right 28 key bits                                                              // 618\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }                                                                                                     // 620\n                                                                                                                       // 621\n\t                // Since each subkey is applied to an expanded 32-bit input,                                          // 622\n\t                // the subkey can be broken into 8 values scaled to 32-bits,                                          // 623\n\t                // which allows the key to be used without expansion                                                  // 624\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);                                                    // 625\n\t                for (var i = 1; i < 7; i++) {                                                                         // 626\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);                                                      // 627\n\t                }                                                                                                     // 628\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);                                                    // 629\n\t            }                                                                                                         // 630\n                                                                                                                       // 631\n\t            // Compute inverse subkeys                                                                                // 632\n\t            var invSubKeys = this._invSubKeys = [];                                                                   // 633\n\t            for (var i = 0; i < 16; i++) {                                                                            // 634\n\t                invSubKeys[i] = subKeys[15 - i];                                                                      // 635\n\t            }                                                                                                         // 636\n\t        },                                                                                                            // 637\n                                                                                                                       // 638\n\t        encryptBlock: function (M, offset) {                                                                          // 639\n\t            this._doCryptBlock(M, offset, this._subKeys);                                                             // 640\n\t        },                                                                                                            // 641\n                                                                                                                       // 642\n\t        decryptBlock: function (M, offset) {                                                                          // 643\n\t            this._doCryptBlock(M, offset, this._invSubKeys);                                                          // 644\n\t        },                                                                                                            // 645\n                                                                                                                       // 646\n\t        _doCryptBlock: function (M, offset, subKeys) {                                                                // 647\n\t            // Get input                                                                                              // 648\n\t            this._lBlock = M[offset];                                                                                 // 649\n\t            this._rBlock = M[offset + 1];                                                                             // 650\n                                                                                                                       // 651\n\t            // Initial permutation                                                                                    // 652\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 653\n\t            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 654\n\t            exchangeRL.call(this, 2,  0x33333333);                                                                    // 655\n\t            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 656\n\t            exchangeLR.call(this, 1,  0x55555555);                                                                    // 657\n                                                                                                                       // 658\n\t            // Rounds                                                                                                 // 659\n\t            for (var round = 0; round < 16; round++) {                                                                // 660\n\t                // Shortcuts                                                                                          // 661\n\t                var subKey = subKeys[round];                                                                          // 662\n\t                var lBlock = this._lBlock;                                                                            // 663\n\t                var rBlock = this._rBlock;                                                                            // 664\n                                                                                                                       // 665\n\t                // Feistel function                                                                                   // 666\n\t                var f = 0;                                                                                            // 667\n\t                for (var i = 0; i < 8; i++) {                                                                         // 668\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];                                      // 669\n\t                }                                                                                                     // 670\n\t                this._lBlock = rBlock;                                                                                // 671\n\t                this._rBlock = lBlock ^ f;                                                                            // 672\n\t            }                                                                                                         // 673\n                                                                                                                       // 674\n\t            // Undo swap from last round                                                                              // 675\n\t            var t = this._lBlock;                                                                                     // 676\n\t            this._lBlock = this._rBlock;                                                                              // 677\n\t            this._rBlock = t;                                                                                         // 678\n                                                                                                                       // 679\n\t            // Final permutation                                                                                      // 680\n\t            exchangeLR.call(this, 1,  0x55555555);                                                                    // 681\n\t            exchangeRL.call(this, 8,  0x00ff00ff);                                                                    // 682\n\t            exchangeRL.call(this, 2,  0x33333333);                                                                    // 683\n\t            exchangeLR.call(this, 16, 0x0000ffff);                                                                    // 684\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);                                                                    // 685\n                                                                                                                       // 686\n\t            // Set output                                                                                             // 687\n\t            M[offset] = this._lBlock;                                                                                 // 688\n\t            M[offset + 1] = this._rBlock;                                                                             // 689\n\t        },                                                                                                            // 690\n                                                                                                                       // 691\n\t        keySize: 64/32,                                                                                               // 692\n                                                                                                                       // 693\n\t        ivSize: 64/32,                                                                                                // 694\n                                                                                                                       // 695\n\t        blockSize: 64/32                                                                                              // 696\n\t    });                                                                                                               // 697\n                                                                                                                       // 698\n\t    // Swap bits across the left and right words                                                                      // 699\n\t    function exchangeLR(offset, mask) {                                                                               // 700\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;                                                    // 701\n\t        this._rBlock ^= t;                                                                                            // 702\n\t        this._lBlock ^= t << offset;                                                                                  // 703\n\t    }                                                                                                                 // 704\n                                                                                                                       // 705\n\t    function exchangeRL(offset, mask) {                                                                               // 706\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;                                                    // 707\n\t        this._lBlock ^= t;                                                                                            // 708\n\t        this._rBlock ^= t << offset;                                                                                  // 709\n\t    }                                                                                                                 // 710\n                                                                                                                       // 711\n\t    /**                                                                                                               // 712\n\t     * Shortcut functions to the cipher's object interface.                                                           // 713\n\t     *                                                                                                                // 714\n\t     * @example                                                                                                       // 715\n\t     *                                                                                                                // 716\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);                                                  // 717\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);                                               // 718\n\t     */                                                                                                               // 719\n\t    C.DES = BlockCipher._createHelper(DES);                                                                           // 720\n                                                                                                                       // 721\n\t    /**                                                                                                               // 722\n\t     * Triple-DES block cipher algorithm.                                                                             // 723\n\t     */                                                                                                               // 724\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({                                                           // 725\n\t        _doReset: function () {                                                                                       // 726\n\t            // Shortcuts                                                                                              // 727\n\t            var key = this._key;                                                                                      // 728\n\t            var keyWords = key.words;                                                                                 // 729\n                                                                                                                       // 730\n\t            // Create DES instances                                                                                   // 731\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));                                 // 732\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));                                 // 733\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));                                 // 734\n\t        },                                                                                                            // 735\n                                                                                                                       // 736\n\t        encryptBlock: function (M, offset) {                                                                          // 737\n\t            this._des1.encryptBlock(M, offset);                                                                       // 738\n\t            this._des2.decryptBlock(M, offset);                                                                       // 739\n\t            this._des3.encryptBlock(M, offset);                                                                       // 740\n\t        },                                                                                                            // 741\n                                                                                                                       // 742\n\t        decryptBlock: function (M, offset) {                                                                          // 743\n\t            this._des3.decryptBlock(M, offset);                                                                       // 744\n\t            this._des2.encryptBlock(M, offset);                                                                       // 745\n\t            this._des1.decryptBlock(M, offset);                                                                       // 746\n\t        },                                                                                                            // 747\n                                                                                                                       // 748\n\t        keySize: 192/32,                                                                                              // 749\n                                                                                                                       // 750\n\t        ivSize: 64/32,                                                                                                // 751\n                                                                                                                       // 752\n\t        blockSize: 64/32                                                                                              // 753\n\t    });                                                                                                               // 754\n                                                                                                                       // 755\n\t    /**                                                                                                               // 756\n\t     * Shortcut functions to the cipher's object interface.                                                           // 757\n\t     *                                                                                                                // 758\n\t     * @example                                                                                                       // 759\n\t     *                                                                                                                // 760\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);                                            // 761\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);                                         // 762\n\t     */                                                                                                               // 763\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);                                                               // 764\n\t}());                                                                                                                 // 765\n                                                                                                                       // 766\n                                                                                                                       // 767\n\treturn CryptoJS.TripleDES;                                                                                            // 768\n                                                                                                                       // 769\n}));                                                                                                                   // 770\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"rc4.js\":[\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/rc4.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 20\n\t    var C_algo = C.algo;                                                                                              // 21\n                                                                                                                       // 22\n\t    /**                                                                                                               // 23\n\t     * RC4 stream cipher algorithm.                                                                                   // 24\n\t     */                                                                                                               // 25\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({                                                                      // 26\n\t        _doReset: function () {                                                                                       // 27\n\t            // Shortcuts                                                                                              // 28\n\t            var key = this._key;                                                                                      // 29\n\t            var keyWords = key.words;                                                                                 // 30\n\t            var keySigBytes = key.sigBytes;                                                                           // 31\n                                                                                                                       // 32\n\t            // Init sbox                                                                                              // 33\n\t            var S = this._S = [];                                                                                     // 34\n\t            for (var i = 0; i < 256; i++) {                                                                           // 35\n\t                S[i] = i;                                                                                             // 36\n\t            }                                                                                                         // 37\n                                                                                                                       // 38\n\t            // Key setup                                                                                              // 39\n\t            for (var i = 0, j = 0; i < 256; i++) {                                                                    // 40\n\t                var keyByteIndex = i % keySigBytes;                                                                   // 41\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;                // 42\n                                                                                                                       // 43\n\t                j = (j + S[i] + keyByte) % 256;                                                                       // 44\n                                                                                                                       // 45\n\t                // Swap                                                                                               // 46\n\t                var t = S[i];                                                                                         // 47\n\t                S[i] = S[j];                                                                                          // 48\n\t                S[j] = t;                                                                                             // 49\n\t            }                                                                                                         // 50\n                                                                                                                       // 51\n\t            // Counters                                                                                               // 52\n\t            this._i = this._j = 0;                                                                                    // 53\n\t        },                                                                                                            // 54\n                                                                                                                       // 55\n\t        _doProcessBlock: function (M, offset) {                                                                       // 56\n\t            M[offset] ^= generateKeystreamWord.call(this);                                                            // 57\n\t        },                                                                                                            // 58\n                                                                                                                       // 59\n\t        keySize: 256/32,                                                                                              // 60\n                                                                                                                       // 61\n\t        ivSize: 0                                                                                                     // 62\n\t    });                                                                                                               // 63\n                                                                                                                       // 64\n\t    function generateKeystreamWord() {                                                                                // 65\n\t        // Shortcuts                                                                                                  // 66\n\t        var S = this._S;                                                                                              // 67\n\t        var i = this._i;                                                                                              // 68\n\t        var j = this._j;                                                                                              // 69\n                                                                                                                       // 70\n\t        // Generate keystream word                                                                                    // 71\n\t        var keystreamWord = 0;                                                                                        // 72\n\t        for (var n = 0; n < 4; n++) {                                                                                 // 73\n\t            i = (i + 1) % 256;                                                                                        // 74\n\t            j = (j + S[i]) % 256;                                                                                     // 75\n                                                                                                                       // 76\n\t            // Swap                                                                                                   // 77\n\t            var t = S[i];                                                                                             // 78\n\t            S[i] = S[j];                                                                                              // 79\n\t            S[j] = t;                                                                                                 // 80\n                                                                                                                       // 81\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);                                                  // 82\n\t        }                                                                                                             // 83\n                                                                                                                       // 84\n\t        // Update counters                                                                                            // 85\n\t        this._i = i;                                                                                                  // 86\n\t        this._j = j;                                                                                                  // 87\n                                                                                                                       // 88\n\t        return keystreamWord;                                                                                         // 89\n\t    }                                                                                                                 // 90\n                                                                                                                       // 91\n\t    /**                                                                                                               // 92\n\t     * Shortcut functions to the cipher's object interface.                                                           // 93\n\t     *                                                                                                                // 94\n\t     * @example                                                                                                       // 95\n\t     *                                                                                                                // 96\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);                                                  // 97\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);                                               // 98\n\t     */                                                                                                               // 99\n\t    C.RC4 = StreamCipher._createHelper(RC4);                                                                          // 100\n                                                                                                                       // 101\n\t    /**                                                                                                               // 102\n\t     * Modified RC4 stream cipher algorithm.                                                                          // 103\n\t     */                                                                                                               // 104\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({                                                                       // 105\n\t        /**                                                                                                           // 106\n\t         * Configuration options.                                                                                     // 107\n\t         *                                                                                                            // 108\n\t         * @property {number} drop The number of keystream words to drop. Default 192                                 // 109\n\t         */                                                                                                           // 110\n\t        cfg: RC4.cfg.extend({                                                                                         // 111\n\t            drop: 192                                                                                                 // 112\n\t        }),                                                                                                           // 113\n                                                                                                                       // 114\n\t        _doReset: function () {                                                                                       // 115\n\t            RC4._doReset.call(this);                                                                                  // 116\n                                                                                                                       // 117\n\t            // Drop                                                                                                   // 118\n\t            for (var i = this.cfg.drop; i > 0; i--) {                                                                 // 119\n\t                generateKeystreamWord.call(this);                                                                     // 120\n\t            }                                                                                                         // 121\n\t        }                                                                                                             // 122\n\t    });                                                                                                               // 123\n                                                                                                                       // 124\n\t    /**                                                                                                               // 125\n\t     * Shortcut functions to the cipher's object interface.                                                           // 126\n\t     *                                                                                                                // 127\n\t     * @example                                                                                                       // 128\n\t     *                                                                                                                // 129\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);                                              // 130\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);                                           // 131\n\t     */                                                                                                               // 132\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);                                                                  // 133\n\t}());                                                                                                                 // 134\n                                                                                                                       // 135\n                                                                                                                       // 136\n\treturn CryptoJS.RC4;                                                                                                  // 137\n                                                                                                                       // 138\n}));                                                                                                                   // 139\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"rabbit.js\":[\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/rabbit.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 20\n\t    var C_algo = C.algo;                                                                                              // 21\n                                                                                                                       // 22\n\t    // Reusable objects                                                                                               // 23\n\t    var S  = [];                                                                                                      // 24\n\t    var C_ = [];                                                                                                      // 25\n\t    var G  = [];                                                                                                      // 26\n                                                                                                                       // 27\n\t    /**                                                                                                               // 28\n\t     * Rabbit stream cipher algorithm                                                                                 // 29\n\t     */                                                                                                               // 30\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({                                                                // 31\n\t        _doReset: function () {                                                                                       // 32\n\t            // Shortcuts                                                                                              // 33\n\t            var K = this._key.words;                                                                                  // 34\n\t            var iv = this.cfg.iv;                                                                                     // 35\n                                                                                                                       // 36\n\t            // Swap endian                                                                                            // 37\n\t            for (var i = 0; i < 4; i++) {                                                                             // 38\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |                                                // 39\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);                                                 // 40\n\t            }                                                                                                         // 41\n                                                                                                                       // 42\n\t            // Generate initial state values                                                                          // 43\n\t            var X = this._X = [                                                                                       // 44\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 45\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 46\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 47\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 48\n\t            ];                                                                                                        // 49\n                                                                                                                       // 50\n\t            // Generate initial counter values                                                                        // 51\n\t            var C = this._C = [                                                                                       // 52\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 53\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 54\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 55\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 56\n\t            ];                                                                                                        // 57\n                                                                                                                       // 58\n\t            // Carry bit                                                                                              // 59\n\t            this._b = 0;                                                                                              // 60\n                                                                                                                       // 61\n\t            // Iterate the system four times                                                                          // 62\n\t            for (var i = 0; i < 4; i++) {                                                                             // 63\n\t                nextState.call(this);                                                                                 // 64\n\t            }                                                                                                         // 65\n                                                                                                                       // 66\n\t            // Modify the counters                                                                                    // 67\n\t            for (var i = 0; i < 8; i++) {                                                                             // 68\n\t                C[i] ^= X[(i + 4) & 7];                                                                               // 69\n\t            }                                                                                                         // 70\n                                                                                                                       // 71\n\t            // IV setup                                                                                               // 72\n\t            if (iv) {                                                                                                 // 73\n\t                // Shortcuts                                                                                          // 74\n\t                var IV = iv.words;                                                                                    // 75\n\t                var IV_0 = IV[0];                                                                                     // 76\n\t                var IV_1 = IV[1];                                                                                     // 77\n                                                                                                                       // 78\n\t                // Generate four subvectors                                                                           // 79\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 82\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 83\n                                                                                                                       // 84\n\t                // Modify counter values                                                                              // 85\n\t                C[0] ^= i0;                                                                                           // 86\n\t                C[1] ^= i1;                                                                                           // 87\n\t                C[2] ^= i2;                                                                                           // 88\n\t                C[3] ^= i3;                                                                                           // 89\n\t                C[4] ^= i0;                                                                                           // 90\n\t                C[5] ^= i1;                                                                                           // 91\n\t                C[6] ^= i2;                                                                                           // 92\n\t                C[7] ^= i3;                                                                                           // 93\n                                                                                                                       // 94\n\t                // Iterate the system four times                                                                      // 95\n\t                for (var i = 0; i < 4; i++) {                                                                         // 96\n\t                    nextState.call(this);                                                                             // 97\n\t                }                                                                                                     // 98\n\t            }                                                                                                         // 99\n\t        },                                                                                                            // 100\n                                                                                                                       // 101\n\t        _doProcessBlock: function (M, offset) {                                                                       // 102\n\t            // Shortcut                                                                                               // 103\n\t            var X = this._X;                                                                                          // 104\n                                                                                                                       // 105\n\t            // Iterate the system                                                                                     // 106\n\t            nextState.call(this);                                                                                     // 107\n                                                                                                                       // 108\n\t            // Generate four keystream words                                                                          // 109\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 110\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 111\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 112\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 113\n                                                                                                                       // 114\n\t            for (var i = 0; i < 4; i++) {                                                                             // 115\n\t                // Swap endian                                                                                        // 116\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 117\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 118\n                                                                                                                       // 119\n\t                // Encrypt                                                                                            // 120\n\t                M[offset + i] ^= S[i];                                                                                // 121\n\t            }                                                                                                         // 122\n\t        },                                                                                                            // 123\n                                                                                                                       // 124\n\t        blockSize: 128/32,                                                                                            // 125\n                                                                                                                       // 126\n\t        ivSize: 64/32                                                                                                 // 127\n\t    });                                                                                                               // 128\n                                                                                                                       // 129\n\t    function nextState() {                                                                                            // 130\n\t        // Shortcuts                                                                                                  // 131\n\t        var X = this._X;                                                                                              // 132\n\t        var C = this._C;                                                                                              // 133\n                                                                                                                       // 134\n\t        // Save old counter values                                                                                    // 135\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 136\n\t            C_[i] = C[i];                                                                                             // 137\n\t        }                                                                                                             // 138\n                                                                                                                       // 139\n\t        // Calculate new counter values                                                                               // 140\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 141\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 142\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 143\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 144\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 145\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 146\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 147\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 148\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 149\n                                                                                                                       // 150\n\t        // Calculate the g-values                                                                                     // 151\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 152\n\t            var gx = X[i] + C[i];                                                                                     // 153\n                                                                                                                       // 154\n\t            // Construct high and low argument for squaring                                                           // 155\n\t            var ga = gx & 0xffff;                                                                                     // 156\n\t            var gb = gx >>> 16;                                                                                       // 157\n                                                                                                                       // 158\n\t            // Calculate high and low result of squaring                                                              // 159\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 160\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 161\n                                                                                                                       // 162\n\t            // High XOR low                                                                                           // 163\n\t            G[i] = gh ^ gl;                                                                                           // 164\n\t        }                                                                                                             // 165\n                                                                                                                       // 166\n\t        // Calculate new state values                                                                                 // 167\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 168\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 169\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 170\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 171\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 172\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 173\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 174\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 175\n\t    }                                                                                                                 // 176\n                                                                                                                       // 177\n\t    /**                                                                                                               // 178\n\t     * Shortcut functions to the cipher's object interface.                                                           // 179\n\t     *                                                                                                                // 180\n\t     * @example                                                                                                       // 181\n\t     *                                                                                                                // 182\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);                                               // 183\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);                                            // 184\n\t     */                                                                                                               // 185\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);                                                                    // 186\n\t}());                                                                                                                 // 187\n                                                                                                                       // 188\n                                                                                                                       // 189\n\treturn CryptoJS.Rabbit;                                                                                               // 190\n                                                                                                                       // 191\n}));                                                                                                                   // 192\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"rabbit-legacy.js\":[\"./core\",\"./enc-base64\",\"./md5\",\"./evpkdf\",\"./cipher-core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/crypto-js/rabbit-legacy.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n;(function (root, factory, undef) {                                                                                    // 1\n\tif (typeof exports === \"object\") {                                                                                    // 2\n\t\t// CommonJS                                                                                                          // 3\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}                                                                                                                     // 5\n\telse if (typeof define === \"function\" && define.amd) {                                                                // 6\n\t\t// AMD                                                                                                               // 7\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);                                   // 8\n\t}                                                                                                                     // 9\n\telse {                                                                                                                // 10\n\t\t// Global (browser)                                                                                                  // 11\n\t\tfactory(root.CryptoJS);                                                                                              // 12\n\t}                                                                                                                     // 13\n}(this, function (CryptoJS) {                                                                                          // 14\n                                                                                                                       // 15\n\t(function () {                                                                                                        // 16\n\t    // Shortcuts                                                                                                      // 17\n\t    var C = CryptoJS;                                                                                                 // 18\n\t    var C_lib = C.lib;                                                                                                // 19\n\t    var StreamCipher = C_lib.StreamCipher;                                                                            // 20\n\t    var C_algo = C.algo;                                                                                              // 21\n                                                                                                                       // 22\n\t    // Reusable objects                                                                                               // 23\n\t    var S  = [];                                                                                                      // 24\n\t    var C_ = [];                                                                                                      // 25\n\t    var G  = [];                                                                                                      // 26\n                                                                                                                       // 27\n\t    /**                                                                                                               // 28\n\t     * Rabbit stream cipher algorithm.                                                                                // 29\n\t     *                                                                                                                // 30\n\t     * This is a legacy version that neglected to convert the key to little-endian.                                   // 31\n\t     * This error doesn't affect the cipher's security,                                                               // 32\n\t     * but it does affect its compatibility with other implementations.                                               // 33\n\t     */                                                                                                               // 34\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({                                                    // 35\n\t        _doReset: function () {                                                                                       // 36\n\t            // Shortcuts                                                                                              // 37\n\t            var K = this._key.words;                                                                                  // 38\n\t            var iv = this.cfg.iv;                                                                                     // 39\n                                                                                                                       // 40\n\t            // Generate initial state values                                                                          // 41\n\t            var X = this._X = [                                                                                       // 42\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),                                                                   // 43\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),                                                                   // 44\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),                                                                   // 45\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)                                                                    // 46\n\t            ];                                                                                                        // 47\n                                                                                                                       // 48\n\t            // Generate initial counter values                                                                        // 49\n\t            var C = this._C = [                                                                                       // 50\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),                              // 51\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),                              // 52\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),                              // 53\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)                               // 54\n\t            ];                                                                                                        // 55\n                                                                                                                       // 56\n\t            // Carry bit                                                                                              // 57\n\t            this._b = 0;                                                                                              // 58\n                                                                                                                       // 59\n\t            // Iterate the system four times                                                                          // 60\n\t            for (var i = 0; i < 4; i++) {                                                                             // 61\n\t                nextState.call(this);                                                                                 // 62\n\t            }                                                                                                         // 63\n                                                                                                                       // 64\n\t            // Modify the counters                                                                                    // 65\n\t            for (var i = 0; i < 8; i++) {                                                                             // 66\n\t                C[i] ^= X[(i + 4) & 7];                                                                               // 67\n\t            }                                                                                                         // 68\n                                                                                                                       // 69\n\t            // IV setup                                                                                               // 70\n\t            if (iv) {                                                                                                 // 71\n\t                // Shortcuts                                                                                          // 72\n\t                var IV = iv.words;                                                                                    // 73\n\t                var IV_0 = IV[0];                                                                                     // 74\n\t                var IV_1 = IV[1];                                                                                     // 75\n                                                                                                                       // 76\n\t                // Generate four subvectors                                                                           // 77\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);                                                             // 80\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);                                                             // 81\n                                                                                                                       // 82\n\t                // Modify counter values                                                                              // 83\n\t                C[0] ^= i0;                                                                                           // 84\n\t                C[1] ^= i1;                                                                                           // 85\n\t                C[2] ^= i2;                                                                                           // 86\n\t                C[3] ^= i3;                                                                                           // 87\n\t                C[4] ^= i0;                                                                                           // 88\n\t                C[5] ^= i1;                                                                                           // 89\n\t                C[6] ^= i2;                                                                                           // 90\n\t                C[7] ^= i3;                                                                                           // 91\n                                                                                                                       // 92\n\t                // Iterate the system four times                                                                      // 93\n\t                for (var i = 0; i < 4; i++) {                                                                         // 94\n\t                    nextState.call(this);                                                                             // 95\n\t                }                                                                                                     // 96\n\t            }                                                                                                         // 97\n\t        },                                                                                                            // 98\n                                                                                                                       // 99\n\t        _doProcessBlock: function (M, offset) {                                                                       // 100\n\t            // Shortcut                                                                                               // 101\n\t            var X = this._X;                                                                                          // 102\n                                                                                                                       // 103\n\t            // Iterate the system                                                                                     // 104\n\t            nextState.call(this);                                                                                     // 105\n                                                                                                                       // 106\n\t            // Generate four keystream words                                                                          // 107\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);                                                               // 108\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);                                                               // 109\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);                                                               // 110\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);                                                               // 111\n                                                                                                                       // 112\n\t            for (var i = 0; i < 4; i++) {                                                                             // 113\n\t                // Swap endian                                                                                        // 114\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |                                                // 115\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);                                                 // 116\n                                                                                                                       // 117\n\t                // Encrypt                                                                                            // 118\n\t                M[offset + i] ^= S[i];                                                                                // 119\n\t            }                                                                                                         // 120\n\t        },                                                                                                            // 121\n                                                                                                                       // 122\n\t        blockSize: 128/32,                                                                                            // 123\n                                                                                                                       // 124\n\t        ivSize: 64/32                                                                                                 // 125\n\t    });                                                                                                               // 126\n                                                                                                                       // 127\n\t    function nextState() {                                                                                            // 128\n\t        // Shortcuts                                                                                                  // 129\n\t        var X = this._X;                                                                                              // 130\n\t        var C = this._C;                                                                                              // 131\n                                                                                                                       // 132\n\t        // Save old counter values                                                                                    // 133\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 134\n\t            C_[i] = C[i];                                                                                             // 135\n\t        }                                                                                                             // 136\n                                                                                                                       // 137\n\t        // Calculate new counter values                                                                               // 138\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;                                                                     // 139\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;                                      // 140\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;                                      // 141\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;                                      // 142\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;                                      // 143\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;                                      // 144\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;                                      // 145\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;                                      // 146\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;                                                               // 147\n                                                                                                                       // 148\n\t        // Calculate the g-values                                                                                     // 149\n\t        for (var i = 0; i < 8; i++) {                                                                                 // 150\n\t            var gx = X[i] + C[i];                                                                                     // 151\n                                                                                                                       // 152\n\t            // Construct high and low argument for squaring                                                           // 153\n\t            var ga = gx & 0xffff;                                                                                     // 154\n\t            var gb = gx >>> 16;                                                                                       // 155\n                                                                                                                       // 156\n\t            // Calculate high and low result of squaring                                                              // 157\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;                                               // 158\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);                                 // 159\n                                                                                                                       // 160\n\t            // High XOR low                                                                                           // 161\n\t            G[i] = gh ^ gl;                                                                                           // 162\n\t        }                                                                                                             // 163\n                                                                                                                       // 164\n\t        // Calculate new state values                                                                                 // 165\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;                          // 166\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;                                                    // 167\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;                          // 168\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;                                                    // 169\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;                          // 170\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;                                                    // 171\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;                          // 172\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;                                                    // 173\n\t    }                                                                                                                 // 174\n                                                                                                                       // 175\n\t    /**                                                                                                               // 176\n\t     * Shortcut functions to the cipher's object interface.                                                           // 177\n\t     *                                                                                                                // 178\n\t     * @example                                                                                                       // 179\n\t     *                                                                                                                // 180\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);                                         // 181\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);                                      // 182\n\t     */                                                                                                               // 183\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);                                                        // 184\n\t}());                                                                                                                 // 185\n                                                                                                                       // 186\n                                                                                                                       // 187\n\treturn CryptoJS.RabbitLegacy;                                                                                         // 188\n                                                                                                                       // 189\n}));                                                                                                                   // 190\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node-stringprep\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/node-stringprep/package.json                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"node-stringprep\";                                                                                      // 1\nexports.version = \"0.8.0\";                                                                                             // 2\nexports.main = \"index.js\";                                                                                             // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"debug\",\"bindings\",\"./package.json\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/node-stringprep/index.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nvar log = require('debug')('node-stringprep')                                                                          // 3\n                                                                                                                       // 4\n// from unicode/uidna.h                                                                                                // 5\nvar UIDNA_ALLOW_UNASSIGNED = 1                                                                                         // 6\nvar UIDNA_USE_STD3_RULES = 2                                                                                           // 7\n                                                                                                                       // 8\ntry {                                                                                                                  // 9\n    var bindings = require('bindings')('node_stringprep.node')                                                         // 10\n} catch (ex) {                                                                                                         // 11\n    log(                                                                                                               // 12\n        'Cannot load StringPrep-' +                                                                                    // 13\n        require('./package.json').version +                                                                            // 14\n        ' bindings (using fallback). You may need to ' +                                                               // 15\n        '`npm install node-stringprep`'                                                                                // 16\n    )                                                                                                                  // 17\n    log(ex)                                                                                                            // 18\n}                                                                                                                      // 19\n                                                                                                                       // 20\nvar toUnicode = function(value, options) {                                                                             // 21\n    options = options || {}                                                                                            // 22\n    try {                                                                                                              // 23\n        return bindings.toUnicode(value,                                                                               // 24\n            (options.allowUnassigned && UIDNA_ALLOW_UNASSIGNED) | 0)                                                   // 25\n    } catch (e) {                                                                                                      // 26\n        return value                                                                                                   // 27\n    }                                                                                                                  // 28\n}                                                                                                                      // 29\n                                                                                                                       // 30\nvar toASCII = function(value, options) {                                                                               // 31\n    options = options || {}                                                                                            // 32\n    try {                                                                                                              // 33\n        return bindings.toASCII(value,                                                                                 // 34\n            (options.allowUnassigned && UIDNA_ALLOW_UNASSIGNED) |                                                      // 35\n            (options.useSTD3Rules && UIDNA_USE_STD3_RULES))                                                            // 36\n    } catch (e) {                                                                                                      // 37\n        if (options.throwIfError) {                                                                                    // 38\n            throw e                                                                                                    // 39\n        } else {                                                                                                       // 40\n            return value                                                                                               // 41\n        }                                                                                                              // 42\n    }                                                                                                                  // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\nvar StringPrep = function(operation) {                                                                                 // 46\n    this.operation = operation                                                                                         // 47\n    try {                                                                                                              // 48\n        this.stringPrep = new bindings.StringPrep(this.operation)                                                      // 49\n    } catch (e) {                                                                                                      // 50\n        this.stringPrep = null                                                                                         // 51\n        log('Operation does not exist', operation, e)                                                                  // 52\n    }                                                                                                                  // 53\n}                                                                                                                      // 54\n                                                                                                                       // 55\nStringPrep.prototype.UNKNOWN_PROFILE_TYPE = 'Unknown profile type'                                                     // 56\nStringPrep.prototype.UNHANDLED_FALLBACK = 'Unhandled JS fallback'                                                      // 57\nStringPrep.prototype.LIBICU_NOT_AVAILABLE = 'libicu unavailable'                                                       // 58\n                                                                                                                       // 59\nStringPrep.prototype.useJsFallbacks = true                                                                             // 60\n                                                                                                                       // 61\nStringPrep.prototype.prepare = function(value) {                                                                       // 62\n    this.value = value                                                                                                 // 63\n    try {                                                                                                              // 64\n        if (this.stringPrep) {                                                                                         // 65\n            return this.stringPrep.prepare(this.value)                                                                 // 66\n        }                                                                                                              // 67\n    } catch (e) {}                                                                                                     // 68\n    if (false === this.useJsFallbacks) {                                                                               // 69\n        throw new Error(this.LIBICU_NOT_AVAILABLE)                                                                     // 70\n    }                                                                                                                  // 71\n    return this.jsFallback()                                                                                           // 72\n}                                                                                                                      // 73\n                                                                                                                       // 74\nStringPrep.prototype.isNative = function() {                                                                           // 75\n    return (null !== this.stringPrep)                                                                                  // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nStringPrep.prototype.jsFallback = function() {                                                                         // 79\n    switch (this.operation) {                                                                                          // 80\n        case 'nameprep':                                                                                               // 81\n        case 'nodeprep':                                                                                               // 82\n            return this.value.toLowerCase()                                                                            // 83\n        case 'resourceprep':                                                                                           // 84\n            return this.value                                                                                          // 85\n        case 'nfs4_cs_prep':                                                                                           // 86\n        case 'nfs4_cis_prep':                                                                                          // 87\n        case 'nfs4_mixed_prep prefix':                                                                                 // 88\n        case 'nfs4_mixed_prep suffix':                                                                                 // 89\n        case 'iscsi':                                                                                                  // 90\n        case 'mib':                                                                                                    // 91\n        case 'saslprep':                                                                                               // 92\n        case 'trace':                                                                                                  // 93\n        case 'ldap':                                                                                                   // 94\n        case 'ldapci':                                                                                                 // 95\n            throw new Error(this.UNHANDLED_FALLBACK)                                                                   // 96\n        default:                                                                                                       // 97\n            throw new Error(this.UNKNOWN_PROFILE_TYPE)                                                                 // 98\n    }                                                                                                                  // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\nStringPrep.prototype.disableJsFallbacks = function() {                                                                 // 102\n    this.useJsFallbacks = false                                                                                        // 103\n}                                                                                                                      // 104\n                                                                                                                       // 105\nStringPrep.prototype.enableJsFallbacks = function() {                                                                  // 106\n    this.useJsFallbacks = true                                                                                         // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nmodule.exports = {                                                                                                     // 110\n    toUnicode: toUnicode,                                                                                              // 111\n    toASCII: toASCII,                                                                                                  // 112\n    StringPrep: StringPrep                                                                                             // 113\n}                                                                                                                      // 114\n                                                                                                                       // 115\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"debug\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/debug/package.json                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"debug\";                                                                                                // 1\nexports.version = \"2.2.0\";                                                                                             // 2\nexports.main = \"./browser.js\";                                                                                         // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser.js\":[\"./debug\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/debug/browser.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the web browser implementation of `debug()`.                                                                // 3\n *                                                                                                                     // 4\n * Expose `debug()` as the module.                                                                                     // 5\n */                                                                                                                    // 6\n                                                                                                                       // 7\nexports = module.exports = require('./debug');                                                                         // 8\nexports.log = log;                                                                                                     // 9\nexports.formatArgs = formatArgs;                                                                                       // 10\nexports.save = save;                                                                                                   // 11\nexports.load = load;                                                                                                   // 12\nexports.useColors = useColors;                                                                                         // 13\nexports.storage = 'undefined' != typeof chrome                                                                         // 14\n               && 'undefined' != typeof chrome.storage                                                                 // 15\n                  ? chrome.storage.local                                                                               // 16\n                  : localstorage();                                                                                    // 17\n                                                                                                                       // 18\n/**                                                                                                                    // 19\n * Colors.                                                                                                             // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nexports.colors = [                                                                                                     // 23\n  'lightseagreen',                                                                                                     // 24\n  'forestgreen',                                                                                                       // 25\n  'goldenrod',                                                                                                         // 26\n  'dodgerblue',                                                                                                        // 27\n  'darkorchid',                                                                                                        // 28\n  'crimson'                                                                                                            // 29\n];                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,                                                         // 33\n * and the Firebug extension (any Firefox version) are known                                                           // 34\n * to support \"%c\" CSS customizations.                                                                                 // 35\n *                                                                                                                     // 36\n * TODO: add a `localStorage` variable to explicitly enable/disable colors                                             // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction useColors() {                                                                                                 // 40\n  // is webkit? http://stackoverflow.com/a/16459606/376773                                                             // 41\n  return ('WebkitAppearance' in document.documentElement.style) ||                                                     // 42\n    // is firebug? http://stackoverflow.com/a/398120/376773                                                            // 43\n    (window.console && (console.firebug || (console.exception && console.table))) ||                                   // 44\n    // is firefox >= v31?                                                                                              // 45\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages                                     // 46\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);                      // 47\n}                                                                                                                      // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.                                           // 51\n */                                                                                                                    // 52\n                                                                                                                       // 53\nexports.formatters.j = function(v) {                                                                                   // 54\n  return JSON.stringify(v);                                                                                            // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Colorize log arguments if enabled.                                                                                  // 60\n *                                                                                                                     // 61\n * @api public                                                                                                         // 62\n */                                                                                                                    // 63\n                                                                                                                       // 64\nfunction formatArgs() {                                                                                                // 65\n  var args = arguments;                                                                                                // 66\n  var useColors = this.useColors;                                                                                      // 67\n                                                                                                                       // 68\n  args[0] = (useColors ? '%c' : '')                                                                                    // 69\n    + this.namespace                                                                                                   // 70\n    + (useColors ? ' %c' : ' ')                                                                                        // 71\n    + args[0]                                                                                                          // 72\n    + (useColors ? '%c ' : ' ')                                                                                        // 73\n    + '+' + exports.humanize(this.diff);                                                                               // 74\n                                                                                                                       // 75\n  if (!useColors) return args;                                                                                         // 76\n                                                                                                                       // 77\n  var c = 'color: ' + this.color;                                                                                      // 78\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));                                   // 79\n                                                                                                                       // 80\n  // the final \"%c\" is somewhat tricky, because there could be other                                                   // 81\n  // arguments passed either before or after the %c, so we need to                                                     // 82\n  // figure out the correct index to insert the CSS into                                                               // 83\n  var index = 0;                                                                                                       // 84\n  var lastC = 0;                                                                                                       // 85\n  args[0].replace(/%[a-z%]/g, function(match) {                                                                        // 86\n    if ('%%' === match) return;                                                                                        // 87\n    index++;                                                                                                           // 88\n    if ('%c' === match) {                                                                                              // 89\n      // we only are interested in the *last* %c                                                                       // 90\n      // (the user may have provided their own)                                                                        // 91\n      lastC = index;                                                                                                   // 92\n    }                                                                                                                  // 93\n  });                                                                                                                  // 94\n                                                                                                                       // 95\n  args.splice(lastC, 0, c);                                                                                            // 96\n  return args;                                                                                                         // 97\n}                                                                                                                      // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * Invokes `console.log()` when available.                                                                             // 101\n * No-op when `console.log` is not a \"function\".                                                                       // 102\n *                                                                                                                     // 103\n * @api public                                                                                                         // 104\n */                                                                                                                    // 105\n                                                                                                                       // 106\nfunction log() {                                                                                                       // 107\n  // this hackery is required for IE8/9, where                                                                         // 108\n  // the `console.log` function doesn't have 'apply'                                                                   // 109\n  return 'object' === typeof console                                                                                   // 110\n    && console.log                                                                                                     // 111\n    && Function.prototype.apply.call(console.log, console, arguments);                                                 // 112\n}                                                                                                                      // 113\n                                                                                                                       // 114\n/**                                                                                                                    // 115\n * Save `namespaces`.                                                                                                  // 116\n *                                                                                                                     // 117\n * @param {String} namespaces                                                                                          // 118\n * @api private                                                                                                        // 119\n */                                                                                                                    // 120\n                                                                                                                       // 121\nfunction save(namespaces) {                                                                                            // 122\n  try {                                                                                                                // 123\n    if (null == namespaces) {                                                                                          // 124\n      exports.storage.removeItem('debug');                                                                             // 125\n    } else {                                                                                                           // 126\n      exports.storage.debug = namespaces;                                                                              // 127\n    }                                                                                                                  // 128\n  } catch(e) {}                                                                                                        // 129\n}                                                                                                                      // 130\n                                                                                                                       // 131\n/**                                                                                                                    // 132\n * Load `namespaces`.                                                                                                  // 133\n *                                                                                                                     // 134\n * @return {String} returns the previously persisted debug modes                                                       // 135\n * @api private                                                                                                        // 136\n */                                                                                                                    // 137\n                                                                                                                       // 138\nfunction load() {                                                                                                      // 139\n  var r;                                                                                                               // 140\n  try {                                                                                                                // 141\n    r = exports.storage.debug;                                                                                         // 142\n  } catch(e) {}                                                                                                        // 143\n  return r;                                                                                                            // 144\n}                                                                                                                      // 145\n                                                                                                                       // 146\n/**                                                                                                                    // 147\n * Enable namespaces listed in `localStorage.debug` initially.                                                         // 148\n */                                                                                                                    // 149\n                                                                                                                       // 150\nexports.enable(load());                                                                                                // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Localstorage attempts to return the localstorage.                                                                   // 154\n *                                                                                                                     // 155\n * This is necessary because safari throws                                                                             // 156\n * when a user disables cookies/localstorage                                                                           // 157\n * and you attempt to access it.                                                                                       // 158\n *                                                                                                                     // 159\n * @return {LocalStorage}                                                                                              // 160\n * @api private                                                                                                        // 161\n */                                                                                                                    // 162\n                                                                                                                       // 163\nfunction localstorage(){                                                                                               // 164\n  try {                                                                                                                // 165\n    return window.localStorage;                                                                                        // 166\n  } catch (e) {}                                                                                                       // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"debug.js\":[\"ms\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/debug/debug.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * This is the common logic for both the Node.js and web browser                                                       // 3\n * implementations of `debug()`.                                                                                       // 4\n *                                                                                                                     // 5\n * Expose `debug()` as the module.                                                                                     // 6\n */                                                                                                                    // 7\n                                                                                                                       // 8\nexports = module.exports = debug;                                                                                      // 9\nexports.coerce = coerce;                                                                                               // 10\nexports.disable = disable;                                                                                             // 11\nexports.enable = enable;                                                                                               // 12\nexports.enabled = enabled;                                                                                             // 13\nexports.humanize = require('ms');                                                                                      // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * The currently active debug mode names, and names to skip.                                                           // 17\n */                                                                                                                    // 18\n                                                                                                                       // 19\nexports.names = [];                                                                                                    // 20\nexports.skips = [];                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.                                            // 24\n *                                                                                                                     // 25\n * Valid key names are a single, lowercased letter, i.e. \"n\".                                                          // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\nexports.formatters = {};                                                                                               // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Previously assigned color.                                                                                          // 32\n */                                                                                                                    // 33\n                                                                                                                       // 34\nvar prevColor = 0;                                                                                                     // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * Previous log timestamp.                                                                                             // 38\n */                                                                                                                    // 39\n                                                                                                                       // 40\nvar prevTime;                                                                                                          // 41\n                                                                                                                       // 42\n/**                                                                                                                    // 43\n * Select a color.                                                                                                     // 44\n *                                                                                                                     // 45\n * @return {Number}                                                                                                    // 46\n * @api private                                                                                                        // 47\n */                                                                                                                    // 48\n                                                                                                                       // 49\nfunction selectColor() {                                                                                               // 50\n  return exports.colors[prevColor++ % exports.colors.length];                                                          // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n/**                                                                                                                    // 54\n * Create a debugger with the given `namespace`.                                                                       // 55\n *                                                                                                                     // 56\n * @param {String} namespace                                                                                           // 57\n * @return {Function}                                                                                                  // 58\n * @api public                                                                                                         // 59\n */                                                                                                                    // 60\n                                                                                                                       // 61\nfunction debug(namespace) {                                                                                            // 62\n                                                                                                                       // 63\n  // define the `disabled` version                                                                                     // 64\n  function disabled() {                                                                                                // 65\n  }                                                                                                                    // 66\n  disabled.enabled = false;                                                                                            // 67\n                                                                                                                       // 68\n  // define the `enabled` version                                                                                      // 69\n  function enabled() {                                                                                                 // 70\n                                                                                                                       // 71\n    var self = enabled;                                                                                                // 72\n                                                                                                                       // 73\n    // set `diff` timestamp                                                                                            // 74\n    var curr = +new Date();                                                                                            // 75\n    var ms = curr - (prevTime || curr);                                                                                // 76\n    self.diff = ms;                                                                                                    // 77\n    self.prev = prevTime;                                                                                              // 78\n    self.curr = curr;                                                                                                  // 79\n    prevTime = curr;                                                                                                   // 80\n                                                                                                                       // 81\n    // add the `color` if not set                                                                                      // 82\n    if (null == self.useColors) self.useColors = exports.useColors();                                                  // 83\n    if (null == self.color && self.useColors) self.color = selectColor();                                              // 84\n                                                                                                                       // 85\n    var args = Array.prototype.slice.call(arguments);                                                                  // 86\n                                                                                                                       // 87\n    args[0] = exports.coerce(args[0]);                                                                                 // 88\n                                                                                                                       // 89\n    if ('string' !== typeof args[0]) {                                                                                 // 90\n      // anything else let's inspect with %o                                                                           // 91\n      args = ['%o'].concat(args);                                                                                      // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    // apply any `formatters` transformations                                                                          // 95\n    var index = 0;                                                                                                     // 96\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {                                                  // 97\n      // if we encounter an escaped % then don't increase the array index                                              // 98\n      if (match === '%%') return match;                                                                                // 99\n      index++;                                                                                                         // 100\n      var formatter = exports.formatters[format];                                                                      // 101\n      if ('function' === typeof formatter) {                                                                           // 102\n        var val = args[index];                                                                                         // 103\n        match = formatter.call(self, val);                                                                             // 104\n                                                                                                                       // 105\n        // now we need to remove `args[index]` since it's inlined in the `format`                                      // 106\n        args.splice(index, 1);                                                                                         // 107\n        index--;                                                                                                       // 108\n      }                                                                                                                // 109\n      return match;                                                                                                    // 110\n    });                                                                                                                // 111\n                                                                                                                       // 112\n    if ('function' === typeof exports.formatArgs) {                                                                    // 113\n      args = exports.formatArgs.apply(self, args);                                                                     // 114\n    }                                                                                                                  // 115\n    var logFn = enabled.log || exports.log || console.log.bind(console);                                               // 116\n    logFn.apply(self, args);                                                                                           // 117\n  }                                                                                                                    // 118\n  enabled.enabled = true;                                                                                              // 119\n                                                                                                                       // 120\n  var fn = exports.enabled(namespace) ? enabled : disabled;                                                            // 121\n                                                                                                                       // 122\n  fn.namespace = namespace;                                                                                            // 123\n                                                                                                                       // 124\n  return fn;                                                                                                           // 125\n}                                                                                                                      // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\n * Enables a debug mode by namespaces. This can include modes                                                          // 129\n * separated by a colon and wildcards.                                                                                 // 130\n *                                                                                                                     // 131\n * @param {String} namespaces                                                                                          // 132\n * @api public                                                                                                         // 133\n */                                                                                                                    // 134\n                                                                                                                       // 135\nfunction enable(namespaces) {                                                                                          // 136\n  exports.save(namespaces);                                                                                            // 137\n                                                                                                                       // 138\n  var split = (namespaces || '').split(/[\\s,]+/);                                                                      // 139\n  var len = split.length;                                                                                              // 140\n                                                                                                                       // 141\n  for (var i = 0; i < len; i++) {                                                                                      // 142\n    if (!split[i]) continue; // ignore empty strings                                                                   // 143\n    namespaces = split[i].replace(/\\*/g, '.*?');                                                                       // 144\n    if (namespaces[0] === '-') {                                                                                       // 145\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));                                                // 146\n    } else {                                                                                                           // 147\n      exports.names.push(new RegExp('^' + namespaces + '$'));                                                          // 148\n    }                                                                                                                  // 149\n  }                                                                                                                    // 150\n}                                                                                                                      // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Disable debug output.                                                                                               // 154\n *                                                                                                                     // 155\n * @api public                                                                                                         // 156\n */                                                                                                                    // 157\n                                                                                                                       // 158\nfunction disable() {                                                                                                   // 159\n  exports.enable('');                                                                                                  // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Returns true if the given mode name is enabled, false otherwise.                                                    // 164\n *                                                                                                                     // 165\n * @param {String} name                                                                                                // 166\n * @return {Boolean}                                                                                                   // 167\n * @api public                                                                                                         // 168\n */                                                                                                                    // 169\n                                                                                                                       // 170\nfunction enabled(name) {                                                                                               // 171\n  var i, len;                                                                                                          // 172\n  for (i = 0, len = exports.skips.length; i < len; i++) {                                                              // 173\n    if (exports.skips[i].test(name)) {                                                                                 // 174\n      return false;                                                                                                    // 175\n    }                                                                                                                  // 176\n  }                                                                                                                    // 177\n  for (i = 0, len = exports.names.length; i < len; i++) {                                                              // 178\n    if (exports.names[i].test(name)) {                                                                                 // 179\n      return true;                                                                                                     // 180\n    }                                                                                                                  // 181\n  }                                                                                                                    // 182\n  return false;                                                                                                        // 183\n}                                                                                                                      // 184\n                                                                                                                       // 185\n/**                                                                                                                    // 186\n * Coerce `val`.                                                                                                       // 187\n *                                                                                                                     // 188\n * @param {Mixed} val                                                                                                  // 189\n * @return {Mixed}                                                                                                     // 190\n * @api private                                                                                                        // 191\n */                                                                                                                    // 192\n                                                                                                                       // 193\nfunction coerce(val) {                                                                                                 // 194\n  if (val instanceof Error) return val.stack || val.message;                                                           // 195\n  return val;                                                                                                          // 196\n}                                                                                                                      // 197\n                                                                                                                       // 198\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"ms\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/ms/package.json                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"ms\";                                                                                                   // 1\nexports.version = \"0.7.1\";                                                                                             // 2\nexports.main = \"./index\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/ms/index.js                                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Helpers.                                                                                                            // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvar s = 1000;                                                                                                          // 5\nvar m = s * 60;                                                                                                        // 6\nvar h = m * 60;                                                                                                        // 7\nvar d = h * 24;                                                                                                        // 8\nvar y = d * 365.25;                                                                                                    // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Parse or format the given `val`.                                                                                    // 12\n *                                                                                                                     // 13\n * Options:                                                                                                            // 14\n *                                                                                                                     // 15\n *  - `long` verbose formatting [false]                                                                                // 16\n *                                                                                                                     // 17\n * @param {String|Number} val                                                                                          // 18\n * @param {Object} options                                                                                             // 19\n * @return {String|Number}                                                                                             // 20\n * @api public                                                                                                         // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nmodule.exports = function(val, options){                                                                               // 24\n  options = options || {};                                                                                             // 25\n  if ('string' == typeof val) return parse(val);                                                                       // 26\n  return options.long                                                                                                  // 27\n    ? long(val)                                                                                                        // 28\n    : short(val);                                                                                                      // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * Parse the given `str` and return milliseconds.                                                                      // 33\n *                                                                                                                     // 34\n * @param {String} str                                                                                                 // 35\n * @return {Number}                                                                                                    // 36\n * @api private                                                                                                        // 37\n */                                                                                                                    // 38\n                                                                                                                       // 39\nfunction parse(str) {                                                                                                  // 40\n  str = '' + str;                                                                                                      // 41\n  if (str.length > 10000) return;                                                                                      // 42\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;                                                                                                  // 44\n  var n = parseFloat(match[1]);                                                                                        // 45\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 46\n  switch (type) {                                                                                                      // 47\n    case 'years':                                                                                                      // 48\n    case 'year':                                                                                                       // 49\n    case 'yrs':                                                                                                        // 50\n    case 'yr':                                                                                                         // 51\n    case 'y':                                                                                                          // 52\n      return n * y;                                                                                                    // 53\n    case 'days':                                                                                                       // 54\n    case 'day':                                                                                                        // 55\n    case 'd':                                                                                                          // 56\n      return n * d;                                                                                                    // 57\n    case 'hours':                                                                                                      // 58\n    case 'hour':                                                                                                       // 59\n    case 'hrs':                                                                                                        // 60\n    case 'hr':                                                                                                         // 61\n    case 'h':                                                                                                          // 62\n      return n * h;                                                                                                    // 63\n    case 'minutes':                                                                                                    // 64\n    case 'minute':                                                                                                     // 65\n    case 'mins':                                                                                                       // 66\n    case 'min':                                                                                                        // 67\n    case 'm':                                                                                                          // 68\n      return n * m;                                                                                                    // 69\n    case 'seconds':                                                                                                    // 70\n    case 'second':                                                                                                     // 71\n    case 'secs':                                                                                                       // 72\n    case 'sec':                                                                                                        // 73\n    case 's':                                                                                                          // 74\n      return n * s;                                                                                                    // 75\n    case 'milliseconds':                                                                                               // 76\n    case 'millisecond':                                                                                                // 77\n    case 'msecs':                                                                                                      // 78\n    case 'msec':                                                                                                       // 79\n    case 'ms':                                                                                                         // 80\n      return n;                                                                                                        // 81\n  }                                                                                                                    // 82\n}                                                                                                                      // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * Short format for `ms`.                                                                                              // 86\n *                                                                                                                     // 87\n * @param {Number} ms                                                                                                  // 88\n * @return {String}                                                                                                    // 89\n * @api private                                                                                                        // 90\n */                                                                                                                    // 91\n                                                                                                                       // 92\nfunction short(ms) {                                                                                                   // 93\n  if (ms >= d) return Math.round(ms / d) + 'd';                                                                        // 94\n  if (ms >= h) return Math.round(ms / h) + 'h';                                                                        // 95\n  if (ms >= m) return Math.round(ms / m) + 'm';                                                                        // 96\n  if (ms >= s) return Math.round(ms / s) + 's';                                                                        // 97\n  return ms + 'ms';                                                                                                    // 98\n}                                                                                                                      // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Long format for `ms`.                                                                                               // 102\n *                                                                                                                     // 103\n * @param {Number} ms                                                                                                  // 104\n * @return {String}                                                                                                    // 105\n * @api private                                                                                                        // 106\n */                                                                                                                    // 107\n                                                                                                                       // 108\nfunction long(ms) {                                                                                                    // 109\n  return plural(ms, d, 'day')                                                                                          // 110\n    || plural(ms, h, 'hour')                                                                                           // 111\n    || plural(ms, m, 'minute')                                                                                         // 112\n    || plural(ms, s, 'second')                                                                                         // 113\n    || ms + ' ms';                                                                                                     // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n/**                                                                                                                    // 117\n * Pluralization helper.                                                                                               // 118\n */                                                                                                                    // 119\n                                                                                                                       // 120\nfunction plural(ms, n, name) {                                                                                         // 121\n  if (ms < n) return;                                                                                                  // 122\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;                                                            // 123\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 124\n}                                                                                                                      // 125\n                                                                                                                       // 126\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"bindings\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/bindings/package.json                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"bindings\";                                                                                             // 1\nexports.version = \"1.2.1\";                                                                                             // 2\nexports.main = \"./bindings.js\";                                                                                        // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bindings.js\":[\"fs\",\"path\",\"meteor-node-stubs/deps/fs\",\"meteor-node-stubs/deps/path\",function(require,exports,module,__filename){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/bindings/bindings.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/**                                                                                                                    // 2\n * Module dependencies.                                                                                                // 3\n */                                                                                                                    // 4\n                                                                                                                       // 5\nvar fs = require('fs')                                                                                                 // 6\n  , path = require('path')                                                                                             // 7\n  , join = path.join                                                                                                   // 8\n  , dirname = path.dirname                                                                                             // 9\n  , exists = fs.existsSync || path.existsSync                                                                          // 10\n  , defaults = {                                                                                                       // 11\n        arrow: process.env.NODE_BINDINGS_ARROW || ' → '                                                                // 12\n      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'                                                 // 13\n      , platform: process.platform                                                                                     // 14\n      , arch: process.arch                                                                                             // 15\n      , version: process.versions.node                                                                                 // 16\n      , bindings: 'bindings.node'                                                                                      // 17\n      , try: [                                                                                                         // 18\n          // node-gyp's linked version in the \"build\" dir                                                              // 19\n          [ 'module_root', 'build', 'bindings' ]                                                                       // 20\n          // node-waf and gyp_addon (a.k.a node-gyp)                                                                   // 21\n        , [ 'module_root', 'build', 'Debug', 'bindings' ]                                                              // 22\n        , [ 'module_root', 'build', 'Release', 'bindings' ]                                                            // 23\n          // Debug files, for development (legacy behavior, remove for node v0.9)                                      // 24\n        , [ 'module_root', 'out', 'Debug', 'bindings' ]                                                                // 25\n        , [ 'module_root', 'Debug', 'bindings' ]                                                                       // 26\n          // Release files, but manually compiled (legacy behavior, remove for node v0.9)                              // 27\n        , [ 'module_root', 'out', 'Release', 'bindings' ]                                                              // 28\n        , [ 'module_root', 'Release', 'bindings' ]                                                                     // 29\n          // Legacy from node-waf, node <= 0.4.x                                                                       // 30\n        , [ 'module_root', 'build', 'default', 'bindings' ]                                                            // 31\n          // Production \"Release\" buildtype binary (meh...)                                                            // 32\n        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]                                     // 33\n        ]                                                                                                              // 34\n    }                                                                                                                  // 35\n                                                                                                                       // 36\n/**                                                                                                                    // 37\n * The main `bindings()` function loads the compiled bindings for a given module.                                      // 38\n * It uses V8's Error API to determine the parent filename that this function is                                       // 39\n * being invoked from, which is then used to find the root directory.                                                  // 40\n */                                                                                                                    // 41\n                                                                                                                       // 42\nfunction bindings (opts) {                                                                                             // 43\n                                                                                                                       // 44\n  // Argument surgery                                                                                                  // 45\n  if (typeof opts == 'string') {                                                                                       // 46\n    opts = { bindings: opts }                                                                                          // 47\n  } else if (!opts) {                                                                                                  // 48\n    opts = {}                                                                                                          // 49\n  }                                                                                                                    // 50\n  opts.__proto__ = defaults                                                                                            // 51\n                                                                                                                       // 52\n  // Get the module root                                                                                               // 53\n  if (!opts.module_root) {                                                                                             // 54\n    opts.module_root = exports.getRoot(exports.getFileName())                                                          // 55\n  }                                                                                                                    // 56\n                                                                                                                       // 57\n  // Ensure the given bindings name ends with .node                                                                    // 58\n  if (path.extname(opts.bindings) != '.node') {                                                                        // 59\n    opts.bindings += '.node'                                                                                           // 60\n  }                                                                                                                    // 61\n                                                                                                                       // 62\n  var tries = []                                                                                                       // 63\n    , i = 0                                                                                                            // 64\n    , l = opts.try.length                                                                                              // 65\n    , n                                                                                                                // 66\n    , b                                                                                                                // 67\n    , err                                                                                                              // 68\n                                                                                                                       // 69\n  for (; i<l; i++) {                                                                                                   // 70\n    n = join.apply(null, opts.try[i].map(function (p) {                                                                // 71\n      return opts[p] || p                                                                                              // 72\n    }))                                                                                                                // 73\n    tries.push(n)                                                                                                      // 74\n    try {                                                                                                              // 75\n      b = opts.path ? require.resolve(n) : require(n)                                                                  // 76\n      if (!opts.path) {                                                                                                // 77\n        b.path = n                                                                                                     // 78\n      }                                                                                                                // 79\n      return b                                                                                                         // 80\n    } catch (e) {                                                                                                      // 81\n      if (!/not find/i.test(e.message)) {                                                                              // 82\n        throw e                                                                                                        // 83\n      }                                                                                                                // 84\n    }                                                                                                                  // 85\n  }                                                                                                                    // 86\n                                                                                                                       // 87\n  err = new Error('Could not locate the bindings file. Tried:\\n'                                                       // 88\n    + tries.map(function (a) { return opts.arrow + a }).join('\\n'))                                                    // 89\n  err.tries = tries                                                                                                    // 90\n  throw err                                                                                                            // 91\n}                                                                                                                      // 92\nmodule.exports = exports = bindings                                                                                    // 93\n                                                                                                                       // 94\n                                                                                                                       // 95\n/**                                                                                                                    // 96\n * Gets the filename of the JavaScript file that invokes this function.                                                // 97\n * Used to help find the root directory of a module.                                                                   // 98\n * Optionally accepts an filename argument to skip when searching for the invoking filename                            // 99\n */                                                                                                                    // 100\n                                                                                                                       // 101\nexports.getFileName = function getFileName (calling_file) {                                                            // 102\n  var origPST = Error.prepareStackTrace                                                                                // 103\n    , origSTL = Error.stackTraceLimit                                                                                  // 104\n    , dummy = {}                                                                                                       // 105\n    , fileName                                                                                                         // 106\n                                                                                                                       // 107\n  Error.stackTraceLimit = 10                                                                                           // 108\n                                                                                                                       // 109\n  Error.prepareStackTrace = function (e, st) {                                                                         // 110\n    for (var i=0, l=st.length; i<l; i++) {                                                                             // 111\n      fileName = st[i].getFileName()                                                                                   // 112\n      if (fileName !== __filename) {                                                                                   // 113\n        if (calling_file) {                                                                                            // 114\n            if (fileName !== calling_file) {                                                                           // 115\n              return                                                                                                   // 116\n            }                                                                                                          // 117\n        } else {                                                                                                       // 118\n          return                                                                                                       // 119\n        }                                                                                                              // 120\n      }                                                                                                                // 121\n    }                                                                                                                  // 122\n  }                                                                                                                    // 123\n                                                                                                                       // 124\n  // run the 'prepareStackTrace' function above                                                                        // 125\n  Error.captureStackTrace(dummy)                                                                                       // 126\n  dummy.stack                                                                                                          // 127\n                                                                                                                       // 128\n  // cleanup                                                                                                           // 129\n  Error.prepareStackTrace = origPST                                                                                    // 130\n  Error.stackTraceLimit = origSTL                                                                                      // 131\n                                                                                                                       // 132\n  return fileName                                                                                                      // 133\n}                                                                                                                      // 134\n                                                                                                                       // 135\n/**                                                                                                                    // 136\n * Gets the root directory of a module, given an arbitrary filename                                                    // 137\n * somewhere in the module tree. The \"root directory\" is the directory                                                 // 138\n * containing the `package.json` file.                                                                                 // 139\n *                                                                                                                     // 140\n *   In:  /home/nate/node-native-module/lib/index.js                                                                   // 141\n *   Out: /home/nate/node-native-module                                                                                // 142\n */                                                                                                                    // 143\n                                                                                                                       // 144\nexports.getRoot = function getRoot (file) {                                                                            // 145\n  var dir = dirname(file)                                                                                              // 146\n    , prev                                                                                                             // 147\n  while (true) {                                                                                                       // 148\n    if (dir === '.') {                                                                                                 // 149\n      // Avoids an infinite loop in rare cases, like the REPL                                                          // 150\n      dir = process.cwd()                                                                                              // 151\n    }                                                                                                                  // 152\n    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {                                      // 153\n      // Found the 'package.json' file or 'node_modules' dir; we're done                                               // 154\n      return dir                                                                                                       // 155\n    }                                                                                                                  // 156\n    if (prev === dir) {                                                                                                // 157\n      // Got to the top                                                                                                // 158\n      throw new Error('Could not find module root given file: \"' + file                                                // 159\n                    + '\". Do you have a `package.json` file? ')                                                        // 160\n    }                                                                                                                  // 161\n    // Try the parent dir next                                                                                         // 162\n    prev = dir                                                                                                         // 163\n    dir = join(dir, '..')                                                                                              // 164\n  }                                                                                                                    // 165\n}                                                                                                                      // 166\n                                                                                                                       // 167\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"underscore\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/underscore/package.json                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"underscore\";                                                                                           // 1\nexports.version = \"1.8.3\";                                                                                             // 2\nexports.main = \"underscore.js\";                                                                                        // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"underscore.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/underscore/underscore.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n//     Underscore.js 1.8.3                                                                                             // 1\n//     http://underscorejs.org                                                                                         // 2\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors                              // 3\n//     Underscore may be freely distributed under the MIT license.                                                     // 4\n                                                                                                                       // 5\n(function() {                                                                                                          // 6\n                                                                                                                       // 7\n  // Baseline setup                                                                                                    // 8\n  // --------------                                                                                                    // 9\n                                                                                                                       // 10\n  // Establish the root object, `window` in the browser, or `exports` on the server.                                   // 11\n  var root = this;                                                                                                     // 12\n                                                                                                                       // 13\n  // Save the previous value of the `_` variable.                                                                      // 14\n  var previousUnderscore = root._;                                                                                     // 15\n                                                                                                                       // 16\n  // Save bytes in the minified (but not gzipped) version:                                                             // 17\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;                       // 18\n                                                                                                                       // 19\n  // Create quick reference variables for speed access to core prototypes.                                             // 20\n  var                                                                                                                  // 21\n    push             = ArrayProto.push,                                                                                // 22\n    slice            = ArrayProto.slice,                                                                               // 23\n    toString         = ObjProto.toString,                                                                              // 24\n    hasOwnProperty   = ObjProto.hasOwnProperty;                                                                        // 25\n                                                                                                                       // 26\n  // All **ECMAScript 5** native function implementations that we hope to use                                          // 27\n  // are declared here.                                                                                                // 28\n  var                                                                                                                  // 29\n    nativeIsArray      = Array.isArray,                                                                                // 30\n    nativeKeys         = Object.keys,                                                                                  // 31\n    nativeBind         = FuncProto.bind,                                                                               // 32\n    nativeCreate       = Object.create;                                                                                // 33\n                                                                                                                       // 34\n  // Naked function reference for surrogate-prototype-swapping.                                                        // 35\n  var Ctor = function(){};                                                                                             // 36\n                                                                                                                       // 37\n  // Create a safe reference to the Underscore object for use below.                                                   // 38\n  var _ = function(obj) {                                                                                              // 39\n    if (obj instanceof _) return obj;                                                                                  // 40\n    if (!(this instanceof _)) return new _(obj);                                                                       // 41\n    this._wrapped = obj;                                                                                               // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  // Export the Underscore object for **Node.js**, with                                                                // 45\n  // backwards-compatibility for the old `require()` API. If we're in                                                  // 46\n  // the browser, add `_` as a global object.                                                                          // 47\n  if (typeof exports !== 'undefined') {                                                                                // 48\n    if (typeof module !== 'undefined' && module.exports) {                                                             // 49\n      exports = module.exports = _;                                                                                    // 50\n    }                                                                                                                  // 51\n    exports._ = _;                                                                                                     // 52\n  } else {                                                                                                             // 53\n    root._ = _;                                                                                                        // 54\n  }                                                                                                                    // 55\n                                                                                                                       // 56\n  // Current version.                                                                                                  // 57\n  _.VERSION = '1.8.3';                                                                                                 // 58\n                                                                                                                       // 59\n  // Internal function that returns an efficient (for current engines) version                                         // 60\n  // of the passed-in callback, to be repeatedly applied in other Underscore                                           // 61\n  // functions.                                                                                                        // 62\n  var optimizeCb = function(func, context, argCount) {                                                                 // 63\n    if (context === void 0) return func;                                                                               // 64\n    switch (argCount == null ? 3 : argCount) {                                                                         // 65\n      case 1: return function(value) {                                                                                 // 66\n        return func.call(context, value);                                                                              // 67\n      };                                                                                                               // 68\n      case 2: return function(value, other) {                                                                          // 69\n        return func.call(context, value, other);                                                                       // 70\n      };                                                                                                               // 71\n      case 3: return function(value, index, collection) {                                                              // 72\n        return func.call(context, value, index, collection);                                                           // 73\n      };                                                                                                               // 74\n      case 4: return function(accumulator, value, index, collection) {                                                 // 75\n        return func.call(context, accumulator, value, index, collection);                                              // 76\n      };                                                                                                               // 77\n    }                                                                                                                  // 78\n    return function() {                                                                                                // 79\n      return func.apply(context, arguments);                                                                           // 80\n    };                                                                                                                 // 81\n  };                                                                                                                   // 82\n                                                                                                                       // 83\n  // A mostly-internal function to generate callbacks that can be applied                                              // 84\n  // to each element in a collection, returning the desired result — either                                            // 85\n  // identity, an arbitrary callback, a property matcher, or a property accessor.                                      // 86\n  var cb = function(value, context, argCount) {                                                                        // 87\n    if (value == null) return _.identity;                                                                              // 88\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);                                              // 89\n    if (_.isObject(value)) return _.matcher(value);                                                                    // 90\n    return _.property(value);                                                                                          // 91\n  };                                                                                                                   // 92\n  _.iteratee = function(value, context) {                                                                              // 93\n    return cb(value, context, Infinity);                                                                               // 94\n  };                                                                                                                   // 95\n                                                                                                                       // 96\n  // An internal function for creating assigner functions.                                                             // 97\n  var createAssigner = function(keysFunc, undefinedOnly) {                                                             // 98\n    return function(obj) {                                                                                             // 99\n      var length = arguments.length;                                                                                   // 100\n      if (length < 2 || obj == null) return obj;                                                                       // 101\n      for (var index = 1; index < length; index++) {                                                                   // 102\n        var source = arguments[index],                                                                                 // 103\n            keys = keysFunc(source),                                                                                   // 104\n            l = keys.length;                                                                                           // 105\n        for (var i = 0; i < l; i++) {                                                                                  // 106\n          var key = keys[i];                                                                                           // 107\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];                                           // 108\n        }                                                                                                              // 109\n      }                                                                                                                // 110\n      return obj;                                                                                                      // 111\n    };                                                                                                                 // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n  // An internal function for creating a new object that inherits from another.                                        // 115\n  var baseCreate = function(prototype) {                                                                               // 116\n    if (!_.isObject(prototype)) return {};                                                                             // 117\n    if (nativeCreate) return nativeCreate(prototype);                                                                  // 118\n    Ctor.prototype = prototype;                                                                                        // 119\n    var result = new Ctor;                                                                                             // 120\n    Ctor.prototype = null;                                                                                             // 121\n    return result;                                                                                                     // 122\n  };                                                                                                                   // 123\n                                                                                                                       // 124\n  var property = function(key) {                                                                                       // 125\n    return function(obj) {                                                                                             // 126\n      return obj == null ? void 0 : obj[key];                                                                          // 127\n    };                                                                                                                 // 128\n  };                                                                                                                   // 129\n                                                                                                                       // 130\n  // Helper for collection methods to determine whether a collection                                                   // 131\n  // should be iterated as an array or as an object                                                                    // 132\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength                                        // 133\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094                                                                // 134\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;                                                                           // 135\n  var getLength = property('length');                                                                                  // 136\n  var isArrayLike = function(collection) {                                                                             // 137\n    var length = getLength(collection);                                                                                // 138\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;                                      // 139\n  };                                                                                                                   // 140\n                                                                                                                       // 141\n  // Collection Functions                                                                                              // 142\n  // --------------------                                                                                              // 143\n                                                                                                                       // 144\n  // The cornerstone, an `each` implementation, aka `forEach`.                                                         // 145\n  // Handles raw objects in addition to array-likes. Treats all                                                        // 146\n  // sparse array-likes as if they were dense.                                                                         // 147\n  _.each = _.forEach = function(obj, iteratee, context) {                                                              // 148\n    iteratee = optimizeCb(iteratee, context);                                                                          // 149\n    var i, length;                                                                                                     // 150\n    if (isArrayLike(obj)) {                                                                                            // 151\n      for (i = 0, length = obj.length; i < length; i++) {                                                              // 152\n        iteratee(obj[i], i, obj);                                                                                      // 153\n      }                                                                                                                // 154\n    } else {                                                                                                           // 155\n      var keys = _.keys(obj);                                                                                          // 156\n      for (i = 0, length = keys.length; i < length; i++) {                                                             // 157\n        iteratee(obj[keys[i]], keys[i], obj);                                                                          // 158\n      }                                                                                                                // 159\n    }                                                                                                                  // 160\n    return obj;                                                                                                        // 161\n  };                                                                                                                   // 162\n                                                                                                                       // 163\n  // Return the results of applying the iteratee to each element.                                                      // 164\n  _.map = _.collect = function(obj, iteratee, context) {                                                               // 165\n    iteratee = cb(iteratee, context);                                                                                  // 166\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 167\n        length = (keys || obj).length,                                                                                 // 168\n        results = Array(length);                                                                                       // 169\n    for (var index = 0; index < length; index++) {                                                                     // 170\n      var currentKey = keys ? keys[index] : index;                                                                     // 171\n      results[index] = iteratee(obj[currentKey], currentKey, obj);                                                     // 172\n    }                                                                                                                  // 173\n    return results;                                                                                                    // 174\n  };                                                                                                                   // 175\n                                                                                                                       // 176\n  // Create a reducing function iterating left or right.                                                               // 177\n  function createReduce(dir) {                                                                                         // 178\n    // Optimized iterator function as using arguments.length                                                           // 179\n    // in the main function will deoptimize the, see #1991.                                                            // 180\n    function iterator(obj, iteratee, memo, keys, index, length) {                                                      // 181\n      for (; index >= 0 && index < length; index += dir) {                                                             // 182\n        var currentKey = keys ? keys[index] : index;                                                                   // 183\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);                                                       // 184\n      }                                                                                                                // 185\n      return memo;                                                                                                     // 186\n    }                                                                                                                  // 187\n                                                                                                                       // 188\n    return function(obj, iteratee, memo, context) {                                                                    // 189\n      iteratee = optimizeCb(iteratee, context, 4);                                                                     // 190\n      var keys = !isArrayLike(obj) && _.keys(obj),                                                                     // 191\n          length = (keys || obj).length,                                                                               // 192\n          index = dir > 0 ? 0 : length - 1;                                                                            // 193\n      // Determine the initial value if none is provided.                                                              // 194\n      if (arguments.length < 3) {                                                                                      // 195\n        memo = obj[keys ? keys[index] : index];                                                                        // 196\n        index += dir;                                                                                                  // 197\n      }                                                                                                                // 198\n      return iterator(obj, iteratee, memo, keys, index, length);                                                       // 199\n    };                                                                                                                 // 200\n  }                                                                                                                    // 201\n                                                                                                                       // 202\n  // **Reduce** builds up a single result from a list of values, aka `inject`,                                         // 203\n  // or `foldl`.                                                                                                       // 204\n  _.reduce = _.foldl = _.inject = createReduce(1);                                                                     // 205\n                                                                                                                       // 206\n  // The right-associative version of reduce, also known as `foldr`.                                                   // 207\n  _.reduceRight = _.foldr = createReduce(-1);                                                                          // 208\n                                                                                                                       // 209\n  // Return the first value which passes a truth test. Aliased as `detect`.                                            // 210\n  _.find = _.detect = function(obj, predicate, context) {                                                              // 211\n    var key;                                                                                                           // 212\n    if (isArrayLike(obj)) {                                                                                            // 213\n      key = _.findIndex(obj, predicate, context);                                                                      // 214\n    } else {                                                                                                           // 215\n      key = _.findKey(obj, predicate, context);                                                                        // 216\n    }                                                                                                                  // 217\n    if (key !== void 0 && key !== -1) return obj[key];                                                                 // 218\n  };                                                                                                                   // 219\n                                                                                                                       // 220\n  // Return all the elements that pass a truth test.                                                                   // 221\n  // Aliased as `select`.                                                                                              // 222\n  _.filter = _.select = function(obj, predicate, context) {                                                            // 223\n    var results = [];                                                                                                  // 224\n    predicate = cb(predicate, context);                                                                                // 225\n    _.each(obj, function(value, index, list) {                                                                         // 226\n      if (predicate(value, index, list)) results.push(value);                                                          // 227\n    });                                                                                                                // 228\n    return results;                                                                                                    // 229\n  };                                                                                                                   // 230\n                                                                                                                       // 231\n  // Return all the elements for which a truth test fails.                                                             // 232\n  _.reject = function(obj, predicate, context) {                                                                       // 233\n    return _.filter(obj, _.negate(cb(predicate)), context);                                                            // 234\n  };                                                                                                                   // 235\n                                                                                                                       // 236\n  // Determine whether all of the elements match a truth test.                                                         // 237\n  // Aliased as `all`.                                                                                                 // 238\n  _.every = _.all = function(obj, predicate, context) {                                                                // 239\n    predicate = cb(predicate, context);                                                                                // 240\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 241\n        length = (keys || obj).length;                                                                                 // 242\n    for (var index = 0; index < length; index++) {                                                                     // 243\n      var currentKey = keys ? keys[index] : index;                                                                     // 244\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;                                                  // 245\n    }                                                                                                                  // 246\n    return true;                                                                                                       // 247\n  };                                                                                                                   // 248\n                                                                                                                       // 249\n  // Determine if at least one element in the object matches a truth test.                                             // 250\n  // Aliased as `any`.                                                                                                 // 251\n  _.some = _.any = function(obj, predicate, context) {                                                                 // 252\n    predicate = cb(predicate, context);                                                                                // 253\n    var keys = !isArrayLike(obj) && _.keys(obj),                                                                       // 254\n        length = (keys || obj).length;                                                                                 // 255\n    for (var index = 0; index < length; index++) {                                                                     // 256\n      var currentKey = keys ? keys[index] : index;                                                                     // 257\n      if (predicate(obj[currentKey], currentKey, obj)) return true;                                                    // 258\n    }                                                                                                                  // 259\n    return false;                                                                                                      // 260\n  };                                                                                                                   // 261\n                                                                                                                       // 262\n  // Determine if the array or object contains a given item (using `===`).                                             // 263\n  // Aliased as `includes` and `include`.                                                                              // 264\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {                                        // 265\n    if (!isArrayLike(obj)) obj = _.values(obj);                                                                        // 266\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;                                                          // 267\n    return _.indexOf(obj, item, fromIndex) >= 0;                                                                       // 268\n  };                                                                                                                   // 269\n                                                                                                                       // 270\n  // Invoke a method (with arguments) on every item in a collection.                                                   // 271\n  _.invoke = function(obj, method) {                                                                                   // 272\n    var args = slice.call(arguments, 2);                                                                               // 273\n    var isFunc = _.isFunction(method);                                                                                 // 274\n    return _.map(obj, function(value) {                                                                                // 275\n      var func = isFunc ? method : value[method];                                                                      // 276\n      return func == null ? func : func.apply(value, args);                                                            // 277\n    });                                                                                                                // 278\n  };                                                                                                                   // 279\n                                                                                                                       // 280\n  // Convenience version of a common use case of `map`: fetching a property.                                           // 281\n  _.pluck = function(obj, key) {                                                                                       // 282\n    return _.map(obj, _.property(key));                                                                                // 283\n  };                                                                                                                   // 284\n                                                                                                                       // 285\n  // Convenience version of a common use case of `filter`: selecting only objects                                      // 286\n  // containing specific `key:value` pairs.                                                                            // 287\n  _.where = function(obj, attrs) {                                                                                     // 288\n    return _.filter(obj, _.matcher(attrs));                                                                            // 289\n  };                                                                                                                   // 290\n                                                                                                                       // 291\n  // Convenience version of a common use case of `find`: getting the first object                                      // 292\n  // containing specific `key:value` pairs.                                                                            // 293\n  _.findWhere = function(obj, attrs) {                                                                                 // 294\n    return _.find(obj, _.matcher(attrs));                                                                              // 295\n  };                                                                                                                   // 296\n                                                                                                                       // 297\n  // Return the maximum element (or element-based computation).                                                        // 298\n  _.max = function(obj, iteratee, context) {                                                                           // 299\n    var result = -Infinity, lastComputed = -Infinity,                                                                  // 300\n        value, computed;                                                                                               // 301\n    if (iteratee == null && obj != null) {                                                                             // 302\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 303\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 304\n        value = obj[i];                                                                                                // 305\n        if (value > result) {                                                                                          // 306\n          result = value;                                                                                              // 307\n        }                                                                                                              // 308\n      }                                                                                                                // 309\n    } else {                                                                                                           // 310\n      iteratee = cb(iteratee, context);                                                                                // 311\n      _.each(obj, function(value, index, list) {                                                                       // 312\n        computed = iteratee(value, index, list);                                                                       // 313\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {                               // 314\n          result = value;                                                                                              // 315\n          lastComputed = computed;                                                                                     // 316\n        }                                                                                                              // 317\n      });                                                                                                              // 318\n    }                                                                                                                  // 319\n    return result;                                                                                                     // 320\n  };                                                                                                                   // 321\n                                                                                                                       // 322\n  // Return the minimum element (or element-based computation).                                                        // 323\n  _.min = function(obj, iteratee, context) {                                                                           // 324\n    var result = Infinity, lastComputed = Infinity,                                                                    // 325\n        value, computed;                                                                                               // 326\n    if (iteratee == null && obj != null) {                                                                             // 327\n      obj = isArrayLike(obj) ? obj : _.values(obj);                                                                    // 328\n      for (var i = 0, length = obj.length; i < length; i++) {                                                          // 329\n        value = obj[i];                                                                                                // 330\n        if (value < result) {                                                                                          // 331\n          result = value;                                                                                              // 332\n        }                                                                                                              // 333\n      }                                                                                                                // 334\n    } else {                                                                                                           // 335\n      iteratee = cb(iteratee, context);                                                                                // 336\n      _.each(obj, function(value, index, list) {                                                                       // 337\n        computed = iteratee(value, index, list);                                                                       // 338\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {                                 // 339\n          result = value;                                                                                              // 340\n          lastComputed = computed;                                                                                     // 341\n        }                                                                                                              // 342\n      });                                                                                                              // 343\n    }                                                                                                                  // 344\n    return result;                                                                                                     // 345\n  };                                                                                                                   // 346\n                                                                                                                       // 347\n  // Shuffle a collection, using the modern version of the                                                             // 348\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).                                        // 349\n  _.shuffle = function(obj) {                                                                                          // 350\n    var set = isArrayLike(obj) ? obj : _.values(obj);                                                                  // 351\n    var length = set.length;                                                                                           // 352\n    var shuffled = Array(length);                                                                                      // 353\n    for (var index = 0, rand; index < length; index++) {                                                               // 354\n      rand = _.random(0, index);                                                                                       // 355\n      if (rand !== index) shuffled[index] = shuffled[rand];                                                            // 356\n      shuffled[rand] = set[index];                                                                                     // 357\n    }                                                                                                                  // 358\n    return shuffled;                                                                                                   // 359\n  };                                                                                                                   // 360\n                                                                                                                       // 361\n  // Sample **n** random values from a collection.                                                                     // 362\n  // If **n** is not specified, returns a single random element.                                                       // 363\n  // The internal `guard` argument allows it to work with `map`.                                                       // 364\n  _.sample = function(obj, n, guard) {                                                                                 // 365\n    if (n == null || guard) {                                                                                          // 366\n      if (!isArrayLike(obj)) obj = _.values(obj);                                                                      // 367\n      return obj[_.random(obj.length - 1)];                                                                            // 368\n    }                                                                                                                  // 369\n    return _.shuffle(obj).slice(0, Math.max(0, n));                                                                    // 370\n  };                                                                                                                   // 371\n                                                                                                                       // 372\n  // Sort the object's values by a criterion produced by an iteratee.                                                  // 373\n  _.sortBy = function(obj, iteratee, context) {                                                                        // 374\n    iteratee = cb(iteratee, context);                                                                                  // 375\n    return _.pluck(_.map(obj, function(value, index, list) {                                                           // 376\n      return {                                                                                                         // 377\n        value: value,                                                                                                  // 378\n        index: index,                                                                                                  // 379\n        criteria: iteratee(value, index, list)                                                                         // 380\n      };                                                                                                               // 381\n    }).sort(function(left, right) {                                                                                    // 382\n      var a = left.criteria;                                                                                           // 383\n      var b = right.criteria;                                                                                          // 384\n      if (a !== b) {                                                                                                   // 385\n        if (a > b || a === void 0) return 1;                                                                           // 386\n        if (a < b || b === void 0) return -1;                                                                          // 387\n      }                                                                                                                // 388\n      return left.index - right.index;                                                                                 // 389\n    }), 'value');                                                                                                      // 390\n  };                                                                                                                   // 391\n                                                                                                                       // 392\n  // An internal function used for aggregate \"group by\" operations.                                                    // 393\n  var group = function(behavior) {                                                                                     // 394\n    return function(obj, iteratee, context) {                                                                          // 395\n      var result = {};                                                                                                 // 396\n      iteratee = cb(iteratee, context);                                                                                // 397\n      _.each(obj, function(value, index) {                                                                             // 398\n        var key = iteratee(value, index, obj);                                                                         // 399\n        behavior(result, value, key);                                                                                  // 400\n      });                                                                                                              // 401\n      return result;                                                                                                   // 402\n    };                                                                                                                 // 403\n  };                                                                                                                   // 404\n                                                                                                                       // 405\n  // Groups the object's values by a criterion. Pass either a string attribute                                         // 406\n  // to group by, or a function that returns the criterion.                                                            // 407\n  _.groupBy = group(function(result, value, key) {                                                                     // 408\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];                                       // 409\n  });                                                                                                                  // 410\n                                                                                                                       // 411\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for                                         // 412\n  // when you know that your index values will be unique.                                                              // 413\n  _.indexBy = group(function(result, value, key) {                                                                     // 414\n    result[key] = value;                                                                                               // 415\n  });                                                                                                                  // 416\n                                                                                                                       // 417\n  // Counts instances of an object that group by a certain criterion. Pass                                             // 418\n  // either a string attribute to count by, or a function that returns the                                             // 419\n  // criterion.                                                                                                        // 420\n  _.countBy = group(function(result, value, key) {                                                                     // 421\n    if (_.has(result, key)) result[key]++; else result[key] = 1;                                                       // 422\n  });                                                                                                                  // 423\n                                                                                                                       // 424\n  // Safely create a real, live array from anything iterable.                                                          // 425\n  _.toArray = function(obj) {                                                                                          // 426\n    if (!obj) return [];                                                                                               // 427\n    if (_.isArray(obj)) return slice.call(obj);                                                                        // 428\n    if (isArrayLike(obj)) return _.map(obj, _.identity);                                                               // 429\n    return _.values(obj);                                                                                              // 430\n  };                                                                                                                   // 431\n                                                                                                                       // 432\n  // Return the number of elements in an object.                                                                       // 433\n  _.size = function(obj) {                                                                                             // 434\n    if (obj == null) return 0;                                                                                         // 435\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;                                                         // 436\n  };                                                                                                                   // 437\n                                                                                                                       // 438\n  // Split a collection into two arrays: one whose elements all satisfy the given                                      // 439\n  // predicate, and one whose elements all do not satisfy the predicate.                                               // 440\n  _.partition = function(obj, predicate, context) {                                                                    // 441\n    predicate = cb(predicate, context);                                                                                // 442\n    var pass = [], fail = [];                                                                                          // 443\n    _.each(obj, function(value, key, obj) {                                                                            // 444\n      (predicate(value, key, obj) ? pass : fail).push(value);                                                          // 445\n    });                                                                                                                // 446\n    return [pass, fail];                                                                                               // 447\n  };                                                                                                                   // 448\n                                                                                                                       // 449\n  // Array Functions                                                                                                   // 450\n  // ---------------                                                                                                   // 451\n                                                                                                                       // 452\n  // Get the first element of an array. Passing **n** will return the first N                                          // 453\n  // values in the array. Aliased as `head` and `take`. The **guard** check                                            // 454\n  // allows it to work with `_.map`.                                                                                   // 455\n  _.first = _.head = _.take = function(array, n, guard) {                                                              // 456\n    if (array == null) return void 0;                                                                                  // 457\n    if (n == null || guard) return array[0];                                                                           // 458\n    return _.initial(array, array.length - n);                                                                         // 459\n  };                                                                                                                   // 460\n                                                                                                                       // 461\n  // Returns everything but the last entry of the array. Especially useful on                                          // 462\n  // the arguments object. Passing **n** will return all the values in                                                 // 463\n  // the array, excluding the last N.                                                                                  // 464\n  _.initial = function(array, n, guard) {                                                                              // 465\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));                             // 466\n  };                                                                                                                   // 467\n                                                                                                                       // 468\n  // Get the last element of an array. Passing **n** will return the last N                                            // 469\n  // values in the array.                                                                                              // 470\n  _.last = function(array, n, guard) {                                                                                 // 471\n    if (array == null) return void 0;                                                                                  // 472\n    if (n == null || guard) return array[array.length - 1];                                                            // 473\n    return _.rest(array, Math.max(0, array.length - n));                                                               // 474\n  };                                                                                                                   // 475\n                                                                                                                       // 476\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.                                // 477\n  // Especially useful on the arguments object. Passing an **n** will return                                           // 478\n  // the rest N values in the array.                                                                                   // 479\n  _.rest = _.tail = _.drop = function(array, n, guard) {                                                               // 480\n    return slice.call(array, n == null || guard ? 1 : n);                                                              // 481\n  };                                                                                                                   // 482\n                                                                                                                       // 483\n  // Trim out all falsy values from an array.                                                                          // 484\n  _.compact = function(array) {                                                                                        // 485\n    return _.filter(array, _.identity);                                                                                // 486\n  };                                                                                                                   // 487\n                                                                                                                       // 488\n  // Internal implementation of a recursive `flatten` function.                                                        // 489\n  var flatten = function(input, shallow, strict, startIndex) {                                                         // 490\n    var output = [], idx = 0;                                                                                          // 491\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {                                        // 492\n      var value = input[i];                                                                                            // 493\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {                                          // 494\n        //flatten current level of array or arguments object                                                           // 495\n        if (!shallow) value = flatten(value, shallow, strict);                                                         // 496\n        var j = 0, len = value.length;                                                                                 // 497\n        output.length += len;                                                                                          // 498\n        while (j < len) {                                                                                              // 499\n          output[idx++] = value[j++];                                                                                  // 500\n        }                                                                                                              // 501\n      } else if (!strict) {                                                                                            // 502\n        output[idx++] = value;                                                                                         // 503\n      }                                                                                                                // 504\n    }                                                                                                                  // 505\n    return output;                                                                                                     // 506\n  };                                                                                                                   // 507\n                                                                                                                       // 508\n  // Flatten out an array, either recursively (by default), or just one level.                                         // 509\n  _.flatten = function(array, shallow) {                                                                               // 510\n    return flatten(array, shallow, false);                                                                             // 511\n  };                                                                                                                   // 512\n                                                                                                                       // 513\n  // Return a version of the array that does not contain the specified value(s).                                       // 514\n  _.without = function(array) {                                                                                        // 515\n    return _.difference(array, slice.call(arguments, 1));                                                              // 516\n  };                                                                                                                   // 517\n                                                                                                                       // 518\n  // Produce a duplicate-free version of the array. If the array has already                                           // 519\n  // been sorted, you have the option of using a faster algorithm.                                                     // 520\n  // Aliased as `unique`.                                                                                              // 521\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {                                                   // 522\n    if (!_.isBoolean(isSorted)) {                                                                                      // 523\n      context = iteratee;                                                                                              // 524\n      iteratee = isSorted;                                                                                             // 525\n      isSorted = false;                                                                                                // 526\n    }                                                                                                                  // 527\n    if (iteratee != null) iteratee = cb(iteratee, context);                                                            // 528\n    var result = [];                                                                                                   // 529\n    var seen = [];                                                                                                     // 530\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 531\n      var value = array[i],                                                                                            // 532\n          computed = iteratee ? iteratee(value, i, array) : value;                                                     // 533\n      if (isSorted) {                                                                                                  // 534\n        if (!i || seen !== computed) result.push(value);                                                               // 535\n        seen = computed;                                                                                               // 536\n      } else if (iteratee) {                                                                                           // 537\n        if (!_.contains(seen, computed)) {                                                                             // 538\n          seen.push(computed);                                                                                         // 539\n          result.push(value);                                                                                          // 540\n        }                                                                                                              // 541\n      } else if (!_.contains(result, value)) {                                                                         // 542\n        result.push(value);                                                                                            // 543\n      }                                                                                                                // 544\n    }                                                                                                                  // 545\n    return result;                                                                                                     // 546\n  };                                                                                                                   // 547\n                                                                                                                       // 548\n  // Produce an array that contains the union: each distinct element from all of                                       // 549\n  // the passed-in arrays.                                                                                             // 550\n  _.union = function() {                                                                                               // 551\n    return _.uniq(flatten(arguments, true, true));                                                                     // 552\n  };                                                                                                                   // 553\n                                                                                                                       // 554\n  // Produce an array that contains every item shared between all the                                                  // 555\n  // passed-in arrays.                                                                                                 // 556\n  _.intersection = function(array) {                                                                                   // 557\n    var result = [];                                                                                                   // 558\n    var argsLength = arguments.length;                                                                                 // 559\n    for (var i = 0, length = getLength(array); i < length; i++) {                                                      // 560\n      var item = array[i];                                                                                             // 561\n      if (_.contains(result, item)) continue;                                                                          // 562\n      for (var j = 1; j < argsLength; j++) {                                                                           // 563\n        if (!_.contains(arguments[j], item)) break;                                                                    // 564\n      }                                                                                                                // 565\n      if (j === argsLength) result.push(item);                                                                         // 566\n    }                                                                                                                  // 567\n    return result;                                                                                                     // 568\n  };                                                                                                                   // 569\n                                                                                                                       // 570\n  // Take the difference between one array and a number of other arrays.                                               // 571\n  // Only the elements present in just the first array will remain.                                                    // 572\n  _.difference = function(array) {                                                                                     // 573\n    var rest = flatten(arguments, true, true, 1);                                                                      // 574\n    return _.filter(array, function(value){                                                                            // 575\n      return !_.contains(rest, value);                                                                                 // 576\n    });                                                                                                                // 577\n  };                                                                                                                   // 578\n                                                                                                                       // 579\n  // Zip together multiple lists into a single array -- elements that share                                            // 580\n  // an index go together.                                                                                             // 581\n  _.zip = function() {                                                                                                 // 582\n    return _.unzip(arguments);                                                                                         // 583\n  };                                                                                                                   // 584\n                                                                                                                       // 585\n  // Complement of _.zip. Unzip accepts an array of arrays and groups                                                  // 586\n  // each array's elements on shared indices                                                                           // 587\n  _.unzip = function(array) {                                                                                          // 588\n    var length = array && _.max(array, getLength).length || 0;                                                         // 589\n    var result = Array(length);                                                                                        // 590\n                                                                                                                       // 591\n    for (var index = 0; index < length; index++) {                                                                     // 592\n      result[index] = _.pluck(array, index);                                                                           // 593\n    }                                                                                                                  // 594\n    return result;                                                                                                     // 595\n  };                                                                                                                   // 596\n                                                                                                                       // 597\n  // Converts lists into objects. Pass either a single array of `[key, value]`                                         // 598\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of                                       // 599\n  // the corresponding values.                                                                                         // 600\n  _.object = function(list, values) {                                                                                  // 601\n    var result = {};                                                                                                   // 602\n    for (var i = 0, length = getLength(list); i < length; i++) {                                                       // 603\n      if (values) {                                                                                                    // 604\n        result[list[i]] = values[i];                                                                                   // 605\n      } else {                                                                                                         // 606\n        result[list[i][0]] = list[i][1];                                                                               // 607\n      }                                                                                                                // 608\n    }                                                                                                                  // 609\n    return result;                                                                                                     // 610\n  };                                                                                                                   // 611\n                                                                                                                       // 612\n  // Generator function to create the findIndex and findLastIndex functions                                            // 613\n  function createPredicateIndexFinder(dir) {                                                                           // 614\n    return function(array, predicate, context) {                                                                       // 615\n      predicate = cb(predicate, context);                                                                              // 616\n      var length = getLength(array);                                                                                   // 617\n      var index = dir > 0 ? 0 : length - 1;                                                                            // 618\n      for (; index >= 0 && index < length; index += dir) {                                                             // 619\n        if (predicate(array[index], index, array)) return index;                                                       // 620\n      }                                                                                                                // 621\n      return -1;                                                                                                       // 622\n    };                                                                                                                 // 623\n  }                                                                                                                    // 624\n                                                                                                                       // 625\n  // Returns the first index on an array-like that passes a predicate test                                             // 626\n  _.findIndex = createPredicateIndexFinder(1);                                                                         // 627\n  _.findLastIndex = createPredicateIndexFinder(-1);                                                                    // 628\n                                                                                                                       // 629\n  // Use a comparator function to figure out the smallest index at which                                               // 630\n  // an object should be inserted so as to maintain order. Uses binary search.                                         // 631\n  _.sortedIndex = function(array, obj, iteratee, context) {                                                            // 632\n    iteratee = cb(iteratee, context, 1);                                                                               // 633\n    var value = iteratee(obj);                                                                                         // 634\n    var low = 0, high = getLength(array);                                                                              // 635\n    while (low < high) {                                                                                               // 636\n      var mid = Math.floor((low + high) / 2);                                                                          // 637\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;                                                // 638\n    }                                                                                                                  // 639\n    return low;                                                                                                        // 640\n  };                                                                                                                   // 641\n                                                                                                                       // 642\n  // Generator function to create the indexOf and lastIndexOf functions                                                // 643\n  function createIndexFinder(dir, predicateFind, sortedIndex) {                                                        // 644\n    return function(array, item, idx) {                                                                                // 645\n      var i = 0, length = getLength(array);                                                                            // 646\n      if (typeof idx == 'number') {                                                                                    // 647\n        if (dir > 0) {                                                                                                 // 648\n            i = idx >= 0 ? idx : Math.max(idx + length, i);                                                            // 649\n        } else {                                                                                                       // 650\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;                                          // 651\n        }                                                                                                              // 652\n      } else if (sortedIndex && idx && length) {                                                                       // 653\n        idx = sortedIndex(array, item);                                                                                // 654\n        return array[idx] === item ? idx : -1;                                                                         // 655\n      }                                                                                                                // 656\n      if (item !== item) {                                                                                             // 657\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);                                                    // 658\n        return idx >= 0 ? idx + i : -1;                                                                                // 659\n      }                                                                                                                // 660\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {                                     // 661\n        if (array[idx] === item) return idx;                                                                           // 662\n      }                                                                                                                // 663\n      return -1;                                                                                                       // 664\n    };                                                                                                                 // 665\n  }                                                                                                                    // 666\n                                                                                                                       // 667\n  // Return the position of the first occurrence of an item in an array,                                               // 668\n  // or -1 if the item is not included in the array.                                                                   // 669\n  // If the array is large and already in sort order, pass `true`                                                      // 670\n  // for **isSorted** to use binary search.                                                                            // 671\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);                                                        // 672\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);                                                              // 673\n                                                                                                                       // 674\n  // Generate an integer Array containing an arithmetic progression. A port of                                         // 675\n  // the native Python `range()` function. See                                                                         // 676\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).                                  // 677\n  _.range = function(start, stop, step) {                                                                              // 678\n    if (stop == null) {                                                                                                // 679\n      stop = start || 0;                                                                                               // 680\n      start = 0;                                                                                                       // 681\n    }                                                                                                                  // 682\n    step = step || 1;                                                                                                  // 683\n                                                                                                                       // 684\n    var length = Math.max(Math.ceil((stop - start) / step), 0);                                                        // 685\n    var range = Array(length);                                                                                         // 686\n                                                                                                                       // 687\n    for (var idx = 0; idx < length; idx++, start += step) {                                                            // 688\n      range[idx] = start;                                                                                              // 689\n    }                                                                                                                  // 690\n                                                                                                                       // 691\n    return range;                                                                                                      // 692\n  };                                                                                                                   // 693\n                                                                                                                       // 694\n  // Function (ahem) Functions                                                                                         // 695\n  // ------------------                                                                                                // 696\n                                                                                                                       // 697\n  // Determines whether to execute a function as a constructor                                                         // 698\n  // or a normal function with the provided arguments                                                                  // 699\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {                                  // 700\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);                                // 701\n    var self = baseCreate(sourceFunc.prototype);                                                                       // 702\n    var result = sourceFunc.apply(self, args);                                                                         // 703\n    if (_.isObject(result)) return result;                                                                             // 704\n    return self;                                                                                                       // 705\n  };                                                                                                                   // 706\n                                                                                                                       // 707\n  // Create a function bound to a given object (assigning `this`, and arguments,                                       // 708\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if                                            // 709\n  // available.                                                                                                        // 710\n  _.bind = function(func, context) {                                                                                   // 711\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));               // 712\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');                                 // 713\n    var args = slice.call(arguments, 2);                                                                               // 714\n    var bound = function() {                                                                                           // 715\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));                             // 716\n    };                                                                                                                 // 717\n    return bound;                                                                                                      // 718\n  };                                                                                                                   // 719\n                                                                                                                       // 720\n  // Partially apply a function by creating a version that has had some of its                                         // 721\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts                                         // 722\n  // as a placeholder, allowing any combination of arguments to be pre-filled.                                         // 723\n  _.partial = function(func) {                                                                                         // 724\n    var boundArgs = slice.call(arguments, 1);                                                                          // 725\n    var bound = function() {                                                                                           // 726\n      var position = 0, length = boundArgs.length;                                                                     // 727\n      var args = Array(length);                                                                                        // 728\n      for (var i = 0; i < length; i++) {                                                                               // 729\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];                                           // 730\n      }                                                                                                                // 731\n      while (position < arguments.length) args.push(arguments[position++]);                                            // 732\n      return executeBound(func, bound, this, this, args);                                                              // 733\n    };                                                                                                                 // 734\n    return bound;                                                                                                      // 735\n  };                                                                                                                   // 736\n                                                                                                                       // 737\n  // Bind a number of an object's methods to that object. Remaining arguments                                          // 738\n  // are the method names to be bound. Useful for ensuring that all callbacks                                          // 739\n  // defined on an object belong to it.                                                                                // 740\n  _.bindAll = function(obj) {                                                                                          // 741\n    var i, length = arguments.length, key;                                                                             // 742\n    if (length <= 1) throw new Error('bindAll must be passed function names');                                         // 743\n    for (i = 1; i < length; i++) {                                                                                     // 744\n      key = arguments[i];                                                                                              // 745\n      obj[key] = _.bind(obj[key], obj);                                                                                // 746\n    }                                                                                                                  // 747\n    return obj;                                                                                                        // 748\n  };                                                                                                                   // 749\n                                                                                                                       // 750\n  // Memoize an expensive function by storing its results.                                                             // 751\n  _.memoize = function(func, hasher) {                                                                                 // 752\n    var memoize = function(key) {                                                                                      // 753\n      var cache = memoize.cache;                                                                                       // 754\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);                                               // 755\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);                                        // 756\n      return cache[address];                                                                                           // 757\n    };                                                                                                                 // 758\n    memoize.cache = {};                                                                                                // 759\n    return memoize;                                                                                                    // 760\n  };                                                                                                                   // 761\n                                                                                                                       // 762\n  // Delays a function for the given number of milliseconds, and then calls                                            // 763\n  // it with the arguments supplied.                                                                                   // 764\n  _.delay = function(func, wait) {                                                                                     // 765\n    var args = slice.call(arguments, 2);                                                                               // 766\n    return setTimeout(function(){                                                                                      // 767\n      return func.apply(null, args);                                                                                   // 768\n    }, wait);                                                                                                          // 769\n  };                                                                                                                   // 770\n                                                                                                                       // 771\n  // Defers a function, scheduling it to run after the current call stack has                                          // 772\n  // cleared.                                                                                                          // 773\n  _.defer = _.partial(_.delay, _, 1);                                                                                  // 774\n                                                                                                                       // 775\n  // Returns a function, that, when invoked, will only be triggered at most once                                       // 776\n  // during a given window of time. Normally, the throttled function will run                                          // 777\n  // as much as it can, without ever going more than once per `wait` duration;                                         // 778\n  // but if you'd like to disable the execution on the leading edge, pass                                              // 779\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.                                             // 780\n  _.throttle = function(func, wait, options) {                                                                         // 781\n    var context, args, result;                                                                                         // 782\n    var timeout = null;                                                                                                // 783\n    var previous = 0;                                                                                                  // 784\n    if (!options) options = {};                                                                                        // 785\n    var later = function() {                                                                                           // 786\n      previous = options.leading === false ? 0 : _.now();                                                              // 787\n      timeout = null;                                                                                                  // 788\n      result = func.apply(context, args);                                                                              // 789\n      if (!timeout) context = args = null;                                                                             // 790\n    };                                                                                                                 // 791\n    return function() {                                                                                                // 792\n      var now = _.now();                                                                                               // 793\n      if (!previous && options.leading === false) previous = now;                                                      // 794\n      var remaining = wait - (now - previous);                                                                         // 795\n      context = this;                                                                                                  // 796\n      args = arguments;                                                                                                // 797\n      if (remaining <= 0 || remaining > wait) {                                                                        // 798\n        if (timeout) {                                                                                                 // 799\n          clearTimeout(timeout);                                                                                       // 800\n          timeout = null;                                                                                              // 801\n        }                                                                                                              // 802\n        previous = now;                                                                                                // 803\n        result = func.apply(context, args);                                                                            // 804\n        if (!timeout) context = args = null;                                                                           // 805\n      } else if (!timeout && options.trailing !== false) {                                                             // 806\n        timeout = setTimeout(later, remaining);                                                                        // 807\n      }                                                                                                                // 808\n      return result;                                                                                                   // 809\n    };                                                                                                                 // 810\n  };                                                                                                                   // 811\n                                                                                                                       // 812\n  // Returns a function, that, as long as it continues to be invoked, will not                                         // 813\n  // be triggered. The function will be called after it stops being called for                                         // 814\n  // N milliseconds. If `immediate` is passed, trigger the function on the                                             // 815\n  // leading edge, instead of the trailing.                                                                            // 816\n  _.debounce = function(func, wait, immediate) {                                                                       // 817\n    var timeout, args, context, timestamp, result;                                                                     // 818\n                                                                                                                       // 819\n    var later = function() {                                                                                           // 820\n      var last = _.now() - timestamp;                                                                                  // 821\n                                                                                                                       // 822\n      if (last < wait && last >= 0) {                                                                                  // 823\n        timeout = setTimeout(later, wait - last);                                                                      // 824\n      } else {                                                                                                         // 825\n        timeout = null;                                                                                                // 826\n        if (!immediate) {                                                                                              // 827\n          result = func.apply(context, args);                                                                          // 828\n          if (!timeout) context = args = null;                                                                         // 829\n        }                                                                                                              // 830\n      }                                                                                                                // 831\n    };                                                                                                                 // 832\n                                                                                                                       // 833\n    return function() {                                                                                                // 834\n      context = this;                                                                                                  // 835\n      args = arguments;                                                                                                // 836\n      timestamp = _.now();                                                                                             // 837\n      var callNow = immediate && !timeout;                                                                             // 838\n      if (!timeout) timeout = setTimeout(later, wait);                                                                 // 839\n      if (callNow) {                                                                                                   // 840\n        result = func.apply(context, args);                                                                            // 841\n        context = args = null;                                                                                         // 842\n      }                                                                                                                // 843\n                                                                                                                       // 844\n      return result;                                                                                                   // 845\n    };                                                                                                                 // 846\n  };                                                                                                                   // 847\n                                                                                                                       // 848\n  // Returns the first function passed as an argument to the second,                                                   // 849\n  // allowing you to adjust arguments, run code before and after, and                                                  // 850\n  // conditionally execute the original function.                                                                      // 851\n  _.wrap = function(func, wrapper) {                                                                                   // 852\n    return _.partial(wrapper, func);                                                                                   // 853\n  };                                                                                                                   // 854\n                                                                                                                       // 855\n  // Returns a negated version of the passed-in predicate.                                                             // 856\n  _.negate = function(predicate) {                                                                                     // 857\n    return function() {                                                                                                // 858\n      return !predicate.apply(this, arguments);                                                                        // 859\n    };                                                                                                                 // 860\n  };                                                                                                                   // 861\n                                                                                                                       // 862\n  // Returns a function that is the composition of a list of functions, each                                           // 863\n  // consuming the return value of the function that follows.                                                          // 864\n  _.compose = function() {                                                                                             // 865\n    var args = arguments;                                                                                              // 866\n    var start = args.length - 1;                                                                                       // 867\n    return function() {                                                                                                // 868\n      var i = start;                                                                                                   // 869\n      var result = args[start].apply(this, arguments);                                                                 // 870\n      while (i--) result = args[i].call(this, result);                                                                 // 871\n      return result;                                                                                                   // 872\n    };                                                                                                                 // 873\n  };                                                                                                                   // 874\n                                                                                                                       // 875\n  // Returns a function that will only be executed on and after the Nth call.                                          // 876\n  _.after = function(times, func) {                                                                                    // 877\n    return function() {                                                                                                // 878\n      if (--times < 1) {                                                                                               // 879\n        return func.apply(this, arguments);                                                                            // 880\n      }                                                                                                                // 881\n    };                                                                                                                 // 882\n  };                                                                                                                   // 883\n                                                                                                                       // 884\n  // Returns a function that will only be executed up to (but not including) the Nth call.                             // 885\n  _.before = function(times, func) {                                                                                   // 886\n    var memo;                                                                                                          // 887\n    return function() {                                                                                                // 888\n      if (--times > 0) {                                                                                               // 889\n        memo = func.apply(this, arguments);                                                                            // 890\n      }                                                                                                                // 891\n      if (times <= 1) func = null;                                                                                     // 892\n      return memo;                                                                                                     // 893\n    };                                                                                                                 // 894\n  };                                                                                                                   // 895\n                                                                                                                       // 896\n  // Returns a function that will be executed at most one time, no matter how                                          // 897\n  // often you call it. Useful for lazy initialization.                                                                // 898\n  _.once = _.partial(_.before, 2);                                                                                     // 899\n                                                                                                                       // 900\n  // Object Functions                                                                                                  // 901\n  // ----------------                                                                                                  // 902\n                                                                                                                       // 903\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.                                        // 904\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');                                                 // 905\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',                                                    // 906\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];                                     // 907\n                                                                                                                       // 908\n  function collectNonEnumProps(obj, keys) {                                                                            // 909\n    var nonEnumIdx = nonEnumerableProps.length;                                                                        // 910\n    var constructor = obj.constructor;                                                                                 // 911\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;                                      // 912\n                                                                                                                       // 913\n    // Constructor is a special case.                                                                                  // 914\n    var prop = 'constructor';                                                                                          // 915\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);                                                  // 916\n                                                                                                                       // 917\n    while (nonEnumIdx--) {                                                                                             // 918\n      prop = nonEnumerableProps[nonEnumIdx];                                                                           // 919\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {                                       // 920\n        keys.push(prop);                                                                                               // 921\n      }                                                                                                                // 922\n    }                                                                                                                  // 923\n  }                                                                                                                    // 924\n                                                                                                                       // 925\n  // Retrieve the names of an object's own properties.                                                                 // 926\n  // Delegates to **ECMAScript 5**'s native `Object.keys`                                                              // 927\n  _.keys = function(obj) {                                                                                             // 928\n    if (!_.isObject(obj)) return [];                                                                                   // 929\n    if (nativeKeys) return nativeKeys(obj);                                                                            // 930\n    var keys = [];                                                                                                     // 931\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);                                                          // 932\n    // Ahem, IE < 9.                                                                                                   // 933\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 934\n    return keys;                                                                                                       // 935\n  };                                                                                                                   // 936\n                                                                                                                       // 937\n  // Retrieve all the property names of an object.                                                                     // 938\n  _.allKeys = function(obj) {                                                                                          // 939\n    if (!_.isObject(obj)) return [];                                                                                   // 940\n    var keys = [];                                                                                                     // 941\n    for (var key in obj) keys.push(key);                                                                               // 942\n    // Ahem, IE < 9.                                                                                                   // 943\n    if (hasEnumBug) collectNonEnumProps(obj, keys);                                                                    // 944\n    return keys;                                                                                                       // 945\n  };                                                                                                                   // 946\n                                                                                                                       // 947\n  // Retrieve the values of an object's properties.                                                                    // 948\n  _.values = function(obj) {                                                                                           // 949\n    var keys = _.keys(obj);                                                                                            // 950\n    var length = keys.length;                                                                                          // 951\n    var values = Array(length);                                                                                        // 952\n    for (var i = 0; i < length; i++) {                                                                                 // 953\n      values[i] = obj[keys[i]];                                                                                        // 954\n    }                                                                                                                  // 955\n    return values;                                                                                                     // 956\n  };                                                                                                                   // 957\n                                                                                                                       // 958\n  // Returns the results of applying the iteratee to each element of the object                                        // 959\n  // In contrast to _.map it returns an object                                                                         // 960\n  _.mapObject = function(obj, iteratee, context) {                                                                     // 961\n    iteratee = cb(iteratee, context);                                                                                  // 962\n    var keys =  _.keys(obj),                                                                                           // 963\n          length = keys.length,                                                                                        // 964\n          results = {},                                                                                                // 965\n          currentKey;                                                                                                  // 966\n      for (var index = 0; index < length; index++) {                                                                   // 967\n        currentKey = keys[index];                                                                                      // 968\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);                                              // 969\n      }                                                                                                                // 970\n      return results;                                                                                                  // 971\n  };                                                                                                                   // 972\n                                                                                                                       // 973\n  // Convert an object into a list of `[key, value]` pairs.                                                            // 974\n  _.pairs = function(obj) {                                                                                            // 975\n    var keys = _.keys(obj);                                                                                            // 976\n    var length = keys.length;                                                                                          // 977\n    var pairs = Array(length);                                                                                         // 978\n    for (var i = 0; i < length; i++) {                                                                                 // 979\n      pairs[i] = [keys[i], obj[keys[i]]];                                                                              // 980\n    }                                                                                                                  // 981\n    return pairs;                                                                                                      // 982\n  };                                                                                                                   // 983\n                                                                                                                       // 984\n  // Invert the keys and values of an object. The values must be serializable.                                         // 985\n  _.invert = function(obj) {                                                                                           // 986\n    var result = {};                                                                                                   // 987\n    var keys = _.keys(obj);                                                                                            // 988\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 989\n      result[obj[keys[i]]] = keys[i];                                                                                  // 990\n    }                                                                                                                  // 991\n    return result;                                                                                                     // 992\n  };                                                                                                                   // 993\n                                                                                                                       // 994\n  // Return a sorted list of the function names available on the object.                                               // 995\n  // Aliased as `methods`                                                                                              // 996\n  _.functions = _.methods = function(obj) {                                                                            // 997\n    var names = [];                                                                                                    // 998\n    for (var key in obj) {                                                                                             // 999\n      if (_.isFunction(obj[key])) names.push(key);                                                                     // 1000\n    }                                                                                                                  // 1001\n    return names.sort();                                                                                               // 1002\n  };                                                                                                                   // 1003\n                                                                                                                       // 1004\n  // Extend a given object with all the properties in passed-in object(s).                                             // 1005\n  _.extend = createAssigner(_.allKeys);                                                                                // 1006\n                                                                                                                       // 1007\n  // Assigns a given object with all the own properties in the passed-in object(s)                                     // 1008\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)                        // 1009\n  _.extendOwn = _.assign = createAssigner(_.keys);                                                                     // 1010\n                                                                                                                       // 1011\n  // Returns the first key on an object that passes a predicate test                                                   // 1012\n  _.findKey = function(obj, predicate, context) {                                                                      // 1013\n    predicate = cb(predicate, context);                                                                                // 1014\n    var keys = _.keys(obj), key;                                                                                       // 1015\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1016\n      key = keys[i];                                                                                                   // 1017\n      if (predicate(obj[key], key, obj)) return key;                                                                   // 1018\n    }                                                                                                                  // 1019\n  };                                                                                                                   // 1020\n                                                                                                                       // 1021\n  // Return a copy of the object only containing the whitelisted properties.                                           // 1022\n  _.pick = function(object, oiteratee, context) {                                                                      // 1023\n    var result = {}, obj = object, iteratee, keys;                                                                     // 1024\n    if (obj == null) return result;                                                                                    // 1025\n    if (_.isFunction(oiteratee)) {                                                                                     // 1026\n      keys = _.allKeys(obj);                                                                                           // 1027\n      iteratee = optimizeCb(oiteratee, context);                                                                       // 1028\n    } else {                                                                                                           // 1029\n      keys = flatten(arguments, false, false, 1);                                                                      // 1030\n      iteratee = function(value, key, obj) { return key in obj; };                                                     // 1031\n      obj = Object(obj);                                                                                               // 1032\n    }                                                                                                                  // 1033\n    for (var i = 0, length = keys.length; i < length; i++) {                                                           // 1034\n      var key = keys[i];                                                                                               // 1035\n      var value = obj[key];                                                                                            // 1036\n      if (iteratee(value, key, obj)) result[key] = value;                                                              // 1037\n    }                                                                                                                  // 1038\n    return result;                                                                                                     // 1039\n  };                                                                                                                   // 1040\n                                                                                                                       // 1041\n   // Return a copy of the object without the blacklisted properties.                                                  // 1042\n  _.omit = function(obj, iteratee, context) {                                                                          // 1043\n    if (_.isFunction(iteratee)) {                                                                                      // 1044\n      iteratee = _.negate(iteratee);                                                                                   // 1045\n    } else {                                                                                                           // 1046\n      var keys = _.map(flatten(arguments, false, false, 1), String);                                                   // 1047\n      iteratee = function(value, key) {                                                                                // 1048\n        return !_.contains(keys, key);                                                                                 // 1049\n      };                                                                                                               // 1050\n    }                                                                                                                  // 1051\n    return _.pick(obj, iteratee, context);                                                                             // 1052\n  };                                                                                                                   // 1053\n                                                                                                                       // 1054\n  // Fill in a given object with default properties.                                                                   // 1055\n  _.defaults = createAssigner(_.allKeys, true);                                                                        // 1056\n                                                                                                                       // 1057\n  // Creates an object that inherits from the given prototype object.                                                  // 1058\n  // If additional properties are provided then they will be added to the                                              // 1059\n  // created object.                                                                                                   // 1060\n  _.create = function(prototype, props) {                                                                              // 1061\n    var result = baseCreate(prototype);                                                                                // 1062\n    if (props) _.extendOwn(result, props);                                                                             // 1063\n    return result;                                                                                                     // 1064\n  };                                                                                                                   // 1065\n                                                                                                                       // 1066\n  // Create a (shallow-cloned) duplicate of an object.                                                                 // 1067\n  _.clone = function(obj) {                                                                                            // 1068\n    if (!_.isObject(obj)) return obj;                                                                                  // 1069\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);                                                           // 1070\n  };                                                                                                                   // 1071\n                                                                                                                       // 1072\n  // Invokes interceptor with the obj, and then returns obj.                                                           // 1073\n  // The primary purpose of this method is to \"tap into\" a method chain, in                                            // 1074\n  // order to perform operations on intermediate results within the chain.                                             // 1075\n  _.tap = function(obj, interceptor) {                                                                                 // 1076\n    interceptor(obj);                                                                                                  // 1077\n    return obj;                                                                                                        // 1078\n  };                                                                                                                   // 1079\n                                                                                                                       // 1080\n  // Returns whether an object has a given set of `key:value` pairs.                                                   // 1081\n  _.isMatch = function(object, attrs) {                                                                                // 1082\n    var keys = _.keys(attrs), length = keys.length;                                                                    // 1083\n    if (object == null) return !length;                                                                                // 1084\n    var obj = Object(object);                                                                                          // 1085\n    for (var i = 0; i < length; i++) {                                                                                 // 1086\n      var key = keys[i];                                                                                               // 1087\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;                                                      // 1088\n    }                                                                                                                  // 1089\n    return true;                                                                                                       // 1090\n  };                                                                                                                   // 1091\n                                                                                                                       // 1092\n                                                                                                                       // 1093\n  // Internal recursive comparison function for `isEqual`.                                                             // 1094\n  var eq = function(a, b, aStack, bStack) {                                                                            // 1095\n    // Identical objects are equal. `0 === -0`, but they aren't identical.                                             // 1096\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).                         // 1097\n    if (a === b) return a !== 0 || 1 / a === 1 / b;                                                                    // 1098\n    // A strict comparison is necessary because `null == undefined`.                                                   // 1099\n    if (a == null || b == null) return a === b;                                                                        // 1100\n    // Unwrap any wrapped objects.                                                                                     // 1101\n    if (a instanceof _) a = a._wrapped;                                                                                // 1102\n    if (b instanceof _) b = b._wrapped;                                                                                // 1103\n    // Compare `[[Class]]` names.                                                                                      // 1104\n    var className = toString.call(a);                                                                                  // 1105\n    if (className !== toString.call(b)) return false;                                                                  // 1106\n    switch (className) {                                                                                               // 1107\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.                             // 1108\n      case '[object RegExp]':                                                                                          // 1109\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')                                    // 1110\n      case '[object String]':                                                                                          // 1111\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is                           // 1112\n        // equivalent to `new String(\"5\")`.                                                                            // 1113\n        return '' + a === '' + b;                                                                                      // 1114\n      case '[object Number]':                                                                                          // 1115\n        // `NaN`s are equivalent, but non-reflexive.                                                                   // 1116\n        // Object(NaN) is equivalent to NaN                                                                            // 1117\n        if (+a !== +a) return +b !== +b;                                                                               // 1118\n        // An `egal` comparison is performed for other numeric values.                                                 // 1119\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;                                                                // 1120\n      case '[object Date]':                                                                                            // 1121\n      case '[object Boolean]':                                                                                         // 1122\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their                          // 1123\n        // millisecond representations. Note that invalid dates with millisecond representations                       // 1124\n        // of `NaN` are not equivalent.                                                                                // 1125\n        return +a === +b;                                                                                              // 1126\n    }                                                                                                                  // 1127\n                                                                                                                       // 1128\n    var areArrays = className === '[object Array]';                                                                    // 1129\n    if (!areArrays) {                                                                                                  // 1130\n      if (typeof a != 'object' || typeof b != 'object') return false;                                                  // 1131\n                                                                                                                       // 1132\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s                             // 1133\n      // from different frames are.                                                                                    // 1134\n      var aCtor = a.constructor, bCtor = b.constructor;                                                                // 1135\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&                                        // 1136\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)                                          // 1137\n                          && ('constructor' in a && 'constructor' in b)) {                                             // 1138\n        return false;                                                                                                  // 1139\n      }                                                                                                                // 1140\n    }                                                                                                                  // 1141\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic                                       // 1142\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.                                     // 1143\n                                                                                                                       // 1144\n    // Initializing stack of traversed objects.                                                                        // 1145\n    // It's done here since we only need them for objects and arrays comparison.                                       // 1146\n    aStack = aStack || [];                                                                                             // 1147\n    bStack = bStack || [];                                                                                             // 1148\n    var length = aStack.length;                                                                                        // 1149\n    while (length--) {                                                                                                 // 1150\n      // Linear search. Performance is inversely proportional to the number of                                         // 1151\n      // unique nested structures.                                                                                     // 1152\n      if (aStack[length] === a) return bStack[length] === b;                                                           // 1153\n    }                                                                                                                  // 1154\n                                                                                                                       // 1155\n    // Add the first object to the stack of traversed objects.                                                         // 1156\n    aStack.push(a);                                                                                                    // 1157\n    bStack.push(b);                                                                                                    // 1158\n                                                                                                                       // 1159\n    // Recursively compare objects and arrays.                                                                         // 1160\n    if (areArrays) {                                                                                                   // 1161\n      // Compare array lengths to determine if a deep comparison is necessary.                                         // 1162\n      length = a.length;                                                                                               // 1163\n      if (length !== b.length) return false;                                                                           // 1164\n      // Deep compare the contents, ignoring non-numeric properties.                                                   // 1165\n      while (length--) {                                                                                               // 1166\n        if (!eq(a[length], b[length], aStack, bStack)) return false;                                                   // 1167\n      }                                                                                                                // 1168\n    } else {                                                                                                           // 1169\n      // Deep compare objects.                                                                                         // 1170\n      var keys = _.keys(a), key;                                                                                       // 1171\n      length = keys.length;                                                                                            // 1172\n      // Ensure that both objects contain the same number of properties before comparing deep equality.                // 1173\n      if (_.keys(b).length !== length) return false;                                                                   // 1174\n      while (length--) {                                                                                               // 1175\n        // Deep compare each member                                                                                    // 1176\n        key = keys[length];                                                                                            // 1177\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;                                      // 1178\n      }                                                                                                                // 1179\n    }                                                                                                                  // 1180\n    // Remove the first object from the stack of traversed objects.                                                    // 1181\n    aStack.pop();                                                                                                      // 1182\n    bStack.pop();                                                                                                      // 1183\n    return true;                                                                                                       // 1184\n  };                                                                                                                   // 1185\n                                                                                                                       // 1186\n  // Perform a deep comparison to check if two objects are equal.                                                      // 1187\n  _.isEqual = function(a, b) {                                                                                         // 1188\n    return eq(a, b);                                                                                                   // 1189\n  };                                                                                                                   // 1190\n                                                                                                                       // 1191\n  // Is a given array, string, or object empty?                                                                        // 1192\n  // An \"empty\" object has no enumerable own-properties.                                                               // 1193\n  _.isEmpty = function(obj) {                                                                                          // 1194\n    if (obj == null) return true;                                                                                      // 1195\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;        // 1196\n    return _.keys(obj).length === 0;                                                                                   // 1197\n  };                                                                                                                   // 1198\n                                                                                                                       // 1199\n  // Is a given value a DOM element?                                                                                   // 1200\n  _.isElement = function(obj) {                                                                                        // 1201\n    return !!(obj && obj.nodeType === 1);                                                                              // 1202\n  };                                                                                                                   // 1203\n                                                                                                                       // 1204\n  // Is a given value an array?                                                                                        // 1205\n  // Delegates to ECMA5's native Array.isArray                                                                         // 1206\n  _.isArray = nativeIsArray || function(obj) {                                                                         // 1207\n    return toString.call(obj) === '[object Array]';                                                                    // 1208\n  };                                                                                                                   // 1209\n                                                                                                                       // 1210\n  // Is a given variable an object?                                                                                    // 1211\n  _.isObject = function(obj) {                                                                                         // 1212\n    var type = typeof obj;                                                                                             // 1213\n    return type === 'function' || type === 'object' && !!obj;                                                          // 1214\n  };                                                                                                                   // 1215\n                                                                                                                       // 1216\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.                  // 1217\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {                    // 1218\n    _['is' + name] = function(obj) {                                                                                   // 1219\n      return toString.call(obj) === '[object ' + name + ']';                                                           // 1220\n    };                                                                                                                 // 1221\n  });                                                                                                                  // 1222\n                                                                                                                       // 1223\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where                                         // 1224\n  // there isn't any inspectable \"Arguments\" type.                                                                     // 1225\n  if (!_.isArguments(arguments)) {                                                                                     // 1226\n    _.isArguments = function(obj) {                                                                                    // 1227\n      return _.has(obj, 'callee');                                                                                     // 1228\n    };                                                                                                                 // 1229\n  }                                                                                                                    // 1230\n                                                                                                                       // 1231\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,                                     // 1232\n  // IE 11 (#1621), and in Safari 8 (#1929).                                                                           // 1233\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {                                                      // 1234\n    _.isFunction = function(obj) {                                                                                     // 1235\n      return typeof obj == 'function' || false;                                                                        // 1236\n    };                                                                                                                 // 1237\n  }                                                                                                                    // 1238\n                                                                                                                       // 1239\n  // Is a given object a finite number?                                                                                // 1240\n  _.isFinite = function(obj) {                                                                                         // 1241\n    return isFinite(obj) && !isNaN(parseFloat(obj));                                                                   // 1242\n  };                                                                                                                   // 1243\n                                                                                                                       // 1244\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).                                   // 1245\n  _.isNaN = function(obj) {                                                                                            // 1246\n    return _.isNumber(obj) && obj !== +obj;                                                                            // 1247\n  };                                                                                                                   // 1248\n                                                                                                                       // 1249\n  // Is a given value a boolean?                                                                                       // 1250\n  _.isBoolean = function(obj) {                                                                                        // 1251\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';                                 // 1252\n  };                                                                                                                   // 1253\n                                                                                                                       // 1254\n  // Is a given value equal to null?                                                                                   // 1255\n  _.isNull = function(obj) {                                                                                           // 1256\n    return obj === null;                                                                                               // 1257\n  };                                                                                                                   // 1258\n                                                                                                                       // 1259\n  // Is a given variable undefined?                                                                                    // 1260\n  _.isUndefined = function(obj) {                                                                                      // 1261\n    return obj === void 0;                                                                                             // 1262\n  };                                                                                                                   // 1263\n                                                                                                                       // 1264\n  // Shortcut function for checking if an object has a given property directly                                         // 1265\n  // on itself (in other words, not on a prototype).                                                                   // 1266\n  _.has = function(obj, key) {                                                                                         // 1267\n    return obj != null && hasOwnProperty.call(obj, key);                                                               // 1268\n  };                                                                                                                   // 1269\n                                                                                                                       // 1270\n  // Utility Functions                                                                                                 // 1271\n  // -----------------                                                                                                 // 1272\n                                                                                                                       // 1273\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its                                         // 1274\n  // previous owner. Returns a reference to the Underscore object.                                                     // 1275\n  _.noConflict = function() {                                                                                          // 1276\n    root._ = previousUnderscore;                                                                                       // 1277\n    return this;                                                                                                       // 1278\n  };                                                                                                                   // 1279\n                                                                                                                       // 1280\n  // Keep the identity function around for default iteratees.                                                          // 1281\n  _.identity = function(value) {                                                                                       // 1282\n    return value;                                                                                                      // 1283\n  };                                                                                                                   // 1284\n                                                                                                                       // 1285\n  // Predicate-generating functions. Often useful outside of Underscore.                                               // 1286\n  _.constant = function(value) {                                                                                       // 1287\n    return function() {                                                                                                // 1288\n      return value;                                                                                                    // 1289\n    };                                                                                                                 // 1290\n  };                                                                                                                   // 1291\n                                                                                                                       // 1292\n  _.noop = function(){};                                                                                               // 1293\n                                                                                                                       // 1294\n  _.property = property;                                                                                               // 1295\n                                                                                                                       // 1296\n  // Generates a function for a given object that returns a given property.                                            // 1297\n  _.propertyOf = function(obj) {                                                                                       // 1298\n    return obj == null ? function(){} : function(key) {                                                                // 1299\n      return obj[key];                                                                                                 // 1300\n    };                                                                                                                 // 1301\n  };                                                                                                                   // 1302\n                                                                                                                       // 1303\n  // Returns a predicate for checking whether an object has a given set of                                             // 1304\n  // `key:value` pairs.                                                                                                // 1305\n  _.matcher = _.matches = function(attrs) {                                                                            // 1306\n    attrs = _.extendOwn({}, attrs);                                                                                    // 1307\n    return function(obj) {                                                                                             // 1308\n      return _.isMatch(obj, attrs);                                                                                    // 1309\n    };                                                                                                                 // 1310\n  };                                                                                                                   // 1311\n                                                                                                                       // 1312\n  // Run a function **n** times.                                                                                       // 1313\n  _.times = function(n, iteratee, context) {                                                                           // 1314\n    var accum = Array(Math.max(0, n));                                                                                 // 1315\n    iteratee = optimizeCb(iteratee, context, 1);                                                                       // 1316\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);                                                                // 1317\n    return accum;                                                                                                      // 1318\n  };                                                                                                                   // 1319\n                                                                                                                       // 1320\n  // Return a random integer between min and max (inclusive).                                                          // 1321\n  _.random = function(min, max) {                                                                                      // 1322\n    if (max == null) {                                                                                                 // 1323\n      max = min;                                                                                                       // 1324\n      min = 0;                                                                                                         // 1325\n    }                                                                                                                  // 1326\n    return min + Math.floor(Math.random() * (max - min + 1));                                                          // 1327\n  };                                                                                                                   // 1328\n                                                                                                                       // 1329\n  // A (possibly faster) way to get the current timestamp as an integer.                                               // 1330\n  _.now = Date.now || function() {                                                                                     // 1331\n    return new Date().getTime();                                                                                       // 1332\n  };                                                                                                                   // 1333\n                                                                                                                       // 1334\n   // List of HTML entities for escaping.                                                                              // 1335\n  var escapeMap = {                                                                                                    // 1336\n    '&': '&amp;',                                                                                                      // 1337\n    '<': '&lt;',                                                                                                       // 1338\n    '>': '&gt;',                                                                                                       // 1339\n    '\"': '&quot;',                                                                                                     // 1340\n    \"'\": '&#x27;',                                                                                                     // 1341\n    '`': '&#x60;'                                                                                                      // 1342\n  };                                                                                                                   // 1343\n  var unescapeMap = _.invert(escapeMap);                                                                               // 1344\n                                                                                                                       // 1345\n  // Functions for escaping and unescaping strings to/from HTML interpolation.                                         // 1346\n  var createEscaper = function(map) {                                                                                  // 1347\n    var escaper = function(match) {                                                                                    // 1348\n      return map[match];                                                                                               // 1349\n    };                                                                                                                 // 1350\n    // Regexes for identifying a key that needs to be escaped                                                          // 1351\n    var source = '(?:' + _.keys(map).join('|') + ')';                                                                  // 1352\n    var testRegexp = RegExp(source);                                                                                   // 1353\n    var replaceRegexp = RegExp(source, 'g');                                                                           // 1354\n    return function(string) {                                                                                          // 1355\n      string = string == null ? '' : '' + string;                                                                      // 1356\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;                                // 1357\n    };                                                                                                                 // 1358\n  };                                                                                                                   // 1359\n  _.escape = createEscaper(escapeMap);                                                                                 // 1360\n  _.unescape = createEscaper(unescapeMap);                                                                             // 1361\n                                                                                                                       // 1362\n  // If the value of the named `property` is a function then invoke it with the                                        // 1363\n  // `object` as context; otherwise, return it.                                                                        // 1364\n  _.result = function(object, property, fallback) {                                                                    // 1365\n    var value = object == null ? void 0 : object[property];                                                            // 1366\n    if (value === void 0) {                                                                                            // 1367\n      value = fallback;                                                                                                // 1368\n    }                                                                                                                  // 1369\n    return _.isFunction(value) ? value.call(object) : value;                                                           // 1370\n  };                                                                                                                   // 1371\n                                                                                                                       // 1372\n  // Generate a unique integer id (unique within the entire client session).                                           // 1373\n  // Useful for temporary DOM ids.                                                                                     // 1374\n  var idCounter = 0;                                                                                                   // 1375\n  _.uniqueId = function(prefix) {                                                                                      // 1376\n    var id = ++idCounter + '';                                                                                         // 1377\n    return prefix ? prefix + id : id;                                                                                  // 1378\n  };                                                                                                                   // 1379\n                                                                                                                       // 1380\n  // By default, Underscore uses ERB-style template delimiters, change the                                             // 1381\n  // following template settings to use alternative delimiters.                                                        // 1382\n  _.templateSettings = {                                                                                               // 1383\n    evaluate    : /<%([\\s\\S]+?)%>/g,                                                                                   // 1384\n    interpolate : /<%=([\\s\\S]+?)%>/g,                                                                                  // 1385\n    escape      : /<%-([\\s\\S]+?)%>/g                                                                                   // 1386\n  };                                                                                                                   // 1387\n                                                                                                                       // 1388\n  // When customizing `templateSettings`, if you don't want to define an                                               // 1389\n  // interpolation, evaluation or escaping regex, we need one that is                                                  // 1390\n  // guaranteed not to match.                                                                                          // 1391\n  var noMatch = /(.)^/;                                                                                                // 1392\n                                                                                                                       // 1393\n  // Certain characters need to be escaped so that they can be put into a                                              // 1394\n  // string literal.                                                                                                   // 1395\n  var escapes = {                                                                                                      // 1396\n    \"'\":      \"'\",                                                                                                     // 1397\n    '\\\\':     '\\\\',                                                                                                    // 1398\n    '\\r':     'r',                                                                                                     // 1399\n    '\\n':     'n',                                                                                                     // 1400\n    '\\u2028': 'u2028',                                                                                                 // 1401\n    '\\u2029': 'u2029'                                                                                                  // 1402\n  };                                                                                                                   // 1403\n                                                                                                                       // 1404\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;                                                                           // 1405\n                                                                                                                       // 1406\n  var escapeChar = function(match) {                                                                                   // 1407\n    return '\\\\' + escapes[match];                                                                                      // 1408\n  };                                                                                                                   // 1409\n                                                                                                                       // 1410\n  // JavaScript micro-templating, similar to John Resig's implementation.                                              // 1411\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,                                         // 1412\n  // and correctly escapes quotes within interpolated code.                                                            // 1413\n  // NB: `oldSettings` only exists for backwards compatibility.                                                        // 1414\n  _.template = function(text, settings, oldSettings) {                                                                 // 1415\n    if (!settings && oldSettings) settings = oldSettings;                                                              // 1416\n    settings = _.defaults({}, settings, _.templateSettings);                                                           // 1417\n                                                                                                                       // 1418\n    // Combine delimiters into one regular expression via alternation.                                                 // 1419\n    var matcher = RegExp([                                                                                             // 1420\n      (settings.escape || noMatch).source,                                                                             // 1421\n      (settings.interpolate || noMatch).source,                                                                        // 1422\n      (settings.evaluate || noMatch).source                                                                            // 1423\n    ].join('|') + '|$', 'g');                                                                                          // 1424\n                                                                                                                       // 1425\n    // Compile the template source, escaping string literals appropriately.                                            // 1426\n    var index = 0;                                                                                                     // 1427\n    var source = \"__p+='\";                                                                                             // 1428\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {                                     // 1429\n      source += text.slice(index, offset).replace(escaper, escapeChar);                                                // 1430\n      index = offset + match.length;                                                                                   // 1431\n                                                                                                                       // 1432\n      if (escape) {                                                                                                    // 1433\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";                                           // 1434\n      } else if (interpolate) {                                                                                        // 1435\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";                                                // 1436\n      } else if (evaluate) {                                                                                           // 1437\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";                                                                      // 1438\n      }                                                                                                                // 1439\n                                                                                                                       // 1440\n      // Adobe VMs need the match returned to produce the correct offest.                                              // 1441\n      return match;                                                                                                    // 1442\n    });                                                                                                                // 1443\n    source += \"';\\n\";                                                                                                  // 1444\n                                                                                                                       // 1445\n    // If a variable is not specified, place data values in local scope.                                               // 1446\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';                                              // 1447\n                                                                                                                       // 1448\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +                                                              // 1449\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +                                                            // 1450\n      source + 'return __p;\\n';                                                                                        // 1451\n                                                                                                                       // 1452\n    try {                                                                                                              // 1453\n      var render = new Function(settings.variable || 'obj', '_', source);                                              // 1454\n    } catch (e) {                                                                                                      // 1455\n      e.source = source;                                                                                               // 1456\n      throw e;                                                                                                         // 1457\n    }                                                                                                                  // 1458\n                                                                                                                       // 1459\n    var template = function(data) {                                                                                    // 1460\n      return render.call(this, data, _);                                                                               // 1461\n    };                                                                                                                 // 1462\n                                                                                                                       // 1463\n    // Provide the compiled source as a convenience for precompilation.                                                // 1464\n    var argument = settings.variable || 'obj';                                                                         // 1465\n    template.source = 'function(' + argument + '){\\n' + source + '}';                                                  // 1466\n                                                                                                                       // 1467\n    return template;                                                                                                   // 1468\n  };                                                                                                                   // 1469\n                                                                                                                       // 1470\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.                                               // 1471\n  _.chain = function(obj) {                                                                                            // 1472\n    var instance = _(obj);                                                                                             // 1473\n    instance._chain = true;                                                                                            // 1474\n    return instance;                                                                                                   // 1475\n  };                                                                                                                   // 1476\n                                                                                                                       // 1477\n  // OOP                                                                                                               // 1478\n  // ---------------                                                                                                   // 1479\n  // If Underscore is called as a function, it returns a wrapped object that                                           // 1480\n  // can be used OO-style. This wrapper holds altered versions of all the                                              // 1481\n  // underscore functions. Wrapped objects may be chained.                                                             // 1482\n                                                                                                                       // 1483\n  // Helper function to continue chaining intermediate results.                                                        // 1484\n  var result = function(instance, obj) {                                                                               // 1485\n    return instance._chain ? _(obj).chain() : obj;                                                                     // 1486\n  };                                                                                                                   // 1487\n                                                                                                                       // 1488\n  // Add your own custom functions to the Underscore object.                                                           // 1489\n  _.mixin = function(obj) {                                                                                            // 1490\n    _.each(_.functions(obj), function(name) {                                                                          // 1491\n      var func = _[name] = obj[name];                                                                                  // 1492\n      _.prototype[name] = function() {                                                                                 // 1493\n        var args = [this._wrapped];                                                                                    // 1494\n        push.apply(args, arguments);                                                                                   // 1495\n        return result(this, func.apply(_, args));                                                                      // 1496\n      };                                                                                                               // 1497\n    });                                                                                                                // 1498\n  };                                                                                                                   // 1499\n                                                                                                                       // 1500\n  // Add all of the Underscore functions to the wrapper object.                                                        // 1501\n  _.mixin(_);                                                                                                          // 1502\n                                                                                                                       // 1503\n  // Add all mutator Array functions to the wrapper.                                                                   // 1504\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {                            // 1505\n    var method = ArrayProto[name];                                                                                     // 1506\n    _.prototype[name] = function() {                                                                                   // 1507\n      var obj = this._wrapped;                                                                                         // 1508\n      method.apply(obj, arguments);                                                                                    // 1509\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];                                  // 1510\n      return result(this, obj);                                                                                        // 1511\n    };                                                                                                                 // 1512\n  });                                                                                                                  // 1513\n                                                                                                                       // 1514\n  // Add all accessor Array functions to the wrapper.                                                                  // 1515\n  _.each(['concat', 'join', 'slice'], function(name) {                                                                 // 1516\n    var method = ArrayProto[name];                                                                                     // 1517\n    _.prototype[name] = function() {                                                                                   // 1518\n      return result(this, method.apply(this._wrapped, arguments));                                                     // 1519\n    };                                                                                                                 // 1520\n  });                                                                                                                  // 1521\n                                                                                                                       // 1522\n  // Extracts the result from a wrapped and chained object.                                                            // 1523\n  _.prototype.value = function() {                                                                                     // 1524\n    return this._wrapped;                                                                                              // 1525\n  };                                                                                                                   // 1526\n                                                                                                                       // 1527\n  // Provide unwrapping proxy for some methods used in engine operations                                               // 1528\n  // such as arithmetic and JSON stringification.                                                                      // 1529\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;                                                        // 1530\n                                                                                                                       // 1531\n  _.prototype.toString = function() {                                                                                  // 1532\n    return '' + this._wrapped;                                                                                         // 1533\n  };                                                                                                                   // 1534\n                                                                                                                       // 1535\n  // AMD registration happens at the end for compatibility with AMD loaders                                            // 1536\n  // that may not enforce next-turn semantics on modules. Even though general                                          // 1537\n  // practice for AMD registration is to be anonymous, underscore registers                                            // 1538\n  // as a named module because, like jQuery, it is a base library that is                                              // 1539\n  // popular enough to be bundled in a third party lib, but not be part of                                             // 1540\n  // an AMD load request. Those cases could generate an error when an                                                  // 1541\n  // anonymous define() is called outside of a loader request.                                                         // 1542\n  if (typeof define === 'function' && define.amd) {                                                                    // 1543\n    define('underscore', [], function() {                                                                              // 1544\n      return _;                                                                                                        // 1545\n    });                                                                                                                // 1546\n  }                                                                                                                    // 1547\n}.call(this));                                                                                                         // 1548\n                                                                                                                       // 1549\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"eth-registrar-ens\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/eth-registrar-ens/package.json                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"eth-registrar-ens\";                                                                                    // 1\nexports.version = \"0.5.3\";                                                                                             // 2\nexports.main = \"lib/index.js\";                                                                                         // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"index.js\":[\"./interfaces.js\",\"ethereum-ens\",\"node-stringprep\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/eth-registrar-ens/lib/index.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n                                                                                                                       // 2\nvar interfaces = require('./interfaces.js');                                                                           // 3\n                                                                                                                       // 4\nvar ENS = require('ethereum-ens');                                                                                     // 5\nvar StringPrep = require('node-stringprep').StringPrep;                                                                // 6\n                                                                                                                       // 7\nvar NamePrep = new StringPrep('nameprep');                                                                             // 8\nvar namehash = ENS.prototype.namehash;                                                                                 // 9\n                                                                                                                       // 10\n/**                                                                                                                    // 11\n * Constructs a new Registrar instance, providing an easy-to-use interface to the                                      // 12\n * [Initial Registrar][wiki], which governs the `.eth` namespace.  Either Registrar.init(),                            // 13\n * or registrar.initDefault() must be called                                                                           // 14\n * [wiki]: https://github.com/ethereum/ens/wiki                                                                        // 15\n *                                                                                                                     // 16\n * ### Example usage:                                                                                                  // 17\n *                                                                                                                     // 18\n *     var Registrar = require('eth-registrar-ens');                                                                   // 19\n *     var Web3 = require('web3');                                                                                     // 20\n *                                                                                                                     // 21\n *     var web3 = new Web3();                                                                                          // 22\n *                                                                                                                     // 23\n * The public ENS is already deployed on Ropsten at `0x112234455c3a32fd11230c42e7bccd4a84e02010`.                      // 24\n * It will be at the same address when deployed on the Ethereum Main net. This package imports the                     // 25\n * [`ethereum-ens`](https://www.npmjs.com/package/ethereum-ens) package, and defaults to the public ENS address,       // 26\n * so all that is needed to construct it is `[web3](https://www.npmjs.com/package/web3)`. The rest is optional.        // 27\n *                                                                                                                     // 28\n *     var registrar = new Registrar(web3);                                                                            // 29\n *                                                                                                                     // 30\n * If you are working with another instance of the ENS, you will need to instantiate your own                          // 31\n * 'ethereum-ens' object with the correct address. You can also specify a custom TLD, and minimum                      // 32\n * character length for valid names.                                                                                   // 33\n *                                                                                                                     // 34\n *     var ENS = require('ethereum-ens');                                                                              // 35\n *     var yourEnsAddress = '0x0dfc1...'                                                                               // 36\n *     var ens = new ENS(web3, address)                                                                                // 37\n *     var registrar = new Registrar(web3, ens, 'yourTLD', 0);                                                         // 38\n *                                                                                                                     // 39\n *     var name = 'foobarbaz';                                                                                         // 40\n *     registrar.startAuction(name);                                                                                   // 41\n *                                                                                                                     // 42\n *     var owner = web3.eth.accounts[0]                                                                                // 43\n *     var value = web3.toWei(1, 'ether');                                                                             // 44\n *                                                                                                                     // 45\n *     // generate a sealed bid                                                                                        // 46\n *     var bid = registrar.shaBid(name, owner, value, 'secret');                                                       // 47\n *                                                                                                                     // 48\n *     // submit a bid, and a deposit value. The parameters of your true bid are secret.                               // 49\n *     var deposit = web3.toWei(2, 'ether');                                                                           // 50\n *     registrar.newBid(bid, {value: deposit});                                                                        // 51\n *                                                                                                                     // 52\n *     // reveal your bid during the reveal period                                                                     // 53\n *     registrar.unsealBid(name, owner, value, 'secret');                                                              // 54\n *                                                                                                                     // 55\n *     // After the registration date has passed, assign ownership of the name                                         // 56\n *     // in the ENS. In this case, the highest bidder would now own 'foobarbaz.eth'                                   // 57\n *     registrar.finalizeAuction(name);                                                                                // 58\n *                                                                                                                     // 59\n *                                                                                                                     // 60\n * Throughout this module, the same optionally-asynchronous pattern as web3 is                                         // 61\n * used: all functions that call web3 take a callback as an optional last                                              // 62\n * argument; if supplied, the function returns nothing, but instead calls the                                          // 63\n * callback with (err, result) when the operation completes.                                                           // 64\n *                                                                                                                     // 65\n * Functions that create transactions also take an optional 'options' argument;                                        // 66\n * this has the same parameters as web3.                                                                               // 67\n *                                                                                                                     // 68\n * @author J Maurelian                                                                                                 // 69\n * @date 2016                                                                                                          // 70\n * @license LGPL                                                                                                       // 71\n *                                                                                                                     // 72\n * @class                                                                                                              // 73\n * @param {object} web3 A web3 instance to use to communicate with the blockchain.                                     // 74\n * @param {address} address The address of the registrar.                                                              // 75\n * @param {integer} minLength The minimum length of a name require by the registrar.                                   // 76\n * @param {string} tld The top level domain                                                                            // 77\n * @param {string} ens The address of the ENS instance                                                                 // 78\n */                                                                                                                    // 79\nfunction Registrar(web3) {                                                                                             // 80\n  var ens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ENS(web3);                         // 81\n  var tld = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'eth';                                 // 82\n  var minLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 7;                               // 83\n                                                                                                                       // 84\n  this.web3 = web3;                                                                                                    // 85\n                                                                                                                       // 86\n  // prior to version 0.16, web3.sha3 didn't prepend '0x', to support both options                                     // 87\n  // here we attach a sha3 method to the registrar object, and ensure that it                                          // 88\n  // always prepends '0x'                                                                                              // 89\n  this.sha3 = function sha3withZeroX() {                                                                               // 90\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                             // 91\n      args[_key] = arguments[_key];                                                                                    // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    var result = web3.sha3.apply(this, args);                                                                          // 95\n    if (result[1] !== 'x') {                                                                                           // 96\n      return '0x' + result;                                                                                            // 97\n    }                                                                                                                  // 98\n    return result;                                                                                                     // 99\n  };                                                                                                                   // 100\n                                                                                                                       // 101\n  this.ens = ens;                                                                                                      // 102\n  this.tld = tld;                                                                                                      // 103\n  this.minLength = minLength;                                                                                          // 104\n  this.address = this.ens.owner(this.tld);                                                                             // 105\n  this.contract = this.web3.eth.contract(interfaces.registrarInterface).at(this.address);                              // 106\n  this.rootNode = namehash(this.tld); // this isn't used yet, but I expect it will be handy                            // 107\n}                                                                                                                      // 108\n                                                                                                                       // 109\nRegistrar.TooShort = Error('Name is too short');                                                                       // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Maps special characters to a similar \"canonical\" character.                                                         // 113\n * We are being much more stringent than nameprep for now.                                                             // 114\n*/                                                                                                                     // 115\nfunction cleanName(input) {                                                                                            // 116\n  return NamePrep.prepare(input).replace(/[áăǎâäȧạȁàảȃāąᶏẚåḁⱥã]/g, 'a').replace(/[èéêëēěĕȅȩḙėẹẻęẽ]/g, 'e').replace(/[íĭǐîïịȉìỉȋīįᶖɨĩḭ]/g, 'i').replace(/[óŏǒôöȯọőȍòỏơȏꝋꝍⱺōǫøõ]/g, 'o').replace(/[úŭǔûṷüṳụűȕùủưȗūųᶙůũṵ]/g, 'u').replace(/[çćčĉċ]/g, 'c').replace(/[śšşŝșṡṣʂᵴꞩᶊȿ]/g, 's').replace(/[^a-z0-9\\-_]*/g, '');\n}                                                                                                                      // 118\n                                                                                                                       // 119\nRegistrar.SpecialCharacters = Error('Name cannot contain special characters other than ' + 'a-z, 0-9, \\'-\\' and \\'_\\'.');\n                                                                                                                       // 121\nRegistrar.prototype.validateName = function validateName(name) {                                                       // 122\n  if (name.length <= this.minLength) {                                                                                 // 123\n    throw Registrar.TooShort;                                                                                          // 124\n  }                                                                                                                    // 125\n  if (name !== cleanName(name)) {                                                                                      // 126\n    throw Registrar.SpecialCharacters;                                                                                 // 127\n  }                                                                                                                    // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Constructs a new Entry instance corresponding to a name.                                                            // 132\n *                                                                                                                     // 133\n * @param {string} name The unhashed name                                                                              // 134\n * @param {string} hash                                                                                                // 135\n * @param {number} status                                                                                              // 136\n * @param {address} deed                                                                                               // 137\n * @param {number} registrationDate                                                                                    // 138\n * @param {number} value                                                                                               // 139\n * @param {number} highestBid                                                                                          // 140\n */                                                                                                                    // 141\nfunction Entry(name, hash, status, deed, registrationDate, value, highestBid) {                                        // 142\n  // TODO: improve Entry constructor so that unknown names can be handled via getEntry                                 // 143\n  this.name = name;                                                                                                    // 144\n  this.hash = hash;                                                                                                    // 145\n  this.status = status;                                                                                                // 146\n  this.deed = deed;                                                                                                    // 147\n  this.registrationDate = registrationDate;                                                                            // 148\n  this.value = value;                                                                                                  // 149\n  this.highestBid = highestBid;                                                                                        // 150\n                                                                                                                       // 151\n  // Check the auction mode                                                                                            // 152\n                                                                                                                       // 153\n  var mode = '';                                                                                                       // 154\n                                                                                                                       // 155\n  // TODO: make the minimum length dynamic to match the Registrar constructor                                          // 156\n  if (name.length < 7) {                                                                                               // 157\n    // If name is short, check if it has been bought                                                                   // 158\n    if (this.status === 0) {                                                                                           // 159\n      // TODO: Calling this 'invalid' is confusing, it's not the same as 'invalidated'                                 // 160\n      mode = 'invalid';                                                                                                // 161\n    } else {                                                                                                           // 162\n      mode = 'can-invalidate';                                                                                         // 163\n    }                                                                                                                  // 164\n  } else {                                                                                                             // 165\n    // If name is of valid length                                                                                      // 166\n    if (this.status === 0) {                                                                                           // 167\n      //eslint-disable-line                                                                                            // 168\n      // Not an auction yet                                                                                            // 169\n      mode = 'open';                                                                                                   // 170\n    } else if (this.status === 1) {                                                                                    // 171\n      var now = new Date();                                                                                            // 172\n      var registration = new Date(this.registrationDate * 1000);                                                       // 173\n      var hours = 60 * 60 * 1000;                                                                                      // 174\n                                                                                                                       // 175\n      if (registration - now > 24 * hours) {                                                                           // 176\n        // Bids are open                                                                                               // 177\n        mode = 'auction';                                                                                              // 178\n      } else if (now < registration && registration - now < 24 * hours) {                                              // 179\n        // reveal time!                                                                                                // 180\n        mode = 'reveal';                                                                                               // 181\n      } else if (now > registration && now - registration < 24 * hours) {                                              // 182\n        // finalize now                                                                                                // 183\n        mode = 'finalize';                                                                                             // 184\n      } else {                                                                                                         // 185\n        // finalize now but can open?                                                                                  // 186\n        mode = 'finalize-open';                                                                                        // 187\n      }                                                                                                                // 188\n    } else if (this.status === 2) {                                                                                    // 189\n      mode = 'owned';                                                                                                  // 190\n    }                                                                                                                  // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  this.mode = mode;                                                                                                    // 194\n}                                                                                                                      // 195\n                                                                                                                       // 196\n/**                                                                                                                    // 197\n * Constructs a Deed object                                                                                            // 198\n */                                                                                                                    // 199\nfunction Deed(address, balance, creationDate, owner) {                                                                 // 200\n  this.address = address;                                                                                              // 201\n  this.balance = balance;                                                                                              // 202\n  this.creationDate = creationDate;                                                                                    // 203\n  this.owner = owner;                                                                                                  // 204\n}                                                                                                                      // 205\n                                                                                                                       // 206\nRegistrar.prototype.getDeed = function getDeed(address) {                                                              // 207\n  var d = this.web3.eth.contract(interfaces.deedInterface).at(address);                                                // 208\n  var balance = this.web3.eth.getBalance(address);                                                                     // 209\n  return new Deed(d.address, balance, d.creationDate(), d.owner());                                                    // 210\n};                                                                                                                     // 211\n                                                                                                                       // 212\n/**                                                                                                                    // 213\n * Returns the properties of the entry for a given a name                                                              // 214\n *                                                                                                                     // 215\n * @method getEntry                                                                                                    // 216\n * @alias Registrar.getEntry                                                                                           // 217\n * @memberOf Registrar.prototype                                                                                       // 218\n * @param {string} input The name or hash to get the entry for                                                         // 219\n * @param {function} callback An optional callback; if specified, the                                                  // 220\n *        function executes asynchronously.                                                                            // 221\n *                                                                                                                     // 222\n * @returns An Entry object                                                                                            // 223\n */                                                                                                                    // 224\nRegistrar.prototype.getEntry = function getEntry(input, callback) {                                                    // 225\n  // Accept either a name or a hash                                                                                    // 226\n  var hash = input;                                                                                                    // 227\n  // if the input is a hash, we'll use that for the name in the entry object                                           // 228\n  var name = input;                                                                                                    // 229\n  // if the input is a name                                                                                            // 230\n  if (input.substring(0, 2) !== '0x') {                                                                                // 231\n    name = cleanName(input);                                                                                           // 232\n    hash = this.sha3(name);                                                                                            // 233\n  }                                                                                                                    // 234\n                                                                                                                       // 235\n  var e = this.contract.entries(hash);                                                                                 // 236\n  var deed = void 0;                                                                                                   // 237\n                                                                                                                       // 238\n  if (e[1] !== '0x0000000000000000000000000000000000000000') {                                                         // 239\n    //                                                                                                                 // 240\n    deed = this.getDeed(e[1]);                                                                                         // 241\n  } else {                                                                                                             // 242\n    // construct a deed object with all props null except for the 0 address                                            // 243\n    deed = new Deed(e[1], null, null, null);                                                                           // 244\n  }                                                                                                                    // 245\n                                                                                                                       // 246\n  var entry = new Entry(name, hash, e[0].toNumber(), deed, e[2].toNumber(), e[3].toNumber(), e[4].toNumber());         // 247\n                                                                                                                       // 248\n  if (callback) {                                                                                                      // 249\n    callback(null, entry);                                                                                             // 250\n  } else {                                                                                                             // 251\n    return entry;                                                                                                      // 252\n  }                                                                                                                    // 253\n};                                                                                                                     // 254\n                                                                                                                       // 255\n/**                                                                                                                    // 256\n * Opens an auction for the desired name as well as several other randomly generated hashes,                           // 257\n * this helps to prevent other bidders from guessing which names you are interested in.                                // 258\n *                                                                                                                     // 259\n * @param {string} name The name to start an auction on                                                                // 260\n * @param {object} params An optional transaction object to pass to web3.                                              // 261\n * @param {function} callback An optional callback; if specified, the                                                  // 262\n *        function executes asynchronously.                                                                            // 263\n *                                                                                                                     // 264\n * @returns The txid, array of randomly generated names if callback is not supplied.                                   // 265\n */                                                                                                                    // 266\nRegistrar.prototype.openAuction = function openAuction(name) {                                                         // 267\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 268\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                             // 269\n                                                                                                                       // 270\n  var hash = this.sha3(name);                                                                                          // 271\n                                                                                                                       // 272\n  // Generate an array of random hashes                                                                                // 273\n  var randomHashes = new Array(10);                                                                                    // 274\n  for (var i = 0; i < randomHashes.length; i++) {                                                                      // 275\n    randomHashes[i] = this.sha3(Math.random().toString());                                                             // 276\n  }                                                                                                                    // 277\n  // Randomly select an array entry to replace with the name we want                                                   // 278\n  var j = Math.floor(Math.random() * 10);                                                                              // 279\n  randomHashes[j] = hash;                                                                                              // 280\n                                                                                                                       // 281\n  if (callback) {                                                                                                      // 282\n    try {                                                                                                              // 283\n      this.validateName(name);                                                                                         // 284\n      // if name is not valid, this line won't be called.                                                              // 285\n      this.contract.startAuctions(randomHashes, params, callback);                                                     // 286\n    } catch (e) {                                                                                                      // 287\n      callback(e, null);                                                                                               // 288\n    }                                                                                                                  // 289\n  } else {                                                                                                             // 290\n    this.validateName(name);                                                                                           // 291\n    return this.contract.startAuctions(randomHashes, params);                                                          // 292\n  }                                                                                                                    // 293\n};                                                                                                                     // 294\n                                                                                                                       // 295\nRegistrar.NoDeposit = Error('You must specify a deposit amount greater than the value of your bid');                   // 296\n                                                                                                                       // 297\n/**                                                                                                                    // 298\n * Constructs a Bid object, with properties corresponding exactly to the                                               // 299\n * inputs of the registrar contracts 'shaBid' function.                                                                // 300\n * When a bid is submitted, these values will be save so that they can be used                                         // 301\n * to reveal the bid params later.                                                                                     // 302\n *                                                                                                                     // 303\n * @param {string} name The name to be bid on                                                                          // 304\n * @param {string} address An optional owner address                                                                   // 305\n * @param {number} value The value of your bid in wei                                                                  // 306\n * @param {secret} secret An optional random value                                                                     // 307\n */                                                                                                                    // 308\n// TODO: set default address on the registrar and use it for owner default value                                       // 309\nRegistrar.prototype.bidFactory = function bidFactory(name, owner, value, secret) {                                     // 310\n  var sha3 = this.sha3;                                                                                                // 311\n  var cleanedName = cleanName(name);                                                                                   // 312\n  var bidObject = {                                                                                                    // 313\n    name: cleanedName,                                                                                                 // 314\n    // TODO: consider renaming any hashes to  `this.node`                                                              // 315\n    hash: sha3(cleanedName),                                                                                           // 316\n    value: value,                                                                                                      // 317\n    owner: owner,                                                                                                      // 318\n    secret: secret,                                                                                                    // 319\n    hexSecret: sha3(secret),                                                                                           // 320\n    // Use the bid properties to get the shaBid value from the contract                                                // 321\n    shaBid: this.contract.shaBid(sha3(cleanedName), owner, value, sha3(secret))                                        // 322\n  };                                                                                                                   // 323\n  return bidObject;                                                                                                    // 324\n};                                                                                                                     // 325\n                                                                                                                       // 326\n/**                                                                                                                    // 327\n * Submits a sealed bid and deposit to the registrar contract                                                          // 328\n *                                                                                                                     // 329\n * @param {string} bid                                                                                                 // 330\n * @param {object} params An optional transaction object to pass to web3. The value sent must be                       // 331\n *   at least as much as the bid value.                                                                                // 332\n * @param {function} callback An optional callback; if specified, the                                                  // 333\n *        function executes asynchronously.                                                                            // 334\n *                                                                                                                     // 335\n * @param {object} bid A Bid object.                                                                                   // 336\n */                                                                                                                    // 337\nRegistrar.prototype.submitBid = function submitBid(bid) {                                                              // 338\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 339\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                             // 340\n                                                                                                                       // 341\n  if (callback) {                                                                                                      // 342\n    if (params.value < bid.value) {                                                                                    // 343\n      callback(Registrar.NoDeposit, null);                                                                             // 344\n    } else {                                                                                                           // 345\n      this.contract.newBid(bid.shaBid, params, callback);                                                              // 346\n    }                                                                                                                  // 347\n  } else {                                                                                                             // 348\n    if (params.value < bid.value) {                                                                                    // 349\n      throw Registrar.NoDeposit;                                                                                       // 350\n    }                                                                                                                  // 351\n    return this.contract.newBid(bid.shaBid, params);                                                                   // 352\n  }                                                                                                                    // 353\n};                                                                                                                     // 354\n                                                                                                                       // 355\n/**                                                                                                                    // 356\n * Submits the parameters of a bid. The registrar will then generate                                                   // 357\n * the bid string, and associate them with the previously submitted bid string and                                     // 358\n * deposit. If you have not already submitted a bid string, the registrar will throw.                                  // 359\n * If your bid is revealed as the current highest; the difference between your deposit                                 // 360\n * and bid value will be returned to you, and the previous highest bidder will have                                    // 361\n * their funds returned. If you are not the highest bidder, all your funds will be                                     // 362\n * returned. Returns are sent to the owner address on the bid.                                                         // 363\n *                                                                                                                     // 364\n *                                                                                                                     // 365\n * @param {string} bid A bid object                                                                                    // 366\n * @param {object} options An optional transaction object to pass to web3.                                             // 367\n * @param {function} callback An optional callback; if specified, the                                                  // 368\n *        function executes asynchronously.                                                                            // 369\n *                                                                                                                     // 370\n * @returns The transaction ID if callback is not supplied.                                                            // 371\n */                                                                                                                    // 372\nRegistrar.prototype.unsealBid = function unsealBid(bid) {                                                              // 373\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 374\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                             // 375\n                                                                                                                       // 376\n  if (callback) {                                                                                                      // 377\n    this.contract.unsealBid(bid.hash, bid.owner, bid.value, bid.hexSecret, params, callback);                          // 378\n  } else {                                                                                                             // 379\n    return this.contract.unsealBid(bid.hash, bid.owner, bid.value, bid.hexSecret, params);                             // 380\n  }                                                                                                                    // 381\n};                                                                                                                     // 382\n                                                                                                                       // 383\n/**                                                                                                                    // 384\n * __Not yet implemented__                                                                                             // 385\n * After the registration date has passed, calling finalizeAuction                                                     // 386\n * will set the winner as the owner of the corresponding ENS subnode.                                                  // 387\n *                                                                                                                     // 388\n * @param {string} name                                                                                                // 389\n * @param {object} options An optional transaction object to pass to web3.                                             // 390\n * @param {function} callback An optional callback; if specified, the                                                  // 391\n *        function executes asynchronously.                                                                            // 392\n *                                                                                                                     // 393\n * @returns The transaction ID if callback is not supplied.                                                            // 394\n */                                                                                                                    // 395\nRegistrar.prototype.finalizeAuction = function finalizeAuction(name) {                                                 // 396\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 397\n  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;                             // 398\n                                                                                                                       // 399\n  var cleanedName = cleanName(name);                                                                                   // 400\n  var hash = this.sha3(cleanedName);                                                                                   // 401\n                                                                                                                       // 402\n  if (callback) {                                                                                                      // 403\n    this.contract.finalizeAuction(hash, params, callback);                                                             // 404\n  } else {                                                                                                             // 405\n    return this.contract.finalizeAuction(hash, params);                                                                // 406\n  }                                                                                                                    // 407\n};                                                                                                                     // 408\n                                                                                                                       // 409\n/**                                                                                                                    // 410\n * __Not yet implemented__                                                                                             // 411\n * The owner of a domain may transfer it, and the associated deed,                                                     // 412\n * to someone else at any time.                                                                                        // 413\n *                                                                                                                     // 414\n * @param {string} name The node to transfer                                                                           // 415\n * @param {string} newOwner The address to transfer ownership to                                                       // 416\n * @param {object} options An optional transaction object to pass to web3.                                             // 417\n * @param {function} callback An optional callback; if specified, the                                                  // 418\n *        function executes asynchronously.                                                                            // 419\n *                                                                                                                     // 420\n * @returns The transaction ID if callback is not supplied.                                                            // 421\n */                                                                                                                    // 422\nRegistrar.prototype.transfer = function transfer() {};                                                                 // 423\n                                                                                                                       // 424\n/**                                                                                                                    // 425\n * __Not yet implemented__                                                                                             // 426\n * After one year, the owner can release the property and get their ether back                                         // 427\n *                                                                                                                     // 428\n * @param {string} name The name to release                                                                            // 429\n * @param {object} options An optional transaction object to pass to web3.                                             // 430\n * @param {function} callback An optional callback; if specified, the                                                  // 431\n *        function executes asynchronously.                                                                            // 432\n *                                                                                                                     // 433\n * @returns The transaction ID if callback is not supplied.                                                            // 434\n */                                                                                                                    // 435\nRegistrar.prototype.releaseDeed = function releaseDeed() {};                                                           // 436\n                                                                                                                       // 437\n/**                                                                                                                    // 438\n * __Not yet implemented__                                                                                             // 439\n * Submit a name 6 characters long or less. If it has been registered,                                                 // 440\n * the submitter will earn a portion of the deed value, and the name will be updated                                   // 441\n *                                                                                                                     // 442\n * @param {string} name An invalid name to search for in the registry.                                                 // 443\n * @param {object} options An optional transaction object to pass to web3.                                             // 444\n * @param {function} callback An optional callback; if specified, the                                                  // 445\n *        function executes asynchronously.                                                                            // 446\n *                                                                                                                     // 447\n * @returns The transaction ID if callback is not supplied.                                                            // 448\n */                                                                                                                    // 449\nRegistrar.prototype.invalidateName = function invalidateName() {};                                                     // 450\n                                                                                                                       // 451\n/**                                                                                                                    // 452\n * __Not yet implemented__                                                                                             // 453\n * Transfers the deed to the current registrar, if different from this one.                                            // 454\n * Used during the upgrade process to a permanent registrar.                                                           // 455\n *                                                                                                                     // 456\n * @param name The name to transfer.                                                                                   // 457\n * @param {object} options An optional transaction object to pass to web3.                                             // 458\n * @param {function} callback An optional callback; if specified, the                                                  // 459\n *        function executes asynchronously.                                                                            // 460\n *                                                                                                                     // 461\n * @returns The transaction ID if callback is not supplied.                                                            // 462\n */                                                                                                                    // 463\nRegistrar.prototype.transferRegistrars = function transferRegistrars() {};                                             // 464\n                                                                                                                       // 465\nmodule.exports = Registrar;                                                                                            // 466\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"interfaces.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/eth-registrar-ens/lib/interfaces.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\n/* eslint-disable*/                                                                                                    // 3\nmodule.exports = {                                                                                                     // 4\n    registrarInterface: [{ \"constant\": false, \"inputs\": [{ \"name\": \"_hash\", \"type\": \"bytes32\" }], \"name\": \"releaseDeed\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"unhashedName\", \"type\": \"string\" }], \"name\": \"invalidateName\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"hash\", \"type\": \"bytes32\" }, { \"name\": \"owner\", \"type\": \"address\" }, { \"name\": \"value\", \"type\": \"uint256\" }, { \"name\": \"salt\", \"type\": \"bytes32\" }], \"name\": \"shaBid\", \"outputs\": [{ \"name\": \"sealedBid\", \"type\": \"bytes32\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"bytes32\" }], \"name\": \"entries\", \"outputs\": [{ \"name\": \"status\", \"type\": \"uint8\" }, { \"name\": \"deed\", \"type\": \"address\" }, { \"name\": \"registrationDate\", \"type\": \"uint256\" }, { \"name\": \"value\", \"type\": \"uint256\" }, { \"name\": \"highestBid\", \"type\": \"uint256\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"ens\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"bytes32\" }], \"name\": \"sealedBids\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_hash\", \"type\": \"bytes32\" }, { \"name\": \"newOwner\", \"type\": \"address\" }], \"name\": \"transfer\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_hash\", \"type\": \"bytes32\" }], \"name\": \"finalizeAuction\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_hash\", \"type\": \"bytes32\" }, { \"name\": \"_owner\", \"type\": \"address\" }, { \"name\": \"_value\", \"type\": \"uint256\" }, { \"name\": \"_salt\", \"type\": \"bytes32\" }], \"name\": \"unsealBid\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"registryCreated\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"sealedBid\", \"type\": \"bytes32\" }], \"name\": \"newBid\", \"outputs\": [], \"payable\": true, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"seal\", \"type\": \"bytes32\" }], \"name\": \"cancelBid\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_hashes\", \"type\": \"bytes32[]\" }], \"name\": \"startAuctions\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_hash\", \"type\": \"bytes32\" }], \"name\": \"startAuction\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"rootNode\", \"outputs\": [{ \"name\": \"\", \"type\": \"bytes32\" }], \"payable\": false, \"type\": \"function\" }, { \"inputs\": [{ \"name\": \"_ens\", \"type\": \"address\" }, { \"name\": \"_rootNode\", \"type\": \"bytes32\" }], \"payable\": false, \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": false, \"name\": \"auctionExpiryDate\", \"type\": \"uint256\" }], \"name\": \"AuctionStarted\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": false, \"name\": \"deposit\", \"type\": \"uint256\" }], \"name\": \"NewBid\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }, { \"indexed\": false, \"name\": \"status\", \"type\": \"uint8\" }], \"name\": \"BidRevealed\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": true, \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }, { \"indexed\": false, \"name\": \"now\", \"type\": \"uint256\" }], \"name\": \"HashRegistered\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }], \"name\": \"HashReleased\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\" }, { \"indexed\": true, \"name\": \"name\", \"type\": \"string\" }, { \"indexed\": false, \"name\": \"value\", \"type\": \"uint256\" }, { \"indexed\": false, \"name\": \"now\", \"type\": \"uint256\" }], \"name\": \"HashInvalidated\", \"type\": \"event\" }],\n    registryInterface: [{ \"constant\": true, \"inputs\": [{ \"name\": \"node\", \"type\": \"bytes32\" }], \"name\": \"resolver\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"node\", \"type\": \"bytes32\" }], \"name\": \"owner\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"node\", \"type\": \"bytes32\" }, { \"name\": \"resolver\", \"type\": \"address\" }], \"name\": \"setResolver\", \"outputs\": [], \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"node\", \"type\": \"bytes32\" }, { \"name\": \"label\", \"type\": \"bytes32\" }, { \"name\": \"owner\", \"type\": \"address\" }], \"name\": \"setSubnodeOwner\", \"outputs\": [], \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"node\", \"type\": \"bytes32\" }, { \"name\": \"owner\", \"type\": \"address\" }], \"name\": \"setOwner\", \"outputs\": [], \"type\": \"function\" }],\n    deedInterface: [{ \"constant\": true, \"inputs\": [], \"name\": \"creationDate\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"destroyDeed\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"newOwner\", \"type\": \"address\" }], \"name\": \"setOwner\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"registrar\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"refundRatio\", \"type\": \"uint256\" }], \"name\": \"closeDeed\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"newValue\", \"type\": \"uint256\" }], \"name\": \"setBalance\", \"outputs\": [], \"payable\": true, \"type\": \"function\" }, { \"inputs\": [], \"payable\": false, \"type\": \"constructor\" }, { \"payable\": true, \"type\": \"fallback\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"name\": \"newOwner\", \"type\": \"address\" }], \"name\": \"OwnerChanged\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [], \"name\": \"DeedClosed\", \"type\": \"event\" }]\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"web3\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/package.json                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"web3\";                                                                                                 // 1\nexports.version = \"0.17.0-beta\";                                                                                       // 2\nexports.main = \"./index.js\";                                                                                           // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./lib/web3\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/index.js                                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Web3 = require('./lib/web3');                                                                                      // 1\n                                                                                                                       // 2\n// dont override global variable                                                                                       // 3\nif (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {                                             // 4\n    window.Web3 = Web3;                                                                                                // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\nmodule.exports = Web3;                                                                                                 // 8\n                                                                                                                       // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"lib\":{\"web3.js\":[\"./web3/requestmanager\",\"./web3/iban\",\"./web3/methods/eth\",\"./web3/methods/db\",\"./web3/methods/shh\",\"./web3/methods/net\",\"./web3/methods/personal\",\"./web3/settings\",\"./version.json\",\"./utils/utils\",\"./utils/sha3\",\"./web3/extend\",\"./web3/batch\",\"./web3/property\",\"./web3/httpprovider\",\"./web3/ipcprovider\",\"bignumber.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file web3.js                                                                                                       // 18\n * @authors:                                                                                                           // 19\n *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 20\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 21\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 22\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 23\n *   Gav Wood <g@ethdev.com>                                                                                           // 24\n * @date 2014                                                                                                          // 25\n */                                                                                                                    // 26\n                                                                                                                       // 27\nvar RequestManager = require('./web3/requestmanager');                                                                 // 28\nvar Iban = require('./web3/iban');                                                                                     // 29\nvar Eth = require('./web3/methods/eth');                                                                               // 30\nvar DB = require('./web3/methods/db');                                                                                 // 31\nvar Shh = require('./web3/methods/shh');                                                                               // 32\nvar Net = require('./web3/methods/net');                                                                               // 33\nvar Personal = require('./web3/methods/personal');                                                                     // 34\nvar Settings = require('./web3/settings');                                                                             // 35\nvar version = require('./version.json');                                                                               // 36\nvar utils = require('./utils/utils');                                                                                  // 37\nvar sha3 = require('./utils/sha3');                                                                                    // 38\nvar extend = require('./web3/extend');                                                                                 // 39\nvar Batch = require('./web3/batch');                                                                                   // 40\nvar Property = require('./web3/property');                                                                             // 41\nvar HttpProvider = require('./web3/httpprovider');                                                                     // 42\nvar IpcProvider = require('./web3/ipcprovider');                                                                       // 43\nvar BigNumber = require('bignumber.js');                                                                               // 44\n                                                                                                                       // 45\n                                                                                                                       // 46\n                                                                                                                       // 47\nfunction Web3 (provider) {                                                                                             // 48\n    this._requestManager = new RequestManager(provider);                                                               // 49\n    this.currentProvider = provider;                                                                                   // 50\n    this.eth = new Eth(this);                                                                                          // 51\n    this.db = new DB(this);                                                                                            // 52\n    this.shh = new Shh(this);                                                                                          // 53\n    this.net = new Net(this);                                                                                          // 54\n    this.personal = new Personal(this);                                                                                // 55\n    this.settings = new Settings();                                                                                    // 56\n    this.version = {                                                                                                   // 57\n        api: version.version                                                                                           // 58\n    };                                                                                                                 // 59\n    this.providers = {                                                                                                 // 60\n        HttpProvider: HttpProvider,                                                                                    // 61\n        IpcProvider: IpcProvider                                                                                       // 62\n    };                                                                                                                 // 63\n    this._extend = extend(this);                                                                                       // 64\n    this._extend({                                                                                                     // 65\n        properties: properties()                                                                                       // 66\n    });                                                                                                                // 67\n}                                                                                                                      // 68\n                                                                                                                       // 69\n// expose providers on the class                                                                                       // 70\nWeb3.providers = {                                                                                                     // 71\n    HttpProvider: HttpProvider,                                                                                        // 72\n    IpcProvider: IpcProvider                                                                                           // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\nWeb3.prototype.setProvider = function (provider) {                                                                     // 76\n    this._requestManager.setProvider(provider);                                                                        // 77\n    this.currentProvider = provider;                                                                                   // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nWeb3.prototype.reset = function (keepIsSyncing) {                                                                      // 81\n    this._requestManager.reset(keepIsSyncing);                                                                         // 82\n    this.settings = new Settings();                                                                                    // 83\n};                                                                                                                     // 84\n                                                                                                                       // 85\nWeb3.prototype.BigNumber = BigNumber;                                                                                  // 86\nWeb3.prototype.toHex = utils.toHex;                                                                                    // 87\nWeb3.prototype.toAscii = utils.toAscii;                                                                                // 88\nWeb3.prototype.toUtf8 = utils.toUtf8;                                                                                  // 89\nWeb3.prototype.fromAscii = utils.fromAscii;                                                                            // 90\nWeb3.prototype.fromUtf8 = utils.fromUtf8;                                                                              // 91\nWeb3.prototype.toDecimal = utils.toDecimal;                                                                            // 92\nWeb3.prototype.fromDecimal = utils.fromDecimal;                                                                        // 93\nWeb3.prototype.toBigNumber = utils.toBigNumber;                                                                        // 94\nWeb3.prototype.toWei = utils.toWei;                                                                                    // 95\nWeb3.prototype.fromWei = utils.fromWei;                                                                                // 96\nWeb3.prototype.isAddress = utils.isAddress;                                                                            // 97\nWeb3.prototype.isChecksumAddress = utils.isChecksumAddress;                                                            // 98\nWeb3.prototype.toChecksumAddress = utils.toChecksumAddress;                                                            // 99\nWeb3.prototype.isIBAN = utils.isIBAN;                                                                                  // 100\n                                                                                                                       // 101\n                                                                                                                       // 102\nWeb3.prototype.sha3 = function(string, options) {                                                                      // 103\n    return '0x' + sha3(string, options);                                                                               // 104\n};                                                                                                                     // 105\n                                                                                                                       // 106\n/**                                                                                                                    // 107\n * Transforms direct icap to address                                                                                   // 108\n */                                                                                                                    // 109\nWeb3.prototype.fromICAP = function (icap) {                                                                            // 110\n    var iban = new Iban(icap);                                                                                         // 111\n    return iban.address();                                                                                             // 112\n};                                                                                                                     // 113\n                                                                                                                       // 114\nvar properties = function () {                                                                                         // 115\n    return [                                                                                                           // 116\n        new Property({                                                                                                 // 117\n            name: 'version.node',                                                                                      // 118\n            getter: 'web3_clientVersion'                                                                               // 119\n        }),                                                                                                            // 120\n        new Property({                                                                                                 // 121\n            name: 'version.network',                                                                                   // 122\n            getter: 'net_version',                                                                                     // 123\n            inputFormatter: utils.toDecimal                                                                            // 124\n        }),                                                                                                            // 125\n        new Property({                                                                                                 // 126\n            name: 'version.ethereum',                                                                                  // 127\n            getter: 'eth_protocolVersion',                                                                             // 128\n            inputFormatter: utils.toDecimal                                                                            // 129\n        }),                                                                                                            // 130\n        new Property({                                                                                                 // 131\n            name: 'version.whisper',                                                                                   // 132\n            getter: 'shh_version',                                                                                     // 133\n            inputFormatter: utils.toDecimal                                                                            // 134\n        })                                                                                                             // 135\n    ];                                                                                                                 // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\nWeb3.prototype.isConnected = function(){                                                                               // 139\n    return (this.currentProvider && this.currentProvider.isConnected());                                               // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nWeb3.prototype.createBatch = function () {                                                                             // 143\n    return new Batch(this);                                                                                            // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nmodule.exports = Web3;                                                                                                 // 147\n                                                                                                                       // 148\n                                                                                                                       // 149\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"web3\":{\"requestmanager.js\":[\"./jsonrpc\",\"../utils/utils\",\"../utils/config\",\"./errors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/requestmanager.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file requestmanager.js                                                                                             // 18\n * @author Jeffrey Wilcke <jeff@ethdev.com>                                                                            // 19\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 20\n * @author Marian Oancea <marian@ethdev.com>                                                                           // 21\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 22\n * @author Gav Wood <g@ethdev.com>                                                                                     // 23\n * @date 2014                                                                                                          // 24\n */                                                                                                                    // 25\n                                                                                                                       // 26\nvar Jsonrpc = require('./jsonrpc');                                                                                    // 27\nvar utils = require('../utils/utils');                                                                                 // 28\nvar c = require('../utils/config');                                                                                    // 29\nvar errors = require('./errors');                                                                                      // 30\n                                                                                                                       // 31\n/**                                                                                                                    // 32\n * It's responsible for passing messages to providers                                                                  // 33\n * It's also responsible for polling the ethereum node for incoming messages                                           // 34\n * Default poll timeout is 1 second                                                                                    // 35\n * Singleton                                                                                                           // 36\n */                                                                                                                    // 37\nvar RequestManager = function (provider) {                                                                             // 38\n    this.provider = provider;                                                                                          // 39\n    this.polls = {};                                                                                                   // 40\n    this.timeout = null;                                                                                               // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Should be used to synchronously send request                                                                        // 45\n *                                                                                                                     // 46\n * @method send                                                                                                        // 47\n * @param {Object} data                                                                                                // 48\n * @return {Object}                                                                                                    // 49\n */                                                                                                                    // 50\nRequestManager.prototype.send = function (data) {                                                                      // 51\n    if (!this.provider) {                                                                                              // 52\n        console.error(errors.InvalidProvider());                                                                       // 53\n        return null;                                                                                                   // 54\n    }                                                                                                                  // 55\n                                                                                                                       // 56\n    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 57\n    var result = this.provider.send(payload);                                                                          // 58\n                                                                                                                       // 59\n    if (!Jsonrpc.isValidResponse(result)) {                                                                            // 60\n        throw errors.InvalidResponse(result);                                                                          // 61\n    }                                                                                                                  // 62\n                                                                                                                       // 63\n    return result.result;                                                                                              // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * Should be used to asynchronously send request                                                                       // 68\n *                                                                                                                     // 69\n * @method sendAsync                                                                                                   // 70\n * @param {Object} data                                                                                                // 71\n * @param {Function} callback                                                                                          // 72\n */                                                                                                                    // 73\nRequestManager.prototype.sendAsync = function (data, callback) {                                                       // 74\n    if (!this.provider) {                                                                                              // 75\n        return callback(errors.InvalidProvider());                                                                     // 76\n    }                                                                                                                  // 77\n                                                                                                                       // 78\n    var payload = Jsonrpc.toPayload(data.method, data.params);                                                         // 79\n    this.provider.sendAsync(payload, function (err, result) {                                                          // 80\n        if (err) {                                                                                                     // 81\n            return callback(err);                                                                                      // 82\n        }                                                                                                              // 83\n                                                                                                                       // 84\n        if (!Jsonrpc.isValidResponse(result)) {                                                                        // 85\n            return callback(errors.InvalidResponse(result));                                                           // 86\n        }                                                                                                              // 87\n                                                                                                                       // 88\n        callback(null, result.result);                                                                                 // 89\n    });                                                                                                                // 90\n};                                                                                                                     // 91\n                                                                                                                       // 92\n/**                                                                                                                    // 93\n * Should be called to asynchronously send batch request                                                               // 94\n *                                                                                                                     // 95\n * @method sendBatch                                                                                                   // 96\n * @param {Array} batch data                                                                                           // 97\n * @param {Function} callback                                                                                          // 98\n */                                                                                                                    // 99\nRequestManager.prototype.sendBatch = function (data, callback) {                                                       // 100\n    if (!this.provider) {                                                                                              // 101\n        return callback(errors.InvalidProvider());                                                                     // 102\n    }                                                                                                                  // 103\n                                                                                                                       // 104\n    var payload = Jsonrpc.toBatchPayload(data);                                                                        // 105\n                                                                                                                       // 106\n    this.provider.sendAsync(payload, function (err, results) {                                                         // 107\n        if (err) {                                                                                                     // 108\n            return callback(err);                                                                                      // 109\n        }                                                                                                              // 110\n                                                                                                                       // 111\n        if (!utils.isArray(results)) {                                                                                 // 112\n            return callback(errors.InvalidResponse(results));                                                          // 113\n        }                                                                                                              // 114\n                                                                                                                       // 115\n        callback(err, results);                                                                                        // 116\n    });                                                                                                                // 117\n};                                                                                                                     // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * Should be used to set provider of request manager                                                                   // 121\n *                                                                                                                     // 122\n * @method setProvider                                                                                                 // 123\n * @param {Object}                                                                                                     // 124\n */                                                                                                                    // 125\nRequestManager.prototype.setProvider = function (p) {                                                                  // 126\n    this.provider = p;                                                                                                 // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\n/**                                                                                                                    // 130\n * Should be used to start polling                                                                                     // 131\n *                                                                                                                     // 132\n * @method startPolling                                                                                                // 133\n * @param {Object} data                                                                                                // 134\n * @param {Number} pollId                                                                                              // 135\n * @param {Function} callback                                                                                          // 136\n * @param {Function} uninstall                                                                                         // 137\n *                                                                                                                     // 138\n * @todo cleanup number of params                                                                                      // 139\n */                                                                                                                    // 140\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {                                 // 141\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};                           // 142\n                                                                                                                       // 143\n                                                                                                                       // 144\n    // start polling                                                                                                   // 145\n    if (!this.timeout) {                                                                                               // 146\n        this.poll();                                                                                                   // 147\n    }                                                                                                                  // 148\n};                                                                                                                     // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Should be used to stop polling for filter with given id                                                             // 152\n *                                                                                                                     // 153\n * @method stopPolling                                                                                                 // 154\n * @param {Number} pollId                                                                                              // 155\n */                                                                                                                    // 156\nRequestManager.prototype.stopPolling = function (pollId) {                                                             // 157\n    delete this.polls[pollId];                                                                                         // 158\n                                                                                                                       // 159\n    // stop polling                                                                                                    // 160\n    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 161\n        clearTimeout(this.timeout);                                                                                    // 162\n        this.timeout = null;                                                                                           // 163\n    }                                                                                                                  // 164\n};                                                                                                                     // 165\n                                                                                                                       // 166\n/**                                                                                                                    // 167\n * Should be called to reset the polling mechanism of the request manager                                              // 168\n *                                                                                                                     // 169\n * @method reset                                                                                                       // 170\n */                                                                                                                    // 171\nRequestManager.prototype.reset = function (keepIsSyncing) {                                                            // 172\n    /*jshint maxcomplexity:5 */                                                                                        // 173\n                                                                                                                       // 174\n    for (var key in this.polls) {                                                                                      // 175\n        // remove all polls, except sync polls,                                                                        // 176\n        // they need to be removed manually by calling syncing.stopWatching()                                          // 177\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {                                                        // 178\n            this.polls[key].uninstall();                                                                               // 179\n            delete this.polls[key];                                                                                    // 180\n        }                                                                                                              // 181\n    }                                                                                                                  // 182\n                                                                                                                       // 183\n    // stop polling                                                                                                    // 184\n    if(Object.keys(this.polls).length === 0 && this.timeout) {                                                         // 185\n        clearTimeout(this.timeout);                                                                                    // 186\n        this.timeout = null;                                                                                           // 187\n    }                                                                                                                  // 188\n};                                                                                                                     // 189\n                                                                                                                       // 190\n/**                                                                                                                    // 191\n * Should be called to poll for changes on filter with given id                                                        // 192\n *                                                                                                                     // 193\n * @method poll                                                                                                        // 194\n */                                                                                                                    // 195\nRequestManager.prototype.poll = function () {                                                                          // 196\n    /*jshint maxcomplexity: 6 */                                                                                       // 197\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);                                            // 198\n                                                                                                                       // 199\n    if (Object.keys(this.polls).length === 0) {                                                                        // 200\n        return;                                                                                                        // 201\n    }                                                                                                                  // 202\n                                                                                                                       // 203\n    if (!this.provider) {                                                                                              // 204\n        console.error(errors.InvalidProvider());                                                                       // 205\n        return;                                                                                                        // 206\n    }                                                                                                                  // 207\n                                                                                                                       // 208\n    var pollsData = [];                                                                                                // 209\n    var pollsIds = [];                                                                                                 // 210\n    for (var key in this.polls) {                                                                                      // 211\n        pollsData.push(this.polls[key].data);                                                                          // 212\n        pollsIds.push(key);                                                                                            // 213\n    }                                                                                                                  // 214\n                                                                                                                       // 215\n    if (pollsData.length === 0) {                                                                                      // 216\n        return;                                                                                                        // 217\n    }                                                                                                                  // 218\n                                                                                                                       // 219\n    var payload = Jsonrpc.toBatchPayload(pollsData);                                                                   // 220\n                                                                                                                       // 221\n    // map the request id to they poll id                                                                              // 222\n    var pollsIdMap = {};                                                                                               // 223\n    payload.forEach(function(load, index){                                                                             // 224\n        pollsIdMap[load.id] = pollsIds[index];                                                                         // 225\n    });                                                                                                                // 226\n                                                                                                                       // 227\n                                                                                                                       // 228\n    var self = this;                                                                                                   // 229\n    this.provider.sendAsync(payload, function (error, results) {                                                       // 230\n                                                                                                                       // 231\n                                                                                                                       // 232\n        // TODO: console log?                                                                                          // 233\n        if (error) {                                                                                                   // 234\n            return;                                                                                                    // 235\n        }                                                                                                              // 236\n                                                                                                                       // 237\n        if (!utils.isArray(results)) {                                                                                 // 238\n            throw errors.InvalidResponse(results);                                                                     // 239\n        }                                                                                                              // 240\n        results.map(function (result) {                                                                                // 241\n            var id = pollsIdMap[result.id];                                                                            // 242\n                                                                                                                       // 243\n            // make sure the filter is still installed after arrival of the request                                    // 244\n            if (self.polls[id]) {                                                                                      // 245\n                result.callback = self.polls[id].callback;                                                             // 246\n                return result;                                                                                         // 247\n            } else                                                                                                     // 248\n                return false;                                                                                          // 249\n        }).filter(function (result) {                                                                                  // 250\n            return !!result;                                                                                           // 251\n        }).filter(function (result) {                                                                                  // 252\n            var valid = Jsonrpc.isValidResponse(result);                                                               // 253\n            if (!valid) {                                                                                              // 254\n                result.callback(errors.InvalidResponse(result));                                                       // 255\n            }                                                                                                          // 256\n            return valid;                                                                                              // 257\n        }).forEach(function (result) {                                                                                 // 258\n            result.callback(null, result.result);                                                                      // 259\n        });                                                                                                            // 260\n    });                                                                                                                // 261\n};                                                                                                                     // 262\n                                                                                                                       // 263\nmodule.exports = RequestManager;                                                                                       // 264\n                                                                                                                       // 265\n                                                                                                                       // 266\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"jsonrpc.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/jsonrpc.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file jsonrpc.js                                                                                                   // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n *   Aaron Kumavis <aaron@kumavis.me>                                                                                  // 20\n * @date 2015                                                                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n// Initialize Jsonrpc as a simple object with utility functions.                                                       // 24\nvar Jsonrpc = {                                                                                                        // 25\n    messageId: 0                                                                                                       // 26\n};                                                                                                                     // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Should be called to valid json create payload object                                                                // 30\n *                                                                                                                     // 31\n * @method toPayload                                                                                                   // 32\n * @param {Function} method of jsonrpc call, required                                                                  // 33\n * @param {Array} params, an array of method params, optional                                                          // 34\n * @returns {Object} valid jsonrpc payload object                                                                      // 35\n */                                                                                                                    // 36\nJsonrpc.toPayload = function (method, params) {                                                                        // 37\n    if (!method)                                                                                                       // 38\n        console.error('jsonrpc method should be specified!');                                                          // 39\n                                                                                                                       // 40\n    // advance message ID                                                                                              // 41\n    Jsonrpc.messageId++;                                                                                               // 42\n                                                                                                                       // 43\n    return {                                                                                                           // 44\n        jsonrpc: '2.0',                                                                                                // 45\n        id: Jsonrpc.messageId,                                                                                         // 46\n        method: method,                                                                                                // 47\n        params: params || []                                                                                           // 48\n    };                                                                                                                 // 49\n};                                                                                                                     // 50\n                                                                                                                       // 51\n/**                                                                                                                    // 52\n * Should be called to check if jsonrpc response is valid                                                              // 53\n *                                                                                                                     // 54\n * @method isValidResponse                                                                                             // 55\n * @param {Object}                                                                                                     // 56\n * @returns {Boolean} true if response is valid, otherwise false                                                       // 57\n */                                                                                                                    // 58\nJsonrpc.isValidResponse = function (response) {                                                                        // 59\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);          // 60\n                                                                                                                       // 61\n    function validateSingleMessage(message){                                                                           // 62\n      return !!message &&                                                                                              // 63\n        !message.error &&                                                                                              // 64\n        message.jsonrpc === '2.0' &&                                                                                   // 65\n        typeof message.id === 'number' &&                                                                              // 66\n        message.result !== undefined; // only undefined is not valid json object                                       // 67\n    }                                                                                                                  // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Should be called to create batch payload object                                                                     // 72\n *                                                                                                                     // 73\n * @method toBatchPayload                                                                                              // 74\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields                    // 75\n * @returns {Array} batch payload                                                                                      // 76\n */                                                                                                                    // 77\nJsonrpc.toBatchPayload = function (messages) {                                                                         // 78\n    return messages.map(function (message) {                                                                           // 79\n        return Jsonrpc.toPayload(message.method, message.params);                                                      // 80\n    });                                                                                                                // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\nmodule.exports = Jsonrpc;                                                                                              // 84\n                                                                                                                       // 85\n                                                                                                                       // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"errors.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/errors.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file errors.js                                                                                                     // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nmodule.exports = {                                                                                                     // 23\n    InvalidNumberOfParams: function () {                                                                               // 24\n        return new Error('Invalid number of input parameters');                                                        // 25\n    },                                                                                                                 // 26\n    InvalidConnection: function (host){                                                                                // 27\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');                                   // 28\n    },                                                                                                                 // 29\n    InvalidProvider: function () {                                                                                     // 30\n        return new Error('Provider not set or invalid');                                                               // 31\n    },                                                                                                                 // 32\n    InvalidResponse: function (result){                                                                                // 33\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);                                                                                     // 35\n    }                                                                                                                  // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"iban.js\":[\"bignumber.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/iban.js                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file iban.js                                                                                                       // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar BigNumber = require('bignumber.js');                                                                               // 23\n                                                                                                                       // 24\nvar padLeft = function (string, bytes) {                                                                               // 25\n    var result = string;                                                                                               // 26\n    while (result.length < bytes * 2) {                                                                                // 27\n        result = '0' + result;                                                                                         // 28\n    }                                                                                                                  // 29\n    return result;                                                                                                     // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to       // 34\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.                                                    // 35\n *                                                                                                                     // 36\n * @method iso13616Prepare                                                                                             // 37\n * @param {String} iban the IBAN                                                                                       // 38\n * @returns {String} the prepared IBAN                                                                                 // 39\n */                                                                                                                    // 40\nvar iso13616Prepare = function (iban) {                                                                                // 41\n    var A = 'A'.charCodeAt(0);                                                                                         // 42\n    var Z = 'Z'.charCodeAt(0);                                                                                         // 43\n                                                                                                                       // 44\n    iban = iban.toUpperCase();                                                                                         // 45\n    iban = iban.substr(4) + iban.substr(0,4);                                                                          // 46\n                                                                                                                       // 47\n    return iban.split('').map(function(n){                                                                             // 48\n        var code = n.charCodeAt(0);                                                                                    // 49\n        if (code >= A && code <= Z){                                                                                   // 50\n            // A = 10, B = 11, ... Z = 35                                                                              // 51\n            return code - A + 10;                                                                                      // 52\n        } else {                                                                                                       // 53\n            return n;                                                                                                  // 54\n        }                                                                                                              // 55\n    }).join('');                                                                                                       // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.                                                // 60\n *                                                                                                                     // 61\n * @method mod9710                                                                                                     // 62\n * @param {String} iban                                                                                                // 63\n * @returns {Number}                                                                                                   // 64\n */                                                                                                                    // 65\nvar mod9710 = function (iban) {                                                                                        // 66\n    var remainder = iban,                                                                                              // 67\n        block;                                                                                                         // 68\n                                                                                                                       // 69\n    while (remainder.length > 2){                                                                                      // 70\n        block = remainder.slice(0, 9);                                                                                 // 71\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);                                          // 72\n    }                                                                                                                  // 73\n                                                                                                                       // 74\n    return parseInt(remainder, 10) % 97;                                                                               // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * This prototype should be used to create iban object from iban correct string                                        // 79\n *                                                                                                                     // 80\n * @param {String} iban                                                                                                // 81\n */                                                                                                                    // 82\nvar Iban = function (iban) {                                                                                           // 83\n    this._iban = iban;                                                                                                 // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\n/**                                                                                                                    // 87\n * This method should be used to create iban object from ethereum address                                              // 88\n *                                                                                                                     // 89\n * @method fromAddress                                                                                                 // 90\n * @param {String} address                                                                                             // 91\n * @return {Iban} the IBAN object                                                                                      // 92\n */                                                                                                                    // 93\nIban.fromAddress = function (address) {                                                                                // 94\n    var asBn = new BigNumber(address, 16);                                                                             // 95\n    var base36 = asBn.toString(36);                                                                                    // 96\n    var padded = padLeft(base36, 15);                                                                                  // 97\n    return Iban.fromBban(padded.toUpperCase());                                                                        // 98\n};                                                                                                                     // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * Convert the passed BBAN to an IBAN for this country specification.                                                  // 102\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *                                                                                                                     // 105\n * @method fromBban                                                                                                    // 106\n * @param {String} bban the BBAN to convert to IBAN                                                                    // 107\n * @returns {Iban} the IBAN object                                                                                     // 108\n */                                                                                                                    // 109\nIban.fromBban = function (bban) {                                                                                      // 110\n    var countryCode = 'XE';                                                                                            // 111\n                                                                                                                       // 112\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));                                               // 113\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);                                                               // 114\n                                                                                                                       // 115\n    return new Iban(countryCode + checkDigit + bban);                                                                  // 116\n};                                                                                                                     // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * Should be used to create IBAN object for given institution and identifier                                           // 120\n *                                                                                                                     // 121\n * @method createIndirect                                                                                              // 122\n * @param {Object} options, required options are \"institution\" and \"identifier\"                                        // 123\n * @return {Iban} the IBAN object                                                                                      // 124\n */                                                                                                                    // 125\nIban.createIndirect = function (options) {                                                                             // 126\n    return Iban.fromBban('ETH' + options.institution + options.identifier);                                            // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\n/**                                                                                                                    // 130\n * Thos method should be used to check if given string is valid iban object                                            // 131\n *                                                                                                                     // 132\n * @method isValid                                                                                                     // 133\n * @param {String} iban string                                                                                         // 134\n * @return {Boolean} true if it is valid IBAN                                                                          // 135\n */                                                                                                                    // 136\nIban.isValid = function (iban) {                                                                                       // 137\n    var i = new Iban(iban);                                                                                            // 138\n    return i.isValid();                                                                                                // 139\n};                                                                                                                     // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\n * Should be called to check if iban is correct                                                                        // 143\n *                                                                                                                     // 144\n * @method isValid                                                                                                     // 145\n * @returns {Boolean} true if it is, otherwise false                                                                   // 146\n */                                                                                                                    // 147\nIban.prototype.isValid = function () {                                                                                 // 148\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&                                         // 149\n        mod9710(iso13616Prepare(this._iban)) === 1;                                                                    // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Should be called to check if iban number is direct                                                                  // 154\n *                                                                                                                     // 155\n * @method isDirect                                                                                                    // 156\n * @returns {Boolean} true if it is, otherwise false                                                                   // 157\n */                                                                                                                    // 158\nIban.prototype.isDirect = function () {                                                                                // 159\n    return this._iban.length === 34 || this._iban.length === 35;                                                       // 160\n};                                                                                                                     // 161\n                                                                                                                       // 162\n/**                                                                                                                    // 163\n * Should be called to check if iban number if indirect                                                                // 164\n *                                                                                                                     // 165\n * @method isIndirect                                                                                                  // 166\n * @returns {Boolean} true if it is, otherwise false                                                                   // 167\n */                                                                                                                    // 168\nIban.prototype.isIndirect = function () {                                                                              // 169\n    return this._iban.length === 20;                                                                                   // 170\n};                                                                                                                     // 171\n                                                                                                                       // 172\n/**                                                                                                                    // 173\n * Should be called to get iban checksum                                                                               // 174\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)                                                        // 175\n *                                                                                                                     // 176\n * @method checksum                                                                                                    // 177\n * @returns {String} checksum                                                                                          // 178\n */                                                                                                                    // 179\nIban.prototype.checksum = function () {                                                                                // 180\n    return this._iban.substr(2, 2);                                                                                    // 181\n};                                                                                                                     // 182\n                                                                                                                       // 183\n/**                                                                                                                    // 184\n * Should be called to get institution identifier                                                                      // 185\n * eg. XREG                                                                                                            // 186\n *                                                                                                                     // 187\n * @method institution                                                                                                 // 188\n * @returns {String} institution identifier                                                                            // 189\n */                                                                                                                    // 190\nIban.prototype.institution = function () {                                                                             // 191\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';                                                           // 192\n};                                                                                                                     // 193\n                                                                                                                       // 194\n/**                                                                                                                    // 195\n * Should be called to get client identifier within institution                                                        // 196\n * eg. GAVOFYORK                                                                                                       // 197\n *                                                                                                                     // 198\n * @method client                                                                                                      // 199\n * @returns {String} client identifier                                                                                 // 200\n */                                                                                                                    // 201\nIban.prototype.client = function () {                                                                                  // 202\n    return this.isIndirect() ? this._iban.substr(11) : '';                                                             // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\n/**                                                                                                                    // 206\n * Should be called to get client direct address                                                                       // 207\n *                                                                                                                     // 208\n * @method address                                                                                                     // 209\n * @returns {String} client direct address                                                                             // 210\n */                                                                                                                    // 211\nIban.prototype.address = function () {                                                                                 // 212\n    if (this.isDirect()) {                                                                                             // 213\n        var base36 = this._iban.substr(4);                                                                             // 214\n        var asBn = new BigNumber(base36, 36);                                                                          // 215\n        return padLeft(asBn.toString(16), 20);                                                                         // 216\n    }                                                                                                                  // 217\n                                                                                                                       // 218\n    return '';                                                                                                         // 219\n};                                                                                                                     // 220\n                                                                                                                       // 221\nIban.prototype.toString = function () {                                                                                // 222\n    return this._iban;                                                                                                 // 223\n};                                                                                                                     // 224\n                                                                                                                       // 225\nmodule.exports = Iban;                                                                                                 // 226\n                                                                                                                       // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"methods\":{\"eth.js\":[\"../formatters\",\"../../utils/utils\",\"../method\",\"../property\",\"../../utils/config\",\"../contract\",\"./watches\",\"../filter\",\"../syncing\",\"../namereg\",\"../iban\",\"../transfer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/eth.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file eth.js                                                                                                        // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 20\n * @date 2015                                                                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n\"use strict\";                                                                                                          // 24\n                                                                                                                       // 25\nvar formatters = require('../formatters');                                                                             // 26\nvar utils = require('../../utils/utils');                                                                              // 27\nvar Method = require('../method');                                                                                     // 28\nvar Property = require('../property');                                                                                 // 29\nvar c = require('../../utils/config');                                                                                 // 30\nvar Contract = require('../contract');                                                                                 // 31\nvar watches = require('./watches');                                                                                    // 32\nvar Filter = require('../filter');                                                                                     // 33\nvar IsSyncing = require('../syncing');                                                                                 // 34\nvar namereg = require('../namereg');                                                                                   // 35\nvar Iban = require('../iban');                                                                                         // 36\nvar transfer = require('../transfer');                                                                                 // 37\n                                                                                                                       // 38\nvar blockCall = function (args) {                                                                                      // 39\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";   // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nvar transactionFromBlockCall = function (args) {                                                                       // 43\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};                                                                                                                     // 45\n                                                                                                                       // 46\nvar uncleCall = function (args) {                                                                                      // 47\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};                                                                                                                     // 49\n                                                                                                                       // 50\nvar getBlockTransactionCountCall = function (args) {                                                                   // 51\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};                                                                                                                     // 53\n                                                                                                                       // 54\nvar uncleCountCall = function (args) {                                                                                 // 55\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};                                                                                                                     // 57\n                                                                                                                       // 58\nfunction Eth(web3) {                                                                                                   // 59\n    this._requestManager = web3._requestManager;                                                                       // 60\n                                                                                                                       // 61\n    var self = this;                                                                                                   // 62\n                                                                                                                       // 63\n    methods().forEach(function(method) {                                                                               // 64\n        method.attachToObject(self);                                                                                   // 65\n        method.setRequestManager(self._requestManager);                                                                // 66\n    });                                                                                                                // 67\n                                                                                                                       // 68\n    properties().forEach(function(p) {                                                                                 // 69\n        p.attachToObject(self);                                                                                        // 70\n        p.setRequestManager(self._requestManager);                                                                     // 71\n    });                                                                                                                // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n    this.iban = Iban;                                                                                                  // 75\n    this.sendIBANTransaction = transfer.bind(null, this);                                                              // 76\n}                                                                                                                      // 77\n                                                                                                                       // 78\nObject.defineProperty(Eth.prototype, 'defaultBlock', {                                                                 // 79\n    get: function () {                                                                                                 // 80\n        return c.defaultBlock;                                                                                         // 81\n    },                                                                                                                 // 82\n    set: function (val) {                                                                                              // 83\n        c.defaultBlock = val;                                                                                          // 84\n        return val;                                                                                                    // 85\n    }                                                                                                                  // 86\n});                                                                                                                    // 87\n                                                                                                                       // 88\nObject.defineProperty(Eth.prototype, 'defaultAccount', {                                                               // 89\n    get: function () {                                                                                                 // 90\n        return c.defaultAccount;                                                                                       // 91\n    },                                                                                                                 // 92\n    set: function (val) {                                                                                              // 93\n        c.defaultAccount = val;                                                                                        // 94\n        return val;                                                                                                    // 95\n    }                                                                                                                  // 96\n});                                                                                                                    // 97\n                                                                                                                       // 98\nvar methods = function () {                                                                                            // 99\n    var getBalance = new Method({                                                                                      // 100\n        name: 'getBalance',                                                                                            // 101\n        call: 'eth_getBalance',                                                                                        // 102\n        params: 2,                                                                                                     // 103\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],               // 104\n        outputFormatter: formatters.outputBigNumberFormatter                                                           // 105\n    });                                                                                                                // 106\n                                                                                                                       // 107\n    var getStorageAt = new Method({                                                                                    // 108\n        name: 'getStorageAt',                                                                                          // 109\n        call: 'eth_getStorageAt',                                                                                      // 110\n        params: 3,                                                                                                     // 111\n        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]                               // 112\n    });                                                                                                                // 113\n                                                                                                                       // 114\n    var getCode = new Method({                                                                                         // 115\n        name: 'getCode',                                                                                               // 116\n        call: 'eth_getCode',                                                                                           // 117\n        params: 2,                                                                                                     // 118\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]                // 119\n    });                                                                                                                // 120\n                                                                                                                       // 121\n    var getBlock = new Method({                                                                                        // 122\n        name: 'getBlock',                                                                                              // 123\n        call: blockCall,                                                                                               // 124\n        params: 2,                                                                                                     // 125\n        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],                      // 126\n        outputFormatter: formatters.outputBlockFormatter                                                               // 127\n    });                                                                                                                // 128\n                                                                                                                       // 129\n    var getUncle = new Method({                                                                                        // 130\n        name: 'getUncle',                                                                                              // 131\n        call: uncleCall,                                                                                               // 132\n        params: 2,                                                                                                     // 133\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 134\n        outputFormatter: formatters.outputBlockFormatter,                                                              // 135\n                                                                                                                       // 136\n    });                                                                                                                // 137\n                                                                                                                       // 138\n    var getCompilers = new Method({                                                                                    // 139\n        name: 'getCompilers',                                                                                          // 140\n        call: 'eth_getCompilers',                                                                                      // 141\n        params: 0                                                                                                      // 142\n    });                                                                                                                // 143\n                                                                                                                       // 144\n    var getBlockTransactionCount = new Method({                                                                        // 145\n        name: 'getBlockTransactionCount',                                                                              // 146\n        call: getBlockTransactionCountCall,                                                                            // 147\n        params: 1,                                                                                                     // 148\n        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 149\n        outputFormatter: utils.toDecimal                                                                               // 150\n    });                                                                                                                // 151\n                                                                                                                       // 152\n    var getBlockUncleCount = new Method({                                                                              // 153\n        name: 'getBlockUncleCount',                                                                                    // 154\n        call: uncleCountCall,                                                                                          // 155\n        params: 1,                                                                                                     // 156\n        inputFormatter: [formatters.inputBlockNumberFormatter],                                                        // 157\n        outputFormatter: utils.toDecimal                                                                               // 158\n    });                                                                                                                // 159\n                                                                                                                       // 160\n    var getTransaction = new Method({                                                                                  // 161\n        name: 'getTransaction',                                                                                        // 162\n        call: 'eth_getTransactionByHash',                                                                              // 163\n        params: 1,                                                                                                     // 164\n        outputFormatter: formatters.outputTransactionFormatter                                                         // 165\n    });                                                                                                                // 166\n                                                                                                                       // 167\n    var getTransactionFromBlock = new Method({                                                                         // 168\n        name: 'getTransactionFromBlock',                                                                               // 169\n        call: transactionFromBlockCall,                                                                                // 170\n        params: 2,                                                                                                     // 171\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],                                           // 172\n        outputFormatter: formatters.outputTransactionFormatter                                                         // 173\n    });                                                                                                                // 174\n                                                                                                                       // 175\n    var getTransactionReceipt = new Method({                                                                           // 176\n        name: 'getTransactionReceipt',                                                                                 // 177\n        call: 'eth_getTransactionReceipt',                                                                             // 178\n        params: 1,                                                                                                     // 179\n        outputFormatter: formatters.outputTransactionReceiptFormatter                                                  // 180\n    });                                                                                                                // 181\n                                                                                                                       // 182\n    var getTransactionCount = new Method({                                                                             // 183\n        name: 'getTransactionCount',                                                                                   // 184\n        call: 'eth_getTransactionCount',                                                                               // 185\n        params: 2,                                                                                                     // 186\n        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],                                           // 187\n        outputFormatter: utils.toDecimal                                                                               // 188\n    });                                                                                                                // 189\n                                                                                                                       // 190\n    var sendRawTransaction = new Method({                                                                              // 191\n        name: 'sendRawTransaction',                                                                                    // 192\n        call: 'eth_sendRawTransaction',                                                                                // 193\n        params: 1,                                                                                                     // 194\n        inputFormatter: [null]                                                                                         // 195\n    });                                                                                                                // 196\n                                                                                                                       // 197\n    var sendTransaction = new Method({                                                                                 // 198\n        name: 'sendTransaction',                                                                                       // 199\n        call: 'eth_sendTransaction',                                                                                   // 200\n        params: 1,                                                                                                     // 201\n        inputFormatter: [formatters.inputTransactionFormatter]                                                         // 202\n    });                                                                                                                // 203\n                                                                                                                       // 204\n    var sign = new Method({                                                                                            // 205\n        name: 'sign',                                                                                                  // 206\n        call: 'eth_sign',                                                                                              // 207\n        params: 2,                                                                                                     // 208\n        inputFormatter: [formatters.inputAddressFormatter, null]                                                       // 209\n    });                                                                                                                // 210\n                                                                                                                       // 211\n    var call = new Method({                                                                                            // 212\n        name: 'call',                                                                                                  // 213\n        call: 'eth_call',                                                                                              // 214\n        params: 2,                                                                                                     // 215\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]                   // 216\n    });                                                                                                                // 217\n                                                                                                                       // 218\n    var estimateGas = new Method({                                                                                     // 219\n        name: 'estimateGas',                                                                                           // 220\n        call: 'eth_estimateGas',                                                                                       // 221\n        params: 1,                                                                                                     // 222\n        inputFormatter: [formatters.inputCallFormatter],                                                               // 223\n        outputFormatter: utils.toDecimal                                                                               // 224\n    });                                                                                                                // 225\n                                                                                                                       // 226\n    var compileSolidity = new Method({                                                                                 // 227\n        name: 'compile.solidity',                                                                                      // 228\n        call: 'eth_compileSolidity',                                                                                   // 229\n        params: 1                                                                                                      // 230\n    });                                                                                                                // 231\n                                                                                                                       // 232\n    var compileLLL = new Method({                                                                                      // 233\n        name: 'compile.lll',                                                                                           // 234\n        call: 'eth_compileLLL',                                                                                        // 235\n        params: 1                                                                                                      // 236\n    });                                                                                                                // 237\n                                                                                                                       // 238\n    var compileSerpent = new Method({                                                                                  // 239\n        name: 'compile.serpent',                                                                                       // 240\n        call: 'eth_compileSerpent',                                                                                    // 241\n        params: 1                                                                                                      // 242\n    });                                                                                                                // 243\n                                                                                                                       // 244\n    var submitWork = new Method({                                                                                      // 245\n        name: 'submitWork',                                                                                            // 246\n        call: 'eth_submitWork',                                                                                        // 247\n        params: 3                                                                                                      // 248\n    });                                                                                                                // 249\n                                                                                                                       // 250\n    var getWork = new Method({                                                                                         // 251\n        name: 'getWork',                                                                                               // 252\n        call: 'eth_getWork',                                                                                           // 253\n        params: 0                                                                                                      // 254\n    });                                                                                                                // 255\n                                                                                                                       // 256\n    return [                                                                                                           // 257\n        getBalance,                                                                                                    // 258\n        getStorageAt,                                                                                                  // 259\n        getCode,                                                                                                       // 260\n        getBlock,                                                                                                      // 261\n        getUncle,                                                                                                      // 262\n        getCompilers,                                                                                                  // 263\n        getBlockTransactionCount,                                                                                      // 264\n        getBlockUncleCount,                                                                                            // 265\n        getTransaction,                                                                                                // 266\n        getTransactionFromBlock,                                                                                       // 267\n        getTransactionReceipt,                                                                                         // 268\n        getTransactionCount,                                                                                           // 269\n        call,                                                                                                          // 270\n        estimateGas,                                                                                                   // 271\n        sendRawTransaction,                                                                                            // 272\n        sendTransaction,                                                                                               // 273\n        sign,                                                                                                          // 274\n        compileSolidity,                                                                                               // 275\n        compileLLL,                                                                                                    // 276\n        compileSerpent,                                                                                                // 277\n        submitWork,                                                                                                    // 278\n        getWork                                                                                                        // 279\n    ];                                                                                                                 // 280\n};                                                                                                                     // 281\n                                                                                                                       // 282\n                                                                                                                       // 283\nvar properties = function () {                                                                                         // 284\n    return [                                                                                                           // 285\n        new Property({                                                                                                 // 286\n            name: 'coinbase',                                                                                          // 287\n            getter: 'eth_coinbase'                                                                                     // 288\n        }),                                                                                                            // 289\n        new Property({                                                                                                 // 290\n            name: 'mining',                                                                                            // 291\n            getter: 'eth_mining'                                                                                       // 292\n        }),                                                                                                            // 293\n        new Property({                                                                                                 // 294\n            name: 'hashrate',                                                                                          // 295\n            getter: 'eth_hashrate',                                                                                    // 296\n            outputFormatter: utils.toDecimal                                                                           // 297\n        }),                                                                                                            // 298\n        new Property({                                                                                                 // 299\n            name: 'syncing',                                                                                           // 300\n            getter: 'eth_syncing',                                                                                     // 301\n            outputFormatter: formatters.outputSyncingFormatter                                                         // 302\n        }),                                                                                                            // 303\n        new Property({                                                                                                 // 304\n            name: 'gasPrice',                                                                                          // 305\n            getter: 'eth_gasPrice',                                                                                    // 306\n            outputFormatter: formatters.outputBigNumberFormatter                                                       // 307\n        }),                                                                                                            // 308\n        new Property({                                                                                                 // 309\n            name: 'accounts',                                                                                          // 310\n            getter: 'eth_accounts'                                                                                     // 311\n        }),                                                                                                            // 312\n        new Property({                                                                                                 // 313\n            name: 'blockNumber',                                                                                       // 314\n            getter: 'eth_blockNumber',                                                                                 // 315\n            outputFormatter: utils.toDecimal                                                                           // 316\n        }),                                                                                                            // 317\n        new Property({                                                                                                 // 318\n            name: 'protocolVersion',                                                                                   // 319\n            getter: 'eth_protocolVersion'                                                                              // 320\n        })                                                                                                             // 321\n    ];                                                                                                                 // 322\n};                                                                                                                     // 323\n                                                                                                                       // 324\nEth.prototype.contract = function (abi) {                                                                              // 325\n    var factory = new Contract(this, abi);                                                                             // 326\n    return factory;                                                                                                    // 327\n};                                                                                                                     // 328\n                                                                                                                       // 329\nEth.prototype.filter = function (fil, callback) {                                                                      // 330\n    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);              // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\nEth.prototype.namereg = function () {                                                                                  // 334\n    return this.contract(namereg.global.abi).at(namereg.global.address);                                               // 335\n};                                                                                                                     // 336\n                                                                                                                       // 337\nEth.prototype.icapNamereg = function () {                                                                              // 338\n    return this.contract(namereg.icap.abi).at(namereg.icap.address);                                                   // 339\n};                                                                                                                     // 340\n                                                                                                                       // 341\nEth.prototype.isSyncing = function (callback) {                                                                        // 342\n    return new IsSyncing(this._requestManager, callback);                                                              // 343\n};                                                                                                                     // 344\n                                                                                                                       // 345\nmodule.exports = Eth;                                                                                                  // 346\n                                                                                                                       // 347\n                                                                                                                       // 348\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"watches.js\":[\"../method\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/watches.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file watches.js                                                                                                   // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Method = require('../method');                                                                                     // 23\n                                                                                                                       // 24\n/// @returns an array of objects describing web3.eth.filter api methods                                                // 25\nvar eth = function () {                                                                                                // 26\n    var newFilterCall = function (args) {                                                                              // 27\n        var type = args[0];                                                                                            // 28\n                                                                                                                       // 29\n        switch(type) {                                                                                                 // 30\n            case 'latest':                                                                                             // 31\n                args.shift();                                                                                          // 32\n                this.params = 0;                                                                                       // 33\n                return 'eth_newBlockFilter';                                                                           // 34\n            case 'pending':                                                                                            // 35\n                args.shift();                                                                                          // 36\n                this.params = 0;                                                                                       // 37\n                return 'eth_newPendingTransactionFilter';                                                              // 38\n            default:                                                                                                   // 39\n                return 'eth_newFilter';                                                                                // 40\n        }                                                                                                              // 41\n    };                                                                                                                 // 42\n                                                                                                                       // 43\n    var newFilter = new Method({                                                                                       // 44\n        name: 'newFilter',                                                                                             // 45\n        call: newFilterCall,                                                                                           // 46\n        params: 1                                                                                                      // 47\n    });                                                                                                                // 48\n                                                                                                                       // 49\n    var uninstallFilter = new Method({                                                                                 // 50\n        name: 'uninstallFilter',                                                                                       // 51\n        call: 'eth_uninstallFilter',                                                                                   // 52\n        params: 1                                                                                                      // 53\n    });                                                                                                                // 54\n                                                                                                                       // 55\n    var getLogs = new Method({                                                                                         // 56\n        name: 'getLogs',                                                                                               // 57\n        call: 'eth_getFilterLogs',                                                                                     // 58\n        params: 1                                                                                                      // 59\n    });                                                                                                                // 60\n                                                                                                                       // 61\n    var poll = new Method({                                                                                            // 62\n        name: 'poll',                                                                                                  // 63\n        call: 'eth_getFilterChanges',                                                                                  // 64\n        params: 1                                                                                                      // 65\n    });                                                                                                                // 66\n                                                                                                                       // 67\n    return [                                                                                                           // 68\n        newFilter,                                                                                                     // 69\n        uninstallFilter,                                                                                               // 70\n        getLogs,                                                                                                       // 71\n        poll                                                                                                           // 72\n    ];                                                                                                                 // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/// @returns an array of objects describing web3.shh.watch api methods                                                 // 76\nvar shh = function () {                                                                                                // 77\n    var newFilter = new Method({                                                                                       // 78\n        name: 'newFilter',                                                                                             // 79\n        call: 'shh_newFilter',                                                                                         // 80\n        params: 1                                                                                                      // 81\n    });                                                                                                                // 82\n                                                                                                                       // 83\n    var uninstallFilter = new Method({                                                                                 // 84\n        name: 'uninstallFilter',                                                                                       // 85\n        call: 'shh_uninstallFilter',                                                                                   // 86\n        params: 1                                                                                                      // 87\n    });                                                                                                                // 88\n                                                                                                                       // 89\n    var getLogs = new Method({                                                                                         // 90\n        name: 'getLogs',                                                                                               // 91\n        call: 'shh_getMessages',                                                                                       // 92\n        params: 1                                                                                                      // 93\n    });                                                                                                                // 94\n                                                                                                                       // 95\n    var poll = new Method({                                                                                            // 96\n        name: 'poll',                                                                                                  // 97\n        call: 'shh_getFilterChanges',                                                                                  // 98\n        params: 1                                                                                                      // 99\n    });                                                                                                                // 100\n                                                                                                                       // 101\n    return [                                                                                                           // 102\n        newFilter,                                                                                                     // 103\n        uninstallFilter,                                                                                               // 104\n        getLogs,                                                                                                       // 105\n        poll                                                                                                           // 106\n    ];                                                                                                                 // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\nmodule.exports = {                                                                                                     // 110\n    eth: eth,                                                                                                          // 111\n    shh: shh                                                                                                           // 112\n};                                                                                                                     // 113\n                                                                                                                       // 114\n                                                                                                                       // 115\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"db.js\":[\"../method\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/db.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file db.js                                                                                                        // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Method = require('../method');                                                                                     // 23\n                                                                                                                       // 24\nvar DB = function (web3) {                                                                                             // 25\n    this._requestManager = web3._requestManager;                                                                       // 26\n                                                                                                                       // 27\n    var self = this;                                                                                                   // 28\n                                                                                                                       // 29\n    methods().forEach(function(method) {                                                                               // 30\n        method.attachToObject(self);                                                                                   // 31\n        method.setRequestManager(web3._requestManager);                                                                // 32\n    });                                                                                                                // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nvar methods = function () {                                                                                            // 36\n    var putString = new Method({                                                                                       // 37\n        name: 'putString',                                                                                             // 38\n        call: 'db_putString',                                                                                          // 39\n        params: 3                                                                                                      // 40\n    });                                                                                                                // 41\n                                                                                                                       // 42\n    var getString = new Method({                                                                                       // 43\n        name: 'getString',                                                                                             // 44\n        call: 'db_getString',                                                                                          // 45\n        params: 2                                                                                                      // 46\n    });                                                                                                                // 47\n                                                                                                                       // 48\n    var putHex = new Method({                                                                                          // 49\n        name: 'putHex',                                                                                                // 50\n        call: 'db_putHex',                                                                                             // 51\n        params: 3                                                                                                      // 52\n    });                                                                                                                // 53\n                                                                                                                       // 54\n    var getHex = new Method({                                                                                          // 55\n        name: 'getHex',                                                                                                // 56\n        call: 'db_getHex',                                                                                             // 57\n        params: 2                                                                                                      // 58\n    });                                                                                                                // 59\n                                                                                                                       // 60\n    return [                                                                                                           // 61\n        putString, getString, putHex, getHex                                                                           // 62\n    ];                                                                                                                 // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\nmodule.exports = DB;                                                                                                   // 66\n                                                                                                                       // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"shh.js\":[\"../method\",\"../formatters\",\"../filter\",\"./watches\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/shh.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file shh.js                                                                                                       // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Method = require('../method');                                                                                     // 23\nvar formatters = require('../formatters');                                                                             // 24\nvar Filter = require('../filter');                                                                                     // 25\nvar watches = require('./watches');                                                                                    // 26\n                                                                                                                       // 27\nvar Shh = function (web3) {                                                                                            // 28\n    this._requestManager = web3._requestManager;                                                                       // 29\n                                                                                                                       // 30\n    var self = this;                                                                                                   // 31\n                                                                                                                       // 32\n    methods().forEach(function(method) {                                                                               // 33\n        method.attachToObject(self);                                                                                   // 34\n        method.setRequestManager(self._requestManager);                                                                // 35\n    });                                                                                                                // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nShh.prototype.filter = function (fil, callback) {                                                                      // 39\n    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);             // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nvar methods = function () {                                                                                            // 43\n                                                                                                                       // 44\n    var post = new Method({                                                                                            // 45\n        name: 'post',                                                                                                  // 46\n        call: 'shh_post',                                                                                              // 47\n        params: 1,                                                                                                     // 48\n        inputFormatter: [formatters.inputPostFormatter]                                                                // 49\n    });                                                                                                                // 50\n                                                                                                                       // 51\n    var newIdentity = new Method({                                                                                     // 52\n        name: 'newIdentity',                                                                                           // 53\n        call: 'shh_newIdentity',                                                                                       // 54\n        params: 0                                                                                                      // 55\n    });                                                                                                                // 56\n                                                                                                                       // 57\n    var hasIdentity = new Method({                                                                                     // 58\n        name: 'hasIdentity',                                                                                           // 59\n        call: 'shh_hasIdentity',                                                                                       // 60\n        params: 1                                                                                                      // 61\n    });                                                                                                                // 62\n                                                                                                                       // 63\n    var newGroup = new Method({                                                                                        // 64\n        name: 'newGroup',                                                                                              // 65\n        call: 'shh_newGroup',                                                                                          // 66\n        params: 0                                                                                                      // 67\n    });                                                                                                                // 68\n                                                                                                                       // 69\n    var addToGroup = new Method({                                                                                      // 70\n        name: 'addToGroup',                                                                                            // 71\n        call: 'shh_addToGroup',                                                                                        // 72\n        params: 0                                                                                                      // 73\n    });                                                                                                                // 74\n                                                                                                                       // 75\n    return [                                                                                                           // 76\n        post,                                                                                                          // 77\n        newIdentity,                                                                                                   // 78\n        hasIdentity,                                                                                                   // 79\n        newGroup,                                                                                                      // 80\n        addToGroup                                                                                                     // 81\n    ];                                                                                                                 // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\nmodule.exports = Shh;                                                                                                  // 85\n                                                                                                                       // 86\n                                                                                                                       // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"net.js\":[\"../../utils/utils\",\"../property\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/net.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file eth.js                                                                                                       // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar utils = require('../../utils/utils');                                                                              // 23\nvar Property = require('../property');                                                                                 // 24\n                                                                                                                       // 25\nvar Net = function (web3) {                                                                                            // 26\n    this._requestManager = web3._requestManager;                                                                       // 27\n                                                                                                                       // 28\n    var self = this;                                                                                                   // 29\n                                                                                                                       // 30\n    properties().forEach(function(p) {                                                                                 // 31\n        p.attachToObject(self);                                                                                        // 32\n        p.setRequestManager(web3._requestManager);                                                                     // 33\n    });                                                                                                                // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\n/// @returns an array of objects describing web3.eth api properties                                                    // 37\nvar properties = function () {                                                                                         // 38\n    return [                                                                                                           // 39\n        new Property({                                                                                                 // 40\n            name: 'listening',                                                                                         // 41\n            getter: 'net_listening'                                                                                    // 42\n        }),                                                                                                            // 43\n        new Property({                                                                                                 // 44\n            name: 'peerCount',                                                                                         // 45\n            getter: 'net_peerCount',                                                                                   // 46\n            outputFormatter: utils.toDecimal                                                                           // 47\n        })                                                                                                             // 48\n    ];                                                                                                                 // 49\n};                                                                                                                     // 50\n                                                                                                                       // 51\nmodule.exports = Net;                                                                                                  // 52\n                                                                                                                       // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"personal.js\":[\"../method\",\"../property\",\"../formatters\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/methods/personal.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file eth.js                                                                                                        // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 20\n * @date 2015                                                                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\n\"use strict\";                                                                                                          // 24\n                                                                                                                       // 25\nvar Method = require('../method');                                                                                     // 26\nvar Property = require('../property');                                                                                 // 27\nvar formatters = require('../formatters');                                                                             // 28\n                                                                                                                       // 29\nfunction Personal(web3) {                                                                                              // 30\n    this._requestManager = web3._requestManager;                                                                       // 31\n                                                                                                                       // 32\n    var self = this;                                                                                                   // 33\n                                                                                                                       // 34\n    methods().forEach(function(method) {                                                                               // 35\n        method.attachToObject(self);                                                                                   // 36\n        method.setRequestManager(self._requestManager);                                                                // 37\n    });                                                                                                                // 38\n                                                                                                                       // 39\n    properties().forEach(function(p) {                                                                                 // 40\n        p.attachToObject(self);                                                                                        // 41\n        p.setRequestManager(self._requestManager);                                                                     // 42\n    });                                                                                                                // 43\n}                                                                                                                      // 44\n                                                                                                                       // 45\nvar methods = function () {                                                                                            // 46\n    var newAccount = new Method({                                                                                      // 47\n        name: 'newAccount',                                                                                            // 48\n        call: 'personal_newAccount',                                                                                   // 49\n        params: 1,                                                                                                     // 50\n        inputFormatter: [null]                                                                                         // 51\n    });                                                                                                                // 52\n                                                                                                                       // 53\n    var unlockAccount = new Method({                                                                                   // 54\n        name: 'unlockAccount',                                                                                         // 55\n        call: 'personal_unlockAccount',                                                                                // 56\n        params: 3,                                                                                                     // 57\n        inputFormatter: [formatters.inputAddressFormatter, null, null]                                                 // 58\n    });                                                                                                                // 59\n                                                                                                                       // 60\n    var unlockAccountAndSendTransaction = new Method({                                                                 // 61\n        name: 'unlockAccountAndSendTransaction', // sendTransaction                                                    // 62\n        call: 'personal_signAndSendTransaction', // personal_sendTransaction                                           // 63\n        params: 2,                                                                                                     // 64\n        inputFormatter: [formatters.inputTransactionFormatter, null]                                                   // 65\n    });                                                                                                                // 66\n                                                                                                                       // 67\n    var lockAccount = new Method({                                                                                     // 68\n        name: 'lockAccount',                                                                                           // 69\n        call: 'personal_lockAccount',                                                                                  // 70\n        params: 1,                                                                                                     // 71\n        inputFormatter: [formatters.inputAddressFormatter]                                                             // 72\n    });                                                                                                                // 73\n                                                                                                                       // 74\n    return [                                                                                                           // 75\n        newAccount,                                                                                                    // 76\n        unlockAccount,                                                                                                 // 77\n        unlockAccountAndSendTransaction,                                                                               // 78\n        lockAccount                                                                                                    // 79\n    ];                                                                                                                 // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\nvar properties = function () {                                                                                         // 83\n    return [                                                                                                           // 84\n        new Property({                                                                                                 // 85\n            name: 'listAccounts',                                                                                      // 86\n            getter: 'personal_listAccounts'                                                                            // 87\n        })                                                                                                             // 88\n    ];                                                                                                                 // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\n                                                                                                                       // 92\nmodule.exports = Personal;                                                                                             // 93\n                                                                                                                       // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"formatters.js\":[\"../utils/utils\",\"../utils/config\",\"./iban\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/formatters.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file formatters.js                                                                                                 // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @author Fabian Vogelsteller <fabian@ethdev.com>                                                                     // 20\n * @date 2015                                                                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar utils = require('../utils/utils');                                                                                 // 24\nvar config = require('../utils/config');                                                                               // 25\nvar Iban = require('./iban');                                                                                          // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * Should the format output to a big number                                                                            // 29\n *                                                                                                                     // 30\n * @method outputBigNumberFormatter                                                                                    // 31\n * @param {String|Number|BigNumber}                                                                                    // 32\n * @returns {BigNumber} object                                                                                         // 33\n */                                                                                                                    // 34\nvar outputBigNumberFormatter = function (number) {                                                                     // 35\n    return utils.toBigNumber(number);                                                                                  // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\nvar isPredefinedBlockNumber = function (blockNumber) {                                                                 // 39\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';                        // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {                                                        // 43\n    if (blockNumber === undefined) {                                                                                   // 44\n        return config.defaultBlock;                                                                                    // 45\n    }                                                                                                                  // 46\n    return inputBlockNumberFormatter(blockNumber);                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nvar inputBlockNumberFormatter = function (blockNumber) {                                                               // 50\n    if (blockNumber === undefined) {                                                                                   // 51\n        return undefined;                                                                                              // 52\n    } else if (isPredefinedBlockNumber(blockNumber)) {                                                                 // 53\n        return blockNumber;                                                                                            // 54\n    }                                                                                                                  // 55\n    return utils.toHex(blockNumber);                                                                                   // 56\n};                                                                                                                     // 57\n                                                                                                                       // 58\n/**                                                                                                                    // 59\n * Formats the input of a transaction and converts all values to HEX                                                   // 60\n *                                                                                                                     // 61\n * @method inputCallFormatter                                                                                          // 62\n * @param {Object} transaction options                                                                                 // 63\n * @returns object                                                                                                     // 64\n*/                                                                                                                     // 65\nvar inputCallFormatter = function (options){                                                                           // 66\n                                                                                                                       // 67\n    options.from = options.from || config.defaultAccount;                                                              // 68\n                                                                                                                       // 69\n    if (options.from) {                                                                                                // 70\n        options.from = inputAddressFormatter(options.from);                                                            // 71\n    }                                                                                                                  // 72\n                                                                                                                       // 73\n    if (options.to) { // it might be contract creation                                                                 // 74\n        options.to = inputAddressFormatter(options.to);                                                                // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 78\n        return options[key] !== undefined;                                                                             // 79\n    }).forEach(function(key){                                                                                          // 80\n        options[key] = utils.fromDecimal(options[key]);                                                                // 81\n    });                                                                                                                // 82\n                                                                                                                       // 83\n    return options;                                                                                                    // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\n/**                                                                                                                    // 87\n * Formats the input of a transaction and converts all values to HEX                                                   // 88\n *                                                                                                                     // 89\n * @method inputTransactionFormatter                                                                                   // 90\n * @param {Object} transaction options                                                                                 // 91\n * @returns object                                                                                                     // 92\n*/                                                                                                                     // 93\nvar inputTransactionFormatter = function (options){                                                                    // 94\n                                                                                                                       // 95\n    options.from = options.from || config.defaultAccount;                                                              // 96\n    options.from = inputAddressFormatter(options.from);                                                                // 97\n                                                                                                                       // 98\n    if (options.to) { // it might be contract creation                                                                 // 99\n        options.to = inputAddressFormatter(options.to);                                                                // 100\n    }                                                                                                                  // 101\n                                                                                                                       // 102\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {                                                      // 103\n        return options[key] !== undefined;                                                                             // 104\n    }).forEach(function(key){                                                                                          // 105\n        options[key] = utils.fromDecimal(options[key]);                                                                // 106\n    });                                                                                                                // 107\n                                                                                                                       // 108\n    return options;                                                                                                    // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Formats the output of a transaction to its proper values                                                            // 113\n *                                                                                                                     // 114\n * @method outputTransactionFormatter                                                                                  // 115\n * @param {Object} tx                                                                                                  // 116\n * @returns {Object}                                                                                                   // 117\n*/                                                                                                                     // 118\nvar outputTransactionFormatter = function (tx){                                                                        // 119\n    if(tx.blockNumber !== null)                                                                                        // 120\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);                                                              // 121\n    if(tx.transactionIndex !== null)                                                                                   // 122\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);                                                    // 123\n    tx.nonce = utils.toDecimal(tx.nonce);                                                                              // 124\n    tx.gas = utils.toDecimal(tx.gas);                                                                                  // 125\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);                                                                      // 126\n    tx.value = utils.toBigNumber(tx.value);                                                                            // 127\n    return tx;                                                                                                         // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * Formats the output of a transaction receipt to its proper values                                                    // 132\n *                                                                                                                     // 133\n * @method outputTransactionReceiptFormatter                                                                           // 134\n * @param {Object} receipt                                                                                             // 135\n * @returns {Object}                                                                                                   // 136\n*/                                                                                                                     // 137\nvar outputTransactionReceiptFormatter = function (receipt){                                                            // 138\n    if(receipt.blockNumber !== null)                                                                                   // 139\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);                                                    // 140\n    if(receipt.transactionIndex !== null)                                                                              // 141\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);                                          // 142\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);                                            // 143\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);                                                                // 144\n                                                                                                                       // 145\n    if(utils.isArray(receipt.logs)) {                                                                                  // 146\n        receipt.logs = receipt.logs.map(function(log){                                                                 // 147\n            return outputLogFormatter(log);                                                                            // 148\n        });                                                                                                            // 149\n    }                                                                                                                  // 150\n                                                                                                                       // 151\n    return receipt;                                                                                                    // 152\n};                                                                                                                     // 153\n                                                                                                                       // 154\n/**                                                                                                                    // 155\n * Formats the output of a block to its proper values                                                                  // 156\n *                                                                                                                     // 157\n * @method outputBlockFormatter                                                                                        // 158\n * @param {Object} block                                                                                               // 159\n * @returns {Object}                                                                                                   // 160\n*/                                                                                                                     // 161\nvar outputBlockFormatter = function(block) {                                                                           // 162\n                                                                                                                       // 163\n    // transform to number                                                                                             // 164\n    block.gasLimit = utils.toDecimal(block.gasLimit);                                                                  // 165\n    block.gasUsed = utils.toDecimal(block.gasUsed);                                                                    // 166\n    block.size = utils.toDecimal(block.size);                                                                          // 167\n    block.timestamp = utils.toDecimal(block.timestamp);                                                                // 168\n    if(block.number !== null)                                                                                          // 169\n        block.number = utils.toDecimal(block.number);                                                                  // 170\n                                                                                                                       // 171\n    block.difficulty = utils.toBigNumber(block.difficulty);                                                            // 172\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);                                                  // 173\n                                                                                                                       // 174\n    if (utils.isArray(block.transactions)) {                                                                           // 175\n        block.transactions.forEach(function(item){                                                                     // 176\n            if(!utils.isString(item))                                                                                  // 177\n                return outputTransactionFormatter(item);                                                               // 178\n        });                                                                                                            // 179\n    }                                                                                                                  // 180\n                                                                                                                       // 181\n    return block;                                                                                                      // 182\n};                                                                                                                     // 183\n                                                                                                                       // 184\n/**                                                                                                                    // 185\n * Formats the output of a log                                                                                         // 186\n *                                                                                                                     // 187\n * @method outputLogFormatter                                                                                          // 188\n * @param {Object} log object                                                                                          // 189\n * @returns {Object} log                                                                                               // 190\n*/                                                                                                                     // 191\nvar outputLogFormatter = function(log) {                                                                               // 192\n    if(log.blockNumber !== null)                                                                                       // 193\n        log.blockNumber = utils.toDecimal(log.blockNumber);                                                            // 194\n    if(log.transactionIndex !== null)                                                                                  // 195\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);                                                  // 196\n    if(log.logIndex !== null)                                                                                          // 197\n        log.logIndex = utils.toDecimal(log.logIndex);                                                                  // 198\n                                                                                                                       // 199\n    return log;                                                                                                        // 200\n};                                                                                                                     // 201\n                                                                                                                       // 202\n/**                                                                                                                    // 203\n * Formats the input of a whisper post and converts all values to HEX                                                  // 204\n *                                                                                                                     // 205\n * @method inputPostFormatter                                                                                          // 206\n * @param {Object} transaction object                                                                                  // 207\n * @returns {Object}                                                                                                   // 208\n*/                                                                                                                     // 209\nvar inputPostFormatter = function(post) {                                                                              // 210\n                                                                                                                       // 211\n    // post.payload = utils.toHex(post.payload);                                                                       // 212\n    post.ttl = utils.fromDecimal(post.ttl);                                                                            // 213\n    post.workToProve = utils.fromDecimal(post.workToProve);                                                            // 214\n    post.priority = utils.fromDecimal(post.priority);                                                                  // 215\n                                                                                                                       // 216\n    // fallback                                                                                                        // 217\n    if (!utils.isArray(post.topics)) {                                                                                 // 218\n        post.topics = post.topics ? [post.topics] : [];                                                                // 219\n    }                                                                                                                  // 220\n                                                                                                                       // 221\n    // format the following options                                                                                    // 222\n    post.topics = post.topics.map(function(topic){                                                                     // 223\n        // convert only if not hex                                                                                     // 224\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);                                            // 225\n    });                                                                                                                // 226\n                                                                                                                       // 227\n    return post;                                                                                                       // 228\n};                                                                                                                     // 229\n                                                                                                                       // 230\n/**                                                                                                                    // 231\n * Formats the output of a received post message                                                                       // 232\n *                                                                                                                     // 233\n * @method outputPostFormatter                                                                                         // 234\n * @param {Object}                                                                                                     // 235\n * @returns {Object}                                                                                                   // 236\n */                                                                                                                    // 237\nvar outputPostFormatter = function(post){                                                                              // 238\n                                                                                                                       // 239\n    post.expiry = utils.toDecimal(post.expiry);                                                                        // 240\n    post.sent = utils.toDecimal(post.sent);                                                                            // 241\n    post.ttl = utils.toDecimal(post.ttl);                                                                              // 242\n    post.workProved = utils.toDecimal(post.workProved);                                                                // 243\n    // post.payloadRaw = post.payload;                                                                                 // 244\n    // post.payload = utils.toAscii(post.payload);                                                                     // 245\n                                                                                                                       // 246\n    // if (utils.isJson(post.payload)) {                                                                               // 247\n    //     post.payload = JSON.parse(post.payload);                                                                    // 248\n    // }                                                                                                               // 249\n                                                                                                                       // 250\n    // format the following options                                                                                    // 251\n    if (!post.topics) {                                                                                                // 252\n        post.topics = [];                                                                                              // 253\n    }                                                                                                                  // 254\n    post.topics = post.topics.map(function(topic){                                                                     // 255\n        return utils.toAscii(topic);                                                                                   // 256\n    });                                                                                                                // 257\n                                                                                                                       // 258\n    return post;                                                                                                       // 259\n};                                                                                                                     // 260\n                                                                                                                       // 261\nvar inputAddressFormatter = function (address) {                                                                       // 262\n    var iban = new Iban(address);                                                                                      // 263\n    if (iban.isValid() && iban.isDirect()) {                                                                           // 264\n        return '0x' + iban.address();                                                                                  // 265\n    } else if (utils.isStrictAddress(address)) {                                                                       // 266\n        return address;                                                                                                // 267\n    } else if (utils.isAddress(address)) {                                                                             // 268\n        return '0x' + address;                                                                                         // 269\n    }                                                                                                                  // 270\n    throw new Error('invalid address');                                                                                // 271\n};                                                                                                                     // 272\n                                                                                                                       // 273\n                                                                                                                       // 274\nvar outputSyncingFormatter = function(result) {                                                                        // 275\n                                                                                                                       // 276\n    result.startingBlock = utils.toDecimal(result.startingBlock);                                                      // 277\n    result.currentBlock = utils.toDecimal(result.currentBlock);                                                        // 278\n    result.highestBlock = utils.toDecimal(result.highestBlock);                                                        // 279\n    if (result.knownStates) {                                                                                          // 280\n        result.knownStates = utils.toDecimal(result.knownStates);                                                      // 281\n        result.pulledStates = utils.toDecimal(result.pulledStates);                                                    // 282\n    }                                                                                                                  // 283\n                                                                                                                       // 284\n    return result;                                                                                                     // 285\n};                                                                                                                     // 286\n                                                                                                                       // 287\nmodule.exports = {                                                                                                     // 288\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,                                                // 289\n    inputBlockNumberFormatter: inputBlockNumberFormatter,                                                              // 290\n    inputCallFormatter: inputCallFormatter,                                                                            // 291\n    inputTransactionFormatter: inputTransactionFormatter,                                                              // 292\n    inputAddressFormatter: inputAddressFormatter,                                                                      // 293\n    inputPostFormatter: inputPostFormatter,                                                                            // 294\n    outputBigNumberFormatter: outputBigNumberFormatter,                                                                // 295\n    outputTransactionFormatter: outputTransactionFormatter,                                                            // 296\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,                                              // 297\n    outputBlockFormatter: outputBlockFormatter,                                                                        // 298\n    outputLogFormatter: outputLogFormatter,                                                                            // 299\n    outputPostFormatter: outputPostFormatter,                                                                          // 300\n    outputSyncingFormatter: outputSyncingFormatter                                                                     // 301\n};                                                                                                                     // 302\n                                                                                                                       // 303\n                                                                                                                       // 304\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"method.js\":[\"../utils/utils\",\"./errors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/method.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file method.js                                                                                                     // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar utils = require('../utils/utils');                                                                                 // 23\nvar errors = require('./errors');                                                                                      // 24\n                                                                                                                       // 25\nvar Method = function (options) {                                                                                      // 26\n    this.name = options.name;                                                                                          // 27\n    this.call = options.call;                                                                                          // 28\n    this.params = options.params || 0;                                                                                 // 29\n    this.inputFormatter = options.inputFormatter;                                                                      // 30\n    this.outputFormatter = options.outputFormatter;                                                                    // 31\n    this.requestManager = null;                                                                                        // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nMethod.prototype.setRequestManager = function (rm) {                                                                   // 35\n    this.requestManager = rm;                                                                                          // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Should be used to determine name of the jsonrpc method based on arguments                                           // 40\n *                                                                                                                     // 41\n * @method getCall                                                                                                     // 42\n * @param {Array} arguments                                                                                            // 43\n * @return {String} name of jsonrpc method                                                                             // 44\n */                                                                                                                    // 45\nMethod.prototype.getCall = function (args) {                                                                           // 46\n    return utils.isFunction(this.call) ? this.call(args) : this.call;                                                  // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Should be used to extract callback from array of arguments. Modifies input param                                    // 51\n *                                                                                                                     // 52\n * @method extractCallback                                                                                             // 53\n * @param {Array} arguments                                                                                            // 54\n * @return {Function|Null} callback, if exists                                                                         // 55\n */                                                                                                                    // 56\nMethod.prototype.extractCallback = function (args) {                                                                   // 57\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 58\n        return args.pop(); // modify the args array!                                                                   // 59\n    }                                                                                                                  // 60\n};                                                                                                                     // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * Should be called to check if the number of arguments is correct                                                     // 64\n *                                                                                                                     // 65\n * @method validateArgs                                                                                                // 66\n * @param {Array} arguments                                                                                            // 67\n * @throws {Error} if it is not                                                                                        // 68\n */                                                                                                                    // 69\nMethod.prototype.validateArgs = function (args) {                                                                      // 70\n    if (args.length !== this.params) {                                                                                 // 71\n        throw errors.InvalidNumberOfParams();                                                                          // 72\n    }                                                                                                                  // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Should be called to format input args of method                                                                     // 77\n *                                                                                                                     // 78\n * @method formatInput                                                                                                 // 79\n * @param {Array}                                                                                                      // 80\n * @return {Array}                                                                                                     // 81\n */                                                                                                                    // 82\nMethod.prototype.formatInput = function (args) {                                                                       // 83\n    if (!this.inputFormatter) {                                                                                        // 84\n        return args;                                                                                                   // 85\n    }                                                                                                                  // 86\n                                                                                                                       // 87\n    return this.inputFormatter.map(function (formatter, index) {                                                       // 88\n        return formatter ? formatter(args[index]) : args[index];                                                       // 89\n    });                                                                                                                // 90\n};                                                                                                                     // 91\n                                                                                                                       // 92\n/**                                                                                                                    // 93\n * Should be called to format output(result) of method                                                                 // 94\n *                                                                                                                     // 95\n * @method formatOutput                                                                                                // 96\n * @param {Object}                                                                                                     // 97\n * @return {Object}                                                                                                    // 98\n */                                                                                                                    // 99\nMethod.prototype.formatOutput = function (result) {                                                                    // 100\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;                                     // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\n/**                                                                                                                    // 104\n * Should create payload from given input args                                                                         // 105\n *                                                                                                                     // 106\n * @method toPayload                                                                                                   // 107\n * @param {Array} args                                                                                                 // 108\n * @return {Object}                                                                                                    // 109\n */                                                                                                                    // 110\nMethod.prototype.toPayload = function (args) {                                                                         // 111\n    var call = this.getCall(args);                                                                                     // 112\n    var callback = this.extractCallback(args);                                                                         // 113\n    var params = this.formatInput(args);                                                                               // 114\n    this.validateArgs(params);                                                                                         // 115\n                                                                                                                       // 116\n    return {                                                                                                           // 117\n        method: call,                                                                                                  // 118\n        params: params,                                                                                                // 119\n        callback: callback                                                                                             // 120\n    };                                                                                                                 // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\nMethod.prototype.attachToObject = function (obj) {                                                                     // 124\n    var func = this.buildCall();                                                                                       // 125\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it                                                   // 126\n    var name = this.name.split('.');                                                                                   // 127\n    if (name.length > 1) {                                                                                             // 128\n        obj[name[0]] = obj[name[0]] || {};                                                                             // 129\n        obj[name[0]][name[1]] = func;                                                                                  // 130\n    } else {                                                                                                           // 131\n        obj[name[0]] = func;                                                                                           // 132\n    }                                                                                                                  // 133\n};                                                                                                                     // 134\n                                                                                                                       // 135\nMethod.prototype.buildCall = function() {                                                                              // 136\n    var method = this;                                                                                                 // 137\n    var send = function () {                                                                                           // 138\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));                                         // 139\n        if (payload.callback) {                                                                                        // 140\n            return method.requestManager.sendAsync(payload, function (err, result) {                                   // 141\n                payload.callback(err, method.formatOutput(result));                                                    // 142\n            });                                                                                                        // 143\n        }                                                                                                              // 144\n        return method.formatOutput(method.requestManager.send(payload));                                               // 145\n    };                                                                                                                 // 146\n    send.request = this.request.bind(this);                                                                            // 147\n    return send;                                                                                                       // 148\n};                                                                                                                     // 149\n                                                                                                                       // 150\n/**                                                                                                                    // 151\n * Should be called to create pure JSONRPC request which can be used in batch request                                  // 152\n *                                                                                                                     // 153\n * @method request                                                                                                     // 154\n * @param {...} params                                                                                                 // 155\n * @return {Object} jsonrpc request                                                                                    // 156\n */                                                                                                                    // 157\nMethod.prototype.request = function () {                                                                               // 158\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));                                               // 159\n    payload.format = this.formatOutput.bind(this);                                                                     // 160\n    return payload;                                                                                                    // 161\n};                                                                                                                     // 162\n                                                                                                                       // 163\nmodule.exports = Method;                                                                                               // 164\n                                                                                                                       // 165\n                                                                                                                       // 166\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"property.js\":[\"../utils/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/property.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file property.js                                                                                                   // 18\n * @author Fabian Vogelsteller <fabian@frozeman.de>                                                                    // 19\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 20\n * @date 2015                                                                                                          // 21\n */                                                                                                                    // 22\n                                                                                                                       // 23\nvar utils = require('../utils/utils');                                                                                 // 24\n                                                                                                                       // 25\nvar Property = function (options) {                                                                                    // 26\n    this.name = options.name;                                                                                          // 27\n    this.getter = options.getter;                                                                                      // 28\n    this.setter = options.setter;                                                                                      // 29\n    this.outputFormatter = options.outputFormatter;                                                                    // 30\n    this.inputFormatter = options.inputFormatter;                                                                      // 31\n    this.requestManager = null;                                                                                        // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nProperty.prototype.setRequestManager = function (rm) {                                                                 // 35\n    this.requestManager = rm;                                                                                          // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n/**                                                                                                                    // 39\n * Should be called to format input args of method                                                                     // 40\n *                                                                                                                     // 41\n * @method formatInput                                                                                                 // 42\n * @param {Array}                                                                                                      // 43\n * @return {Array}                                                                                                     // 44\n */                                                                                                                    // 45\nProperty.prototype.formatInput = function (arg) {                                                                      // 46\n    return this.inputFormatter ? this.inputFormatter(arg) : arg;                                                       // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\n/**                                                                                                                    // 50\n * Should be called to format output(result) of method                                                                 // 51\n *                                                                                                                     // 52\n * @method formatOutput                                                                                                // 53\n * @param {Object}                                                                                                     // 54\n * @return {Object}                                                                                                    // 55\n */                                                                                                                    // 56\nProperty.prototype.formatOutput = function (result) {                                                                  // 57\n    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;                            // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * Should be used to extract callback from array of arguments. Modifies input param                                    // 62\n *                                                                                                                     // 63\n * @method extractCallback                                                                                             // 64\n * @param {Array} arguments                                                                                            // 65\n * @return {Function|Null} callback, if exists                                                                         // 66\n */                                                                                                                    // 67\nProperty.prototype.extractCallback = function (args) {                                                                 // 68\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 69\n        return args.pop(); // modify the args array!                                                                   // 70\n    }                                                                                                                  // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n/**                                                                                                                    // 75\n * Should attach function to method                                                                                    // 76\n *                                                                                                                     // 77\n * @method attachToObject                                                                                              // 78\n * @param {Object}                                                                                                     // 79\n * @param {Function}                                                                                                   // 80\n */                                                                                                                    // 81\nProperty.prototype.attachToObject = function (obj) {                                                                   // 82\n    var proto = {                                                                                                      // 83\n        get: this.buildGet(),                                                                                          // 84\n        enumerable: true                                                                                               // 85\n    };                                                                                                                 // 86\n                                                                                                                       // 87\n    var names = this.name.split('.');                                                                                  // 88\n    var name = names[0];                                                                                               // 89\n    if (names.length > 1) {                                                                                            // 90\n        obj[names[0]] = obj[names[0]] || {};                                                                           // 91\n        obj = obj[names[0]];                                                                                           // 92\n        name = names[1];                                                                                               // 93\n    }                                                                                                                  // 94\n                                                                                                                       // 95\n    Object.defineProperty(obj, name, proto);                                                                           // 96\n    obj[asyncGetterName(name)] = this.buildAsyncGet();                                                                 // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\nvar asyncGetterName = function (name) {                                                                                // 100\n    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);                                                       // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nProperty.prototype.buildGet = function () {                                                                            // 104\n    var property = this;                                                                                               // 105\n    return function get() {                                                                                            // 106\n        return property.formatOutput(property.requestManager.send({                                                    // 107\n            method: property.getter                                                                                    // 108\n        }));                                                                                                           // 109\n    };                                                                                                                 // 110\n};                                                                                                                     // 111\n                                                                                                                       // 112\nProperty.prototype.buildAsyncGet = function () {                                                                       // 113\n    var property = this;                                                                                               // 114\n    var get = function (callback) {                                                                                    // 115\n        property.requestManager.sendAsync({                                                                            // 116\n            method: property.getter                                                                                    // 117\n        }, function (err, result) {                                                                                    // 118\n            callback(err, property.formatOutput(result));                                                              // 119\n        });                                                                                                            // 120\n    };                                                                                                                 // 121\n    get.request = this.request.bind(this);                                                                             // 122\n    return get;                                                                                                        // 123\n};                                                                                                                     // 124\n                                                                                                                       // 125\n/**                                                                                                                    // 126\n * Should be called to create pure JSONRPC request which can be used in batch request                                  // 127\n *                                                                                                                     // 128\n * @method request                                                                                                     // 129\n * @param {...} params                                                                                                 // 130\n * @return {Object} jsonrpc request                                                                                    // 131\n */                                                                                                                    // 132\nProperty.prototype.request = function () {                                                                             // 133\n    var payload = {                                                                                                    // 134\n        method: this.getter,                                                                                           // 135\n        params: [],                                                                                                    // 136\n        callback: this.extractCallback(Array.prototype.slice.call(arguments))                                          // 137\n    };                                                                                                                 // 138\n    payload.format = this.formatOutput.bind(this);                                                                     // 139\n    return payload;                                                                                                    // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\nmodule.exports = Property;                                                                                             // 143\n                                                                                                                       // 144\n                                                                                                                       // 145\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"contract.js\":[\"../utils/utils\",\"../solidity/coder\",\"./event\",\"./function\",\"./allevents\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/contract.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file contract.js                                                                                                   // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2014                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar utils = require('../utils/utils');                                                                                 // 23\nvar coder = require('../solidity/coder');                                                                              // 24\nvar SolidityEvent = require('./event');                                                                                // 25\nvar SolidityFunction = require('./function');                                                                          // 26\nvar AllEvents = require('./allevents');                                                                                // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Should be called to encode constructor params                                                                       // 30\n *                                                                                                                     // 31\n * @method encodeConstructorParams                                                                                     // 32\n * @param {Array} abi                                                                                                  // 33\n * @param {Array} constructor params                                                                                   // 34\n */                                                                                                                    // 35\nvar encodeConstructorParams = function (abi, params) {                                                                 // 36\n    return abi.filter(function (json) {                                                                                // 37\n        return json.type === 'constructor' && json.inputs.length === params.length;                                    // 38\n    }).map(function (json) {                                                                                           // 39\n        return json.inputs.map(function (input) {                                                                      // 40\n            return input.type;                                                                                         // 41\n        });                                                                                                            // 42\n    }).map(function (types) {                                                                                          // 43\n        return coder.encodeParams(types, params);                                                                      // 44\n    })[0] || '';                                                                                                       // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Should be called to add functions to contract object                                                                // 49\n *                                                                                                                     // 50\n * @method addFunctionsToContract                                                                                      // 51\n * @param {Contract} contract                                                                                          // 52\n * @param {Array} abi                                                                                                  // 53\n */                                                                                                                    // 54\nvar addFunctionsToContract = function (contract) {                                                                     // 55\n    contract.abi.filter(function (json) {                                                                              // 56\n        return json.type === 'function';                                                                               // 57\n    }).map(function (json) {                                                                                           // 58\n        return new SolidityFunction(contract._eth, json, contract.address);                                            // 59\n    }).forEach(function (f) {                                                                                          // 60\n        f.attachToContract(contract);                                                                                  // 61\n    });                                                                                                                // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/**                                                                                                                    // 65\n * Should be called to add events to contract object                                                                   // 66\n *                                                                                                                     // 67\n * @method addEventsToContract                                                                                         // 68\n * @param {Contract} contract                                                                                          // 69\n * @param {Array} abi                                                                                                  // 70\n */                                                                                                                    // 71\nvar addEventsToContract = function (contract) {                                                                        // 72\n    var events = contract.abi.filter(function (json) {                                                                 // 73\n        return json.type === 'event';                                                                                  // 74\n    });                                                                                                                // 75\n                                                                                                                       // 76\n    var All = new AllEvents(contract._eth._requestManager, events, contract.address);                                  // 77\n    All.attachToContract(contract);                                                                                    // 78\n                                                                                                                       // 79\n    events.map(function (json) {                                                                                       // 80\n        return new SolidityEvent(contract._eth._requestManager, json, contract.address);                               // 81\n    }).forEach(function (e) {                                                                                          // 82\n        e.attachToContract(contract);                                                                                  // 83\n    });                                                                                                                // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * Should be called to check if the contract gets properly deployed on the blockchain.                                 // 89\n *                                                                                                                     // 90\n * @method checkForContractAddress                                                                                     // 91\n * @param {Object} contract                                                                                            // 92\n * @param {Function} callback                                                                                          // 93\n * @returns {Undefined}                                                                                                // 94\n */                                                                                                                    // 95\nvar checkForContractAddress = function(contract, callback){                                                            // 96\n    var count = 0,                                                                                                     // 97\n        callbackFired = false;                                                                                         // 98\n                                                                                                                       // 99\n    // wait for receipt                                                                                                // 100\n    var filter = contract._eth.filter('latest', function(e){                                                           // 101\n        if (!e && !callbackFired) {                                                                                    // 102\n            count++;                                                                                                   // 103\n                                                                                                                       // 104\n            // stop watching after 50 blocks (timeout)                                                                 // 105\n            if (count > 50) {                                                                                          // 106\n                                                                                                                       // 107\n                filter.stopWatching();                                                                                 // 108\n                callbackFired = true;                                                                                  // 109\n                                                                                                                       // 110\n                if (callback)                                                                                          // 111\n                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));                    // 112\n                else                                                                                                   // 113\n                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');                        // 114\n                                                                                                                       // 115\n                                                                                                                       // 116\n            } else {                                                                                                   // 117\n                                                                                                                       // 118\n                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){                    // 119\n                    if(receipt && !callbackFired) {                                                                    // 120\n                                                                                                                       // 121\n                        contract._eth.getCode(receipt.contractAddress, function(e, code){                              // 122\n                            /*jshint maxcomplexity: 6 */                                                               // 123\n                                                                                                                       // 124\n                            if(callbackFired || !code)                                                                 // 125\n                                return;                                                                                // 126\n                                                                                                                       // 127\n                            filter.stopWatching();                                                                     // 128\n                            callbackFired = true;                                                                      // 129\n                                                                                                                       // 130\n                            if(code.length > 3) {                                                                      // 131\n                                                                                                                       // 132\n                                // console.log('Contract code deployed!');                                             // 133\n                                                                                                                       // 134\n                                contract.address = receipt.contractAddress;                                            // 135\n                                                                                                                       // 136\n                                // attach events and methods again after we have                                       // 137\n                                addFunctionsToContract(contract);                                                      // 138\n                                addEventsToContract(contract);                                                         // 139\n                                                                                                                       // 140\n                                // call callback for the second time                                                   // 141\n                                if(callback)                                                                           // 142\n                                    callback(null, contract);                                                          // 143\n                                                                                                                       // 144\n                            } else {                                                                                   // 145\n                                if(callback)                                                                           // 146\n                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));\n                                else                                                                                   // 148\n                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n                            }                                                                                          // 150\n                        });                                                                                            // 151\n                    }                                                                                                  // 152\n                });                                                                                                    // 153\n            }                                                                                                          // 154\n        }                                                                                                              // 155\n    });                                                                                                                // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\n/**                                                                                                                    // 159\n * Should be called to create new ContractFactory instance                                                             // 160\n *                                                                                                                     // 161\n * @method ContractFactory                                                                                             // 162\n * @param {Array} abi                                                                                                  // 163\n */                                                                                                                    // 164\nvar ContractFactory = function (eth, abi) {                                                                            // 165\n    this.eth = eth;                                                                                                    // 166\n    this.abi = abi;                                                                                                    // 167\n                                                                                                                       // 168\n    /**                                                                                                                // 169\n     * Should be called to create new contract on a blockchain                                                         // 170\n     *                                                                                                                 // 171\n     * @method new                                                                                                     // 172\n     * @param {Any} contract constructor param1 (optional)                                                             // 173\n     * @param {Any} contract constructor param2 (optional)                                                             // 174\n     * @param {Object} contract transaction object (required)                                                          // 175\n     * @param {Function} callback                                                                                      // 176\n     * @returns {Contract} returns contract instance                                                                   // 177\n     */                                                                                                                // 178\n    this.new = function () {                                                                                           // 179\n        var contract = new Contract(this.eth, this.abi);                                                               // 180\n                                                                                                                       // 181\n        // parse arguments                                                                                             // 182\n        var options = {}; // required!                                                                                 // 183\n        var callback;                                                                                                  // 184\n                                                                                                                       // 185\n        var args = Array.prototype.slice.call(arguments);                                                              // 186\n        if (utils.isFunction(args[args.length - 1])) {                                                                 // 187\n            callback = args.pop();                                                                                     // 188\n        }                                                                                                              // 189\n                                                                                                                       // 190\n        var last = args[args.length - 1];                                                                              // 191\n        if (utils.isObject(last) && !utils.isArray(last)) {                                                            // 192\n            options = args.pop();                                                                                      // 193\n        }                                                                                                              // 194\n                                                                                                                       // 195\n        var bytes = encodeConstructorParams(this.abi, args);                                                           // 196\n        options.data += bytes;                                                                                         // 197\n                                                                                                                       // 198\n        if (callback) {                                                                                                // 199\n                                                                                                                       // 200\n            // wait for the contract address adn check if the code was deployed                                        // 201\n            this.eth.sendTransaction(options, function (err, hash) {                                                   // 202\n                if (err) {                                                                                             // 203\n                    callback(err);                                                                                     // 204\n                } else {                                                                                               // 205\n                    // add the transaction hash                                                                        // 206\n                    contract.transactionHash = hash;                                                                   // 207\n                                                                                                                       // 208\n                    // call callback for the first time                                                                // 209\n                    callback(null, contract);                                                                          // 210\n                                                                                                                       // 211\n                    checkForContractAddress(contract, callback);                                                       // 212\n                }                                                                                                      // 213\n            });                                                                                                        // 214\n        } else {                                                                                                       // 215\n            var hash = this.eth.sendTransaction(options);                                                              // 216\n            // add the transaction hash                                                                                // 217\n            contract.transactionHash = hash;                                                                           // 218\n            checkForContractAddress(contract);                                                                         // 219\n        }                                                                                                              // 220\n                                                                                                                       // 221\n        return contract;                                                                                               // 222\n    };                                                                                                                 // 223\n                                                                                                                       // 224\n    this.new.getData = this.getData.bind(this);                                                                        // 225\n};                                                                                                                     // 226\n                                                                                                                       // 227\n/**                                                                                                                    // 228\n * Should be called to create new ContractFactory                                                                      // 229\n *                                                                                                                     // 230\n * @method contract                                                                                                    // 231\n * @param {Array} abi                                                                                                  // 232\n * @returns {ContractFactory} new contract factory                                                                     // 233\n */                                                                                                                    // 234\n//var contract = function (abi) {                                                                                      // 235\n    //return new ContractFactory(abi);                                                                                 // 236\n//};                                                                                                                   // 237\n                                                                                                                       // 238\n                                                                                                                       // 239\n                                                                                                                       // 240\n/**                                                                                                                    // 241\n * Should be called to get access to existing contract on a blockchain                                                 // 242\n *                                                                                                                     // 243\n * @method at                                                                                                          // 244\n * @param {Address} contract address (required)                                                                        // 245\n * @param {Function} callback {optional)                                                                               // 246\n * @returns {Contract} returns contract if no callback was passed,                                                     // 247\n * otherwise calls callback function (err, contract)                                                                   // 248\n */                                                                                                                    // 249\nContractFactory.prototype.at = function (address, callback) {                                                          // 250\n    var contract = new Contract(this.eth, this.abi, address);                                                          // 251\n                                                                                                                       // 252\n    // this functions are not part of prototype,                                                                       // 253\n    // because we dont want to spoil the interface                                                                     // 254\n    addFunctionsToContract(contract);                                                                                  // 255\n    addEventsToContract(contract);                                                                                     // 256\n                                                                                                                       // 257\n    if (callback) {                                                                                                    // 258\n        callback(null, contract);                                                                                      // 259\n    }                                                                                                                  // 260\n    return contract;                                                                                                   // 261\n};                                                                                                                     // 262\n                                                                                                                       // 263\n/**                                                                                                                    // 264\n * Gets the data, which is data to deploy plus constructor params                                                      // 265\n *                                                                                                                     // 266\n * @method getData                                                                                                     // 267\n */                                                                                                                    // 268\nContractFactory.prototype.getData = function () {                                                                      // 269\n    var options = {}; // required!                                                                                     // 270\n    var args = Array.prototype.slice.call(arguments);                                                                  // 271\n                                                                                                                       // 272\n    var last = args[args.length - 1];                                                                                  // 273\n    if (utils.isObject(last) && !utils.isArray(last)) {                                                                // 274\n        options = args.pop();                                                                                          // 275\n    }                                                                                                                  // 276\n                                                                                                                       // 277\n    var bytes = encodeConstructorParams(this.abi, args);                                                               // 278\n    options.data += bytes;                                                                                             // 279\n                                                                                                                       // 280\n    return options.data;                                                                                               // 281\n};                                                                                                                     // 282\n                                                                                                                       // 283\n/**                                                                                                                    // 284\n * Should be called to create new contract instance                                                                    // 285\n *                                                                                                                     // 286\n * @method Contract                                                                                                    // 287\n * @param {Array} abi                                                                                                  // 288\n * @param {Address} contract address                                                                                   // 289\n */                                                                                                                    // 290\nvar Contract = function (eth, abi, address) {                                                                          // 291\n    this._eth = eth;                                                                                                   // 292\n    this.transactionHash = null;                                                                                       // 293\n    this.address = address;                                                                                            // 294\n    this.abi = abi;                                                                                                    // 295\n};                                                                                                                     // 296\n                                                                                                                       // 297\nmodule.exports = ContractFactory;                                                                                      // 298\n                                                                                                                       // 299\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"event.js\":[\"../utils/utils\",\"../solidity/coder\",\"./formatters\",\"../utils/sha3\",\"./filter\",\"./methods/watches\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/event.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file event.js                                                                                                      // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2014                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar utils = require('../utils/utils');                                                                                 // 23\nvar coder = require('../solidity/coder');                                                                              // 24\nvar formatters = require('./formatters');                                                                              // 25\nvar sha3 = require('../utils/sha3');                                                                                   // 26\nvar Filter = require('./filter');                                                                                      // 27\nvar watches = require('./methods/watches');                                                                            // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n * This prototype should be used to create event filters                                                               // 31\n */                                                                                                                    // 32\nvar SolidityEvent = function (requestManager, json, address) {                                                         // 33\n    this._requestManager = requestManager;                                                                             // 34\n    this._params = json.inputs;                                                                                        // 35\n    this._name = utils.transformToFullName(json);                                                                      // 36\n    this._address = address;                                                                                           // 37\n    this._anonymous = json.anonymous;                                                                                  // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Should be used to get filtered param types                                                                          // 42\n *                                                                                                                     // 43\n * @method types                                                                                                       // 44\n * @param {Bool} decide if returned typed should be indexed                                                            // 45\n * @return {Array} array of types                                                                                      // 46\n */                                                                                                                    // 47\nSolidityEvent.prototype.types = function (indexed) {                                                                   // 48\n    return this._params.filter(function (i) {                                                                          // 49\n        return i.indexed === indexed;                                                                                  // 50\n    }).map(function (i) {                                                                                              // 51\n        return i.type;                                                                                                 // 52\n    });                                                                                                                // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Should be used to get event display name                                                                            // 57\n *                                                                                                                     // 58\n * @method displayName                                                                                                 // 59\n * @return {String} event display name                                                                                 // 60\n */                                                                                                                    // 61\nSolidityEvent.prototype.displayName = function () {                                                                    // 62\n    return utils.extractDisplayName(this._name);                                                                       // 63\n};                                                                                                                     // 64\n                                                                                                                       // 65\n/**                                                                                                                    // 66\n * Should be used to get event type name                                                                               // 67\n *                                                                                                                     // 68\n * @method typeName                                                                                                    // 69\n * @return {String} event type name                                                                                    // 70\n */                                                                                                                    // 71\nSolidityEvent.prototype.typeName = function () {                                                                       // 72\n    return utils.extractTypeName(this._name);                                                                          // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\n * Should be used to get event signature                                                                               // 77\n *                                                                                                                     // 78\n * @method signature                                                                                                   // 79\n * @return {String} event signature                                                                                    // 80\n */                                                                                                                    // 81\nSolidityEvent.prototype.signature = function () {                                                                      // 82\n    return sha3(this._name);                                                                                           // 83\n};                                                                                                                     // 84\n                                                                                                                       // 85\n/**                                                                                                                    // 86\n * Should be used to encode indexed params and options to one final object                                             // 87\n *                                                                                                                     // 88\n * @method encode                                                                                                      // 89\n * @param {Object} indexed                                                                                             // 90\n * @param {Object} options                                                                                             // 91\n * @return {Object} everything combined together and encoded                                                           // 92\n */                                                                                                                    // 93\nSolidityEvent.prototype.encode = function (indexed, options) {                                                         // 94\n    indexed = indexed || {};                                                                                           // 95\n    options = options || {};                                                                                           // 96\n    var result = {};                                                                                                   // 97\n                                                                                                                       // 98\n    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 99\n        return options[f] !== undefined;                                                                               // 100\n    }).forEach(function (f) {                                                                                          // 101\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 102\n    });                                                                                                                // 103\n                                                                                                                       // 104\n    result.topics = [];                                                                                                // 105\n                                                                                                                       // 106\n    result.address = this._address;                                                                                    // 107\n    if (!this._anonymous) {                                                                                            // 108\n        result.topics.push('0x' + this.signature());                                                                   // 109\n    }                                                                                                                  // 110\n                                                                                                                       // 111\n    var indexedTopics = this._params.filter(function (i) {                                                             // 112\n        return i.indexed === true;                                                                                     // 113\n    }).map(function (i) {                                                                                              // 114\n        var value = indexed[i.name];                                                                                   // 115\n        if (value === undefined || value === null) {                                                                   // 116\n            return null;                                                                                               // 117\n        }                                                                                                              // 118\n                                                                                                                       // 119\n        if (utils.isArray(value)) {                                                                                    // 120\n            return value.map(function (v) {                                                                            // 121\n                return '0x' + coder.encodeParam(i.type, v);                                                            // 122\n            });                                                                                                        // 123\n        }                                                                                                              // 124\n        return '0x' + coder.encodeParam(i.type, value);                                                                // 125\n    });                                                                                                                // 126\n                                                                                                                       // 127\n    result.topics = result.topics.concat(indexedTopics);                                                               // 128\n                                                                                                                       // 129\n    return result;                                                                                                     // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\n/**                                                                                                                    // 133\n * Should be used to decode indexed params and options                                                                 // 134\n *                                                                                                                     // 135\n * @method decode                                                                                                      // 136\n * @param {Object} data                                                                                                // 137\n * @return {Object} result object with decoded indexed && not indexed params                                           // 138\n */                                                                                                                    // 139\nSolidityEvent.prototype.decode = function (data) {                                                                     // 140\n                                                                                                                       // 141\n    data.data = data.data || '';                                                                                       // 142\n    data.topics = data.topics || [];                                                                                   // 143\n                                                                                                                       // 144\n    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);                                              // 145\n    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join(\"\");                           // 146\n    var indexedParams = coder.decodeParams(this.types(true), indexedData);                                             // 147\n                                                                                                                       // 148\n    var notIndexedData = data.data.slice(2);                                                                           // 149\n    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);                                      // 150\n                                                                                                                       // 151\n    var result = formatters.outputLogFormatter(data);                                                                  // 152\n    result.event = this.displayName();                                                                                 // 153\n    result.address = data.address;                                                                                     // 154\n                                                                                                                       // 155\n    result.args = this._params.reduce(function (acc, current) {                                                        // 156\n        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();                        // 157\n        return acc;                                                                                                    // 158\n    }, {});                                                                                                            // 159\n                                                                                                                       // 160\n    delete result.data;                                                                                                // 161\n    delete result.topics;                                                                                              // 162\n                                                                                                                       // 163\n    return result;                                                                                                     // 164\n};                                                                                                                     // 165\n                                                                                                                       // 166\n/**                                                                                                                    // 167\n * Should be used to create new filter object from event                                                               // 168\n *                                                                                                                     // 169\n * @method execute                                                                                                     // 170\n * @param {Object} indexed                                                                                             // 171\n * @param {Object} options                                                                                             // 172\n * @return {Object} filter object                                                                                      // 173\n */                                                                                                                    // 174\nSolidityEvent.prototype.execute = function (indexed, options, callback) {                                              // 175\n                                                                                                                       // 176\n    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 177\n        callback = arguments[arguments.length - 1];                                                                    // 178\n        if(arguments.length === 2)                                                                                     // 179\n            options = null;                                                                                            // 180\n        if(arguments.length === 1) {                                                                                   // 181\n            options = null;                                                                                            // 182\n            indexed = {};                                                                                              // 183\n        }                                                                                                              // 184\n    }                                                                                                                  // 185\n                                                                                                                       // 186\n    var o = this.encode(indexed, options);                                                                             // 187\n    var formatter = this.decode.bind(this);                                                                            // 188\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 189\n};                                                                                                                     // 190\n                                                                                                                       // 191\n/**                                                                                                                    // 192\n * Should be used to attach event to contract object                                                                   // 193\n *                                                                                                                     // 194\n * @method attachToContract                                                                                            // 195\n * @param {Contract}                                                                                                   // 196\n */                                                                                                                    // 197\nSolidityEvent.prototype.attachToContract = function (contract) {                                                       // 198\n    var execute = this.execute.bind(this);                                                                             // 199\n    var displayName = this.displayName();                                                                              // 200\n    if (!contract[displayName]) {                                                                                      // 201\n        contract[displayName] = execute;                                                                               // 202\n    }                                                                                                                  // 203\n    contract[displayName][this.typeName()] = this.execute.bind(this, contract);                                        // 204\n};                                                                                                                     // 205\n                                                                                                                       // 206\nmodule.exports = SolidityEvent;                                                                                        // 207\n                                                                                                                       // 208\n                                                                                                                       // 209\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"filter.js\":[\"./formatters\",\"../utils/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/filter.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file filter.js                                                                                                    // 17\n * @authors:                                                                                                           // 18\n *   Jeffrey Wilcke <jeff@ethdev.com>                                                                                  // 19\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 20\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 21\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 22\n *   Gav Wood <g@ethdev.com>                                                                                           // 23\n * @date 2014                                                                                                          // 24\n */                                                                                                                    // 25\n                                                                                                                       // 26\nvar formatters = require('./formatters');                                                                              // 27\nvar utils = require('../utils/utils');                                                                                 // 28\n                                                                                                                       // 29\n/**                                                                                                                    // 30\n* Converts a given topic to a hex string, but also allows null values.                                                 // 31\n*                                                                                                                      // 32\n* @param {Mixed} value                                                                                                 // 33\n* @return {String}                                                                                                     // 34\n*/                                                                                                                     // 35\nvar toTopic = function(value){                                                                                         // 36\n                                                                                                                       // 37\n    if(value === null || typeof value === 'undefined')                                                                 // 38\n        return null;                                                                                                   // 39\n                                                                                                                       // 40\n    value = String(value);                                                                                             // 41\n                                                                                                                       // 42\n    if(value.indexOf('0x') === 0)                                                                                      // 43\n        return value;                                                                                                  // 44\n    else                                                                                                               // 45\n        return utils.fromUtf8(value);                                                                                  // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones          // 49\n/// @param should be string or object                                                                                  // 50\n/// @returns options string or object                                                                                  // 51\nvar getOptions = function (options) {                                                                                  // 52\n                                                                                                                       // 53\n    if (utils.isString(options)) {                                                                                     // 54\n        return options;                                                                                                // 55\n    }                                                                                                                  // 56\n                                                                                                                       // 57\n    options = options || {};                                                                                           // 58\n                                                                                                                       // 59\n    // make sure topics, get converted to hex                                                                          // 60\n    options.topics = options.topics || [];                                                                             // 61\n    options.topics = options.topics.map(function(topic){                                                               // 62\n        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);                                           // 63\n    });                                                                                                                // 64\n                                                                                                                       // 65\n    return {                                                                                                           // 66\n        topics: options.topics,                                                                                        // 67\n        from: options.from,                                                                                            // 68\n        to: options.to,                                                                                                // 69\n        address: options.address,                                                                                      // 70\n        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),                                            // 71\n        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)                                                 // 72\n    };                                                                                                                 // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/**                                                                                                                    // 76\nAdds the callback and sets up the methods, to iterate over the results.                                                // 77\n                                                                                                                       // 78\n@method getLogsAtStart                                                                                                 // 79\n@param {Object} self                                                                                                   // 80\n@param {funciton}                                                                                                      // 81\n*/                                                                                                                     // 82\nvar getLogsAtStart = function(self, callback){                                                                         // 83\n    // call getFilterLogs for the first watch callback start                                                           // 84\n    if (!utils.isString(self.options)) {                                                                               // 85\n        self.get(function (err, messages) {                                                                            // 86\n            // don't send all the responses to all the watches again... just to self one                               // 87\n            if (err) {                                                                                                 // 88\n                callback(err);                                                                                         // 89\n            }                                                                                                          // 90\n                                                                                                                       // 91\n            if(utils.isArray(messages)) {                                                                              // 92\n                messages.forEach(function (message) {                                                                  // 93\n                    callback(null, message);                                                                           // 94\n                });                                                                                                    // 95\n            }                                                                                                          // 96\n        });                                                                                                            // 97\n    }                                                                                                                  // 98\n};                                                                                                                     // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\nAdds the callback and sets up the methods, to iterate over the results.                                                // 102\n                                                                                                                       // 103\n@method pollFilter                                                                                                     // 104\n@param {Object} self                                                                                                   // 105\n*/                                                                                                                     // 106\nvar pollFilter = function(self) {                                                                                      // 107\n                                                                                                                       // 108\n    var onMessage = function (error, messages) {                                                                       // 109\n        if (error) {                                                                                                   // 110\n            return self.callbacks.forEach(function (callback) {                                                        // 111\n                callback(error);                                                                                       // 112\n            });                                                                                                        // 113\n        }                                                                                                              // 114\n                                                                                                                       // 115\n        if(utils.isArray(messages)) {                                                                                  // 116\n            messages.forEach(function (message) {                                                                      // 117\n                message = self.formatter ? self.formatter(message) : message;                                          // 118\n                self.callbacks.forEach(function (callback) {                                                           // 119\n                    callback(null, message);                                                                           // 120\n                });                                                                                                    // 121\n            });                                                                                                        // 122\n        }                                                                                                              // 123\n    };                                                                                                                 // 124\n                                                                                                                       // 125\n    self.requestManager.startPolling({                                                                                 // 126\n        method: self.implementation.poll.call,                                                                         // 127\n        params: [self.filterId],                                                                                       // 128\n    }, self.filterId, onMessage, self.stopWatching.bind(self));                                                        // 129\n                                                                                                                       // 130\n};                                                                                                                     // 131\n                                                                                                                       // 132\nvar Filter = function (requestManager, options, methods, formatter, callback) {                                        // 133\n    var self = this;                                                                                                   // 134\n    var implementation = {};                                                                                           // 135\n    methods.forEach(function (method) {                                                                                // 136\n        method.setRequestManager(requestManager);                                                                      // 137\n        method.attachToObject(implementation);                                                                         // 138\n    });                                                                                                                // 139\n    this.requestManager = requestManager;                                                                              // 140\n    this.options = getOptions(options);                                                                                // 141\n    this.implementation = implementation;                                                                              // 142\n    this.filterId = null;                                                                                              // 143\n    this.callbacks = [];                                                                                               // 144\n    this.getLogsCallbacks = [];                                                                                        // 145\n    this.pollFilters = [];                                                                                             // 146\n    this.formatter = formatter;                                                                                        // 147\n    this.implementation.newFilter(this.options, function(error, id){                                                   // 148\n        if(error) {                                                                                                    // 149\n            self.callbacks.forEach(function(cb){                                                                       // 150\n                cb(error);                                                                                             // 151\n            });                                                                                                        // 152\n        } else {                                                                                                       // 153\n            self.filterId = id;                                                                                        // 154\n                                                                                                                       // 155\n            // check if there are get pending callbacks as a consequence                                               // 156\n            // of calling get() with filterId unassigned.                                                              // 157\n            self.getLogsCallbacks.forEach(function (cb){                                                               // 158\n                self.get(cb);                                                                                          // 159\n            });                                                                                                        // 160\n            self.getLogsCallbacks = [];                                                                                // 161\n                                                                                                                       // 162\n            // get filter logs for the already existing watch calls                                                    // 163\n            self.callbacks.forEach(function(cb){                                                                       // 164\n                getLogsAtStart(self, cb);                                                                              // 165\n            });                                                                                                        // 166\n            if(self.callbacks.length > 0)                                                                              // 167\n                pollFilter(self);                                                                                      // 168\n                                                                                                                       // 169\n            // start to watch immediately                                                                              // 170\n            if(typeof callback === 'function') {                                                                       // 171\n                return self.watch(callback);                                                                           // 172\n            }                                                                                                          // 173\n        }                                                                                                              // 174\n    });                                                                                                                // 175\n                                                                                                                       // 176\n    return this;                                                                                                       // 177\n};                                                                                                                     // 178\n                                                                                                                       // 179\nFilter.prototype.watch = function (callback) {                                                                         // 180\n    this.callbacks.push(callback);                                                                                     // 181\n                                                                                                                       // 182\n    if(this.filterId) {                                                                                                // 183\n        getLogsAtStart(this, callback);                                                                                // 184\n        pollFilter(this);                                                                                              // 185\n    }                                                                                                                  // 186\n                                                                                                                       // 187\n    return this;                                                                                                       // 188\n};                                                                                                                     // 189\n                                                                                                                       // 190\nFilter.prototype.stopWatching = function (callback) {                                                                  // 191\n    this.requestManager.stopPolling(this.filterId);                                                                    // 192\n    this.callbacks = [];                                                                                               // 193\n    // remove filter async                                                                                             // 194\n    if (callback) {                                                                                                    // 195\n        this.implementation.uninstallFilter(this.filterId, callback);                                                  // 196\n    } else {                                                                                                           // 197\n        return this.implementation.uninstallFilter(this.filterId);                                                     // 198\n    }                                                                                                                  // 199\n};                                                                                                                     // 200\n                                                                                                                       // 201\nFilter.prototype.get = function (callback) {                                                                           // 202\n    var self = this;                                                                                                   // 203\n    if (utils.isFunction(callback)) {                                                                                  // 204\n        if (this.filterId === null) {                                                                                  // 205\n            // If filterId is not set yet, call it back                                                                // 206\n            // when newFilter() assigns it.                                                                            // 207\n            this.getLogsCallbacks.push(callback);                                                                      // 208\n        } else {                                                                                                       // 209\n            this.implementation.getLogs(this.filterId, function(err, res){                                             // 210\n                if (err) {                                                                                             // 211\n                    callback(err);                                                                                     // 212\n                } else {                                                                                               // 213\n                    callback(null, res.map(function (log) {                                                            // 214\n                        return self.formatter ? self.formatter(log) : log;                                             // 215\n                    }));                                                                                               // 216\n                }                                                                                                      // 217\n            });                                                                                                        // 218\n        }                                                                                                              // 219\n    } else {                                                                                                           // 220\n        if (this.filterId === null) {                                                                                  // 221\n            throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');\n        }                                                                                                              // 223\n        var logs = this.implementation.getLogs(this.filterId);                                                         // 224\n        return logs.map(function (log) {                                                                               // 225\n            return self.formatter ? self.formatter(log) : log;                                                         // 226\n        });                                                                                                            // 227\n    }                                                                                                                  // 228\n                                                                                                                       // 229\n    return this;                                                                                                       // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\nmodule.exports = Filter;                                                                                               // 233\n                                                                                                                       // 234\n                                                                                                                       // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"function.js\":[\"../solidity/coder\",\"../utils/utils\",\"./formatters\",\"../utils/sha3\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/function.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file function.js                                                                                                   // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar coder = require('../solidity/coder');                                                                              // 23\nvar utils = require('../utils/utils');                                                                                 // 24\nvar formatters = require('./formatters');                                                                              // 25\nvar sha3 = require('../utils/sha3');                                                                                   // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * This prototype should be used to call/sendTransaction to solidity functions                                         // 29\n */                                                                                                                    // 30\nvar SolidityFunction = function (eth, json, address) {                                                                 // 31\n    this._eth = eth;                                                                                                   // 32\n    this._inputTypes = json.inputs.map(function (i) {                                                                  // 33\n        return i.type;                                                                                                 // 34\n    });                                                                                                                // 35\n    this._outputTypes = json.outputs.map(function (i) {                                                                // 36\n        return i.type;                                                                                                 // 37\n    });                                                                                                                // 38\n    this._constant = json.constant;                                                                                    // 39\n    this._name = utils.transformToFullName(json);                                                                      // 40\n    this._address = address;                                                                                           // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\nSolidityFunction.prototype.extractCallback = function (args) {                                                         // 44\n    if (utils.isFunction(args[args.length - 1])) {                                                                     // 45\n        return args.pop(); // modify the args array!                                                                   // 46\n    }                                                                                                                  // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nSolidityFunction.prototype.extractDefaultBlock = function (args) {                                                     // 50\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {                              // 51\n        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!                      // 52\n    }                                                                                                                  // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Should be used to create payload from arguments                                                                     // 57\n *                                                                                                                     // 58\n * @method toPayload                                                                                                   // 59\n * @param {Array} solidity function params                                                                             // 60\n * @param {Object} optional payload options                                                                            // 61\n */                                                                                                                    // 62\nSolidityFunction.prototype.toPayload = function (args) {                                                               // 63\n    var options = {};                                                                                                  // 64\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {                               // 65\n        options = args[args.length - 1];                                                                               // 66\n    }                                                                                                                  // 67\n    options.to = this._address;                                                                                        // 68\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);                               // 69\n    return options;                                                                                                    // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Should be used to get function signature                                                                            // 74\n *                                                                                                                     // 75\n * @method signature                                                                                                   // 76\n * @return {String} function signature                                                                                 // 77\n */                                                                                                                    // 78\nSolidityFunction.prototype.signature = function () {                                                                   // 79\n    return sha3(this._name).slice(0, 8);                                                                               // 80\n};                                                                                                                     // 81\n                                                                                                                       // 82\n                                                                                                                       // 83\nSolidityFunction.prototype.unpackOutput = function (output) {                                                          // 84\n    if (!output) {                                                                                                     // 85\n        return;                                                                                                        // 86\n    }                                                                                                                  // 87\n                                                                                                                       // 88\n    output = output.length >= 2 ? output.slice(2) : output;                                                            // 89\n    var result = coder.decodeParams(this._outputTypes, output);                                                        // 90\n    return result.length === 1 ? result[0] : result;                                                                   // 91\n};                                                                                                                     // 92\n                                                                                                                       // 93\n/**                                                                                                                    // 94\n * Calls a contract function.                                                                                          // 95\n *                                                                                                                     // 96\n * @method call                                                                                                        // 97\n * @param {...Object} Contract function arguments                                                                      // 98\n * @param {function} If the last argument is a function, the contract function                                         // 99\n *   call will be asynchronous, and the callback will be passed the                                                    // 100\n *   error and result.                                                                                                 // 101\n * @return {String} output bytes                                                                                       // 102\n */                                                                                                                    // 103\nSolidityFunction.prototype.call = function () {                                                                        // 104\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 105\n    var callback = this.extractCallback(args);                                                                         // 106\n    var defaultBlock = this.extractDefaultBlock(args);                                                                 // 107\n    var payload = this.toPayload(args);                                                                                // 108\n                                                                                                                       // 109\n                                                                                                                       // 110\n    if (!callback) {                                                                                                   // 111\n        var output = this._eth.call(payload, defaultBlock);                                                            // 112\n        return this.unpackOutput(output);                                                                              // 113\n    }                                                                                                                  // 114\n                                                                                                                       // 115\n    var self = this;                                                                                                   // 116\n    this._eth.call(payload, defaultBlock, function (error, output) {                                                   // 117\n        callback(error, self.unpackOutput(output));                                                                    // 118\n    });                                                                                                                // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\n/**                                                                                                                    // 122\n * Should be used to sendTransaction to solidity function                                                              // 123\n *                                                                                                                     // 124\n * @method sendTransaction                                                                                             // 125\n */                                                                                                                    // 126\nSolidityFunction.prototype.sendTransaction = function () {                                                             // 127\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });                  // 128\n    var callback = this.extractCallback(args);                                                                         // 129\n    var payload = this.toPayload(args);                                                                                // 130\n                                                                                                                       // 131\n    if (!callback) {                                                                                                   // 132\n        return this._eth.sendTransaction(payload);                                                                     // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n    this._eth.sendTransaction(payload, callback);                                                                      // 136\n};                                                                                                                     // 137\n                                                                                                                       // 138\n/**                                                                                                                    // 139\n * Should be used to estimateGas of solidity function                                                                  // 140\n *                                                                                                                     // 141\n * @method estimateGas                                                                                                 // 142\n */                                                                                                                    // 143\nSolidityFunction.prototype.estimateGas = function () {                                                                 // 144\n    var args = Array.prototype.slice.call(arguments);                                                                  // 145\n    var callback = this.extractCallback(args);                                                                         // 146\n    var payload = this.toPayload(args);                                                                                // 147\n                                                                                                                       // 148\n    if (!callback) {                                                                                                   // 149\n        return this._eth.estimateGas(payload);                                                                         // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    this._eth.estimateGas(payload, callback);                                                                          // 153\n};                                                                                                                     // 154\n                                                                                                                       // 155\n/**                                                                                                                    // 156\n * Return the encoded data of the call                                                                                 // 157\n *                                                                                                                     // 158\n * @method getData                                                                                                     // 159\n * @return {String} the encoded data                                                                                   // 160\n */                                                                                                                    // 161\nSolidityFunction.prototype.getData = function () {                                                                     // 162\n    var args = Array.prototype.slice.call(arguments);                                                                  // 163\n    var payload = this.toPayload(args);                                                                                // 164\n                                                                                                                       // 165\n    return payload.data;                                                                                               // 166\n};                                                                                                                     // 167\n                                                                                                                       // 168\n/**                                                                                                                    // 169\n * Should be used to get function display name                                                                         // 170\n *                                                                                                                     // 171\n * @method displayName                                                                                                 // 172\n * @return {String} display name of the function                                                                       // 173\n */                                                                                                                    // 174\nSolidityFunction.prototype.displayName = function () {                                                                 // 175\n    return utils.extractDisplayName(this._name);                                                                       // 176\n};                                                                                                                     // 177\n                                                                                                                       // 178\n/**                                                                                                                    // 179\n * Should be used to get function type name                                                                            // 180\n *                                                                                                                     // 181\n * @method typeName                                                                                                    // 182\n * @return {String} type name of the function                                                                          // 183\n */                                                                                                                    // 184\nSolidityFunction.prototype.typeName = function () {                                                                    // 185\n    return utils.extractTypeName(this._name);                                                                          // 186\n};                                                                                                                     // 187\n                                                                                                                       // 188\n/**                                                                                                                    // 189\n * Should be called to get rpc requests from solidity function                                                         // 190\n *                                                                                                                     // 191\n * @method request                                                                                                     // 192\n * @returns {Object}                                                                                                   // 193\n */                                                                                                                    // 194\nSolidityFunction.prototype.request = function () {                                                                     // 195\n    var args = Array.prototype.slice.call(arguments);                                                                  // 196\n    var callback = this.extractCallback(args);                                                                         // 197\n    var payload = this.toPayload(args);                                                                                // 198\n    var format = this.unpackOutput.bind(this);                                                                         // 199\n                                                                                                                       // 200\n    return {                                                                                                           // 201\n        method: this._constant ? 'eth_call' : 'eth_sendTransaction',                                                   // 202\n        callback: callback,                                                                                            // 203\n        params: [payload],                                                                                             // 204\n        format: format                                                                                                 // 205\n    };                                                                                                                 // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * Should be called to execute function                                                                                // 210\n *                                                                                                                     // 211\n * @method execute                                                                                                     // 212\n */                                                                                                                    // 213\nSolidityFunction.prototype.execute = function () {                                                                     // 214\n    var transaction = !this._constant;                                                                                 // 215\n                                                                                                                       // 216\n    // send transaction                                                                                                // 217\n    if (transaction) {                                                                                                 // 218\n        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));                                // 219\n    }                                                                                                                  // 220\n                                                                                                                       // 221\n    // call                                                                                                            // 222\n    return this.call.apply(this, Array.prototype.slice.call(arguments));                                               // 223\n};                                                                                                                     // 224\n                                                                                                                       // 225\n/**                                                                                                                    // 226\n * Should be called to attach function to contract                                                                     // 227\n *                                                                                                                     // 228\n * @method attachToContract                                                                                            // 229\n * @param {Contract}                                                                                                   // 230\n */                                                                                                                    // 231\nSolidityFunction.prototype.attachToContract = function (contract) {                                                    // 232\n    var execute = this.execute.bind(this);                                                                             // 233\n    execute.request = this.request.bind(this);                                                                         // 234\n    execute.call = this.call.bind(this);                                                                               // 235\n    execute.sendTransaction = this.sendTransaction.bind(this);                                                         // 236\n    execute.estimateGas = this.estimateGas.bind(this);                                                                 // 237\n    execute.getData = this.getData.bind(this);                                                                         // 238\n    var displayName = this.displayName();                                                                              // 239\n    if (!contract[displayName]) {                                                                                      // 240\n        contract[displayName] = execute;                                                                               // 241\n    }                                                                                                                  // 242\n    contract[displayName][this.typeName()] = execute; // circular!!!!                                                  // 243\n};                                                                                                                     // 244\n                                                                                                                       // 245\nmodule.exports = SolidityFunction;                                                                                     // 246\n                                                                                                                       // 247\n                                                                                                                       // 248\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"allevents.js\":[\"../utils/sha3\",\"./event\",\"./formatters\",\"../utils/utils\",\"./filter\",\"./methods/watches\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/allevents.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file allevents.js                                                                                                  // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2014                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar sha3 = require('../utils/sha3');                                                                                   // 23\nvar SolidityEvent = require('./event');                                                                                // 24\nvar formatters = require('./formatters');                                                                              // 25\nvar utils = require('../utils/utils');                                                                                 // 26\nvar Filter = require('./filter');                                                                                      // 27\nvar watches = require('./methods/watches');                                                                            // 28\n                                                                                                                       // 29\nvar AllSolidityEvents = function (requestManager, json, address) {                                                     // 30\n    this._requestManager = requestManager;                                                                             // 31\n    this._json = json;                                                                                                 // 32\n    this._address = address;                                                                                           // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nAllSolidityEvents.prototype.encode = function (options) {                                                              // 36\n    options = options || {};                                                                                           // 37\n    var result = {};                                                                                                   // 38\n                                                                                                                       // 39\n    ['fromBlock', 'toBlock'].filter(function (f) {                                                                     // 40\n        return options[f] !== undefined;                                                                               // 41\n    }).forEach(function (f) {                                                                                          // 42\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);                                                  // 43\n    });                                                                                                                // 44\n                                                                                                                       // 45\n    result.address = this._address;                                                                                    // 46\n                                                                                                                       // 47\n    return result;                                                                                                     // 48\n};                                                                                                                     // 49\n                                                                                                                       // 50\nAllSolidityEvents.prototype.decode = function (data) {                                                                 // 51\n    data.data = data.data || '';                                                                                       // 52\n    data.topics = data.topics || [];                                                                                   // 53\n                                                                                                                       // 54\n    var eventTopic = data.topics[0].slice(2);                                                                          // 55\n    var match = this._json.filter(function (j) {                                                                       // 56\n        return eventTopic === sha3(utils.transformToFullName(j));                                                      // 57\n    })[0];                                                                                                             // 58\n                                                                                                                       // 59\n    if (!match) { // cannot find matching event?                                                                       // 60\n        console.warn('cannot find event for log');                                                                     // 61\n        return data;                                                                                                   // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    var event = new SolidityEvent(this._requestManager, match, this._address);                                         // 65\n    return event.decode(data);                                                                                         // 66\n};                                                                                                                     // 67\n                                                                                                                       // 68\nAllSolidityEvents.prototype.execute = function (options, callback) {                                                   // 69\n                                                                                                                       // 70\n    if (utils.isFunction(arguments[arguments.length - 1])) {                                                           // 71\n        callback = arguments[arguments.length - 1];                                                                    // 72\n        if(arguments.length === 1)                                                                                     // 73\n            options = null;                                                                                            // 74\n    }                                                                                                                  // 75\n                                                                                                                       // 76\n    var o = this.encode(options);                                                                                      // 77\n    var formatter = this.decode.bind(this);                                                                            // 78\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);                                    // 79\n};                                                                                                                     // 80\n                                                                                                                       // 81\nAllSolidityEvents.prototype.attachToContract = function (contract) {                                                   // 82\n    var execute = this.execute.bind(this);                                                                             // 83\n    contract.allEvents = execute;                                                                                      // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nmodule.exports = AllSolidityEvents;                                                                                    // 87\n                                                                                                                       // 88\n                                                                                                                       // 89\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"syncing.js\":[\"./formatters\",\"../utils/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/syncing.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file syncing.js                                                                                                   // 17\n * @authors:                                                                                                           // 18\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar formatters = require('./formatters');                                                                              // 23\nvar utils = require('../utils/utils');                                                                                 // 24\n                                                                                                                       // 25\nvar count = 1;                                                                                                         // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\nAdds the callback and sets up the methods, to iterate over the results.                                                // 29\n                                                                                                                       // 30\n@method pollSyncing                                                                                                    // 31\n@param {Object} self                                                                                                   // 32\n*/                                                                                                                     // 33\nvar pollSyncing = function(self) {                                                                                     // 34\n                                                                                                                       // 35\n    var onMessage = function (error, sync) {                                                                           // 36\n        if (error) {                                                                                                   // 37\n            return self.callbacks.forEach(function (callback) {                                                        // 38\n                callback(error);                                                                                       // 39\n            });                                                                                                        // 40\n        }                                                                                                              // 41\n                                                                                                                       // 42\n        if(utils.isObject(sync) && sync.startingBlock)                                                                 // 43\n            sync = formatters.outputSyncingFormatter(sync);                                                            // 44\n                                                                                                                       // 45\n        self.callbacks.forEach(function (callback) {                                                                   // 46\n            if (self.lastSyncState !== sync) {                                                                         // 47\n                                                                                                                       // 48\n                // call the callback with true first so the app can stop anything, before receiving the sync data      // 49\n                if(!self.lastSyncState && utils.isObject(sync))                                                        // 50\n                    callback(null, true);                                                                              // 51\n                                                                                                                       // 52\n                // call on the next CPU cycle, so the actions of the sync stop can be processes first                  // 53\n                setTimeout(function() {                                                                                // 54\n                    callback(null, sync);                                                                              // 55\n                }, 0);                                                                                                 // 56\n                                                                                                                       // 57\n                self.lastSyncState = sync;                                                                             // 58\n            }                                                                                                          // 59\n        });                                                                                                            // 60\n    };                                                                                                                 // 61\n                                                                                                                       // 62\n    self.requestManager.startPolling({                                                                                 // 63\n        method: 'eth_syncing',                                                                                         // 64\n        params: [],                                                                                                    // 65\n    }, self.pollId, onMessage, self.stopWatching.bind(self));                                                          // 66\n                                                                                                                       // 67\n};                                                                                                                     // 68\n                                                                                                                       // 69\nvar IsSyncing = function (requestManager, callback) {                                                                  // 70\n    this.requestManager = requestManager;                                                                              // 71\n    this.pollId = 'syncPoll_'+ count++;                                                                                // 72\n    this.callbacks = [];                                                                                               // 73\n    this.addCallback(callback);                                                                                        // 74\n    this.lastSyncState = false;                                                                                        // 75\n    pollSyncing(this);                                                                                                 // 76\n                                                                                                                       // 77\n    return this;                                                                                                       // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nIsSyncing.prototype.addCallback = function (callback) {                                                                // 81\n    if(callback)                                                                                                       // 82\n        this.callbacks.push(callback);                                                                                 // 83\n    return this;                                                                                                       // 84\n};                                                                                                                     // 85\n                                                                                                                       // 86\nIsSyncing.prototype.stopWatching = function () {                                                                       // 87\n    this.requestManager.stopPolling(this.pollId);                                                                      // 88\n    this.callbacks = [];                                                                                               // 89\n};                                                                                                                     // 90\n                                                                                                                       // 91\nmodule.exports = IsSyncing;                                                                                            // 92\n                                                                                                                       // 93\n                                                                                                                       // 94\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"namereg.js\":[\"../contracts/GlobalRegistrar.json\",\"../contracts/ICAPRegistrar.json\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/namereg.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file namereg.js                                                                                                    // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');                                                 // 23\nvar icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');                                                      // 24\n                                                                                                                       // 25\nvar globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';                                               // 26\nvar icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';                                                 // 27\n                                                                                                                       // 28\nmodule.exports = {                                                                                                     // 29\n    global: {                                                                                                          // 30\n        abi: globalRegistrarAbi,                                                                                       // 31\n        address: globalNameregAddress                                                                                  // 32\n    },                                                                                                                 // 33\n    icap: {                                                                                                            // 34\n        abi: icapRegistrarAbi,                                                                                         // 35\n        address: icapNameregAddress                                                                                    // 36\n    }                                                                                                                  // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"transfer.js\":[\"./iban\",\"../contracts/SmartExchange.json\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/transfer.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file transfer.js                                                                                                   // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Iban = require('./iban');                                                                                          // 23\nvar exchangeAbi = require('../contracts/SmartExchange.json');                                                          // 24\n                                                                                                                       // 25\n/**                                                                                                                    // 26\n * Should be used to make Iban transfer                                                                                // 27\n *                                                                                                                     // 28\n * @method transfer                                                                                                    // 29\n * @param {String} from                                                                                                // 30\n * @param {String} to iban                                                                                             // 31\n * @param {Value} value to be tranfered                                                                                // 32\n * @param {Function} callback, callback                                                                                // 33\n */                                                                                                                    // 34\nvar transfer = function (eth, from, to, value, callback) {                                                             // 35\n    var iban = new Iban(to);                                                                                           // 36\n    if (!iban.isValid()) {                                                                                             // 37\n        throw new Error('invalid iban address');                                                                       // 38\n    }                                                                                                                  // 39\n                                                                                                                       // 40\n    if (iban.isDirect()) {                                                                                             // 41\n        return transferToAddress(eth, from, iban.address(), value, callback);                                          // 42\n    }                                                                                                                  // 43\n                                                                                                                       // 44\n    if (!callback) {                                                                                                   // 45\n        var address = eth.icapNamereg().addr(iban.institution());                                                      // 46\n        return deposit(eth, from, address, value, iban.client());                                                      // 47\n    }                                                                                                                  // 48\n                                                                                                                       // 49\n    eth.icapNamereg().addr(iban.institution(), function (err, address) {                                               // 50\n        return deposit(eth, from, address, value, iban.client(), callback);                                            // 51\n    });                                                                                                                // 52\n                                                                                                                       // 53\n};                                                                                                                     // 54\n                                                                                                                       // 55\n/**                                                                                                                    // 56\n * Should be used to transfer funds to certain address                                                                 // 57\n *                                                                                                                     // 58\n * @method transferToAddress                                                                                           // 59\n * @param {String} from                                                                                                // 60\n * @param {String} to                                                                                                  // 61\n * @param {Value} value to be tranfered                                                                                // 62\n * @param {Function} callback, callback                                                                                // 63\n */                                                                                                                    // 64\nvar transferToAddress = function (eth, from, to, value, callback) {                                                    // 65\n    return eth.sendTransaction({                                                                                       // 66\n        address: to,                                                                                                   // 67\n        from: from,                                                                                                    // 68\n        value: value                                                                                                   // 69\n    }, callback);                                                                                                      // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)              // 74\n *                                                                                                                     // 75\n * @method deposit                                                                                                     // 76\n * @param {String} from                                                                                                // 77\n * @param {String} to                                                                                                  // 78\n * @param {Value} value to be transfered                                                                               // 79\n * @param {String} client unique identifier                                                                            // 80\n * @param {Function} callback, callback                                                                                // 81\n */                                                                                                                    // 82\nvar deposit = function (eth, from, to, value, client, callback) {                                                      // 83\n    var abi = exchangeAbi;                                                                                             // 84\n    return eth.contract(abi).at(to).deposit(client, {                                                                  // 85\n        from: from,                                                                                                    // 86\n        value: value                                                                                                   // 87\n    }, callback);                                                                                                      // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\nmodule.exports = transfer;                                                                                             // 91\n                                                                                                                       // 92\n                                                                                                                       // 93\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"settings.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/settings.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n                                                                                                                       // 2\nvar Settings = function () {                                                                                           // 3\n    this.defaultBlock = 'latest';                                                                                      // 4\n    this.defaultAccount = undefined;                                                                                   // 5\n};                                                                                                                     // 6\n                                                                                                                       // 7\nmodule.exports = Settings;                                                                                             // 8\n                                                                                                                       // 9\n                                                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"extend.js\":[\"./formatters\",\"./../utils/utils\",\"./method\",\"./property\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/extend.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar formatters = require('./formatters');                                                                              // 1\nvar utils = require('./../utils/utils');                                                                               // 2\nvar Method = require('./method');                                                                                      // 3\nvar Property = require('./property');                                                                                  // 4\n                                                                                                                       // 5\n// TODO: refactor, so the input params are not altered.                                                                // 6\n// it's necessary to make same 'extension' work with multiple providers                                                // 7\nvar extend = function (web3) {                                                                                         // 8\n    /* jshint maxcomplexity:5 */                                                                                       // 9\n    var ex = function (extension) {                                                                                    // 10\n                                                                                                                       // 11\n        var extendedObject;                                                                                            // 12\n        if (extension.property) {                                                                                      // 13\n            if (!web3[extension.property]) {                                                                           // 14\n                web3[extension.property] = {};                                                                         // 15\n            }                                                                                                          // 16\n            extendedObject = web3[extension.property];                                                                 // 17\n        } else {                                                                                                       // 18\n            extendedObject = web3;                                                                                     // 19\n        }                                                                                                              // 20\n                                                                                                                       // 21\n        if (extension.methods) {                                                                                       // 22\n            extension.methods.forEach(function (method) {                                                              // 23\n                method.attachToObject(extendedObject);                                                                 // 24\n                method.setRequestManager(web3._requestManager);                                                        // 25\n            });                                                                                                        // 26\n        }                                                                                                              // 27\n                                                                                                                       // 28\n        if (extension.properties) {                                                                                    // 29\n            extension.properties.forEach(function (property) {                                                         // 30\n                property.attachToObject(extendedObject);                                                               // 31\n                property.setRequestManager(web3._requestManager);                                                      // 32\n            });                                                                                                        // 33\n        }                                                                                                              // 34\n    };                                                                                                                 // 35\n                                                                                                                       // 36\n    ex.formatters = formatters;                                                                                        // 37\n    ex.utils = utils;                                                                                                  // 38\n    ex.Method = Method;                                                                                                // 39\n    ex.Property = Property;                                                                                            // 40\n                                                                                                                       // 41\n    return ex;                                                                                                         // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n                                                                                                                       // 45\n                                                                                                                       // 46\nmodule.exports = extend;                                                                                               // 47\n                                                                                                                       // 48\n                                                                                                                       // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"batch.js\":[\"./jsonrpc\",\"./errors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/batch.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file batch.js                                                                                                      // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar Jsonrpc = require('./jsonrpc');                                                                                    // 23\nvar errors = require('./errors');                                                                                      // 24\n                                                                                                                       // 25\nvar Batch = function (web3) {                                                                                          // 26\n    this.requestManager = web3._requestManager;                                                                        // 27\n    this.requests = [];                                                                                                // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\n/**                                                                                                                    // 31\n * Should be called to add create new request to batch request                                                         // 32\n *                                                                                                                     // 33\n * @method add                                                                                                         // 34\n * @param {Object} jsonrpc requet object                                                                               // 35\n */                                                                                                                    // 36\nBatch.prototype.add = function (request) {                                                                             // 37\n    this.requests.push(request);                                                                                       // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * Should be called to execute batch request                                                                           // 42\n *                                                                                                                     // 43\n * @method execute                                                                                                     // 44\n */                                                                                                                    // 45\nBatch.prototype.execute = function () {                                                                                // 46\n    var requests = this.requests;                                                                                      // 47\n    this.requestManager.sendBatch(requests, function (err, results) {                                                  // 48\n        results = results || [];                                                                                       // 49\n        requests.map(function (request, index) {                                                                       // 50\n            return results[index] || {};                                                                               // 51\n        }).forEach(function (result, index) {                                                                          // 52\n            if (requests[index].callback) {                                                                            // 53\n                                                                                                                       // 54\n                if (!Jsonrpc.isValidResponse(result)) {                                                                // 55\n                    return requests[index].callback(errors.InvalidResponse(result));                                   // 56\n                }                                                                                                      // 57\n                                                                                                                       // 58\n                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));\n            }                                                                                                          // 60\n        });                                                                                                            // 61\n    });                                                                                                                // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nmodule.exports = Batch;                                                                                                // 65\n                                                                                                                       // 66\n                                                                                                                       // 67\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"httpprovider.js\":[\"./errors\",\"xmlhttprequest\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/httpprovider.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file httpprovider.js                                                                                              // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n *   Marian Oancea <marian@ethdev.com>                                                                                 // 20\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 21\n * @date 2015                                                                                                          // 22\n */                                                                                                                    // 23\n                                                                                                                       // 24\n\"use strict\";                                                                                                          // 25\n                                                                                                                       // 26\nvar errors = require('./errors');                                                                                      // 27\n                                                                                                                       // 28\n// workaround to use httpprovider in different envs                                                                    // 29\nvar XMLHttpRequest; // jshint ignore: line                                                                             // 30\n                                                                                                                       // 31\n// browser                                                                                                             // 32\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {                                                          // 33\n    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line                                                     // 34\n                                                                                                                       // 35\n// node                                                                                                                // 36\n} else {                                                                                                               // 37\n    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line                                  // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/**                                                                                                                    // 41\n * HttpProvider should be used to send rpc calls over http                                                             // 42\n */                                                                                                                    // 43\nvar HttpProvider = function (host) {                                                                                   // 44\n    this.host = host || 'http://localhost:8545';                                                                       // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\n/**                                                                                                                    // 48\n * Should be called to prepare new XMLHttpRequest                                                                      // 49\n *                                                                                                                     // 50\n * @method prepareRequest                                                                                              // 51\n * @param {Boolean} true if request should be async                                                                    // 52\n * @return {XMLHttpRequest} object                                                                                     // 53\n */                                                                                                                    // 54\nHttpProvider.prototype.prepareRequest = function (async) {                                                             // 55\n    var request = new XMLHttpRequest();                                                                                // 56\n    request.open('POST', this.host, async);                                                                            // 57\n    request.setRequestHeader('Content-Type','application/json');                                                       // 58\n    return request;                                                                                                    // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Should be called to make sync request                                                                               // 63\n *                                                                                                                     // 64\n * @method send                                                                                                        // 65\n * @param {Object} payload                                                                                             // 66\n * @return {Object} result                                                                                             // 67\n */                                                                                                                    // 68\nHttpProvider.prototype.send = function (payload) {                                                                     // 69\n    var request = this.prepareRequest(false);                                                                          // 70\n                                                                                                                       // 71\n    try {                                                                                                              // 72\n        request.send(JSON.stringify(payload));                                                                         // 73\n    } catch(error) {                                                                                                   // 74\n        throw errors.InvalidConnection(this.host);                                                                     // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    var result = request.responseText;                                                                                 // 78\n                                                                                                                       // 79\n    try {                                                                                                              // 80\n        result = JSON.parse(result);                                                                                   // 81\n    } catch(e) {                                                                                                       // 82\n        throw errors.InvalidResponse(request.responseText);                                                            // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    return result;                                                                                                     // 86\n};                                                                                                                     // 87\n                                                                                                                       // 88\n/**                                                                                                                    // 89\n * Should be used to make async request                                                                                // 90\n *                                                                                                                     // 91\n * @method sendAsync                                                                                                   // 92\n * @param {Object} payload                                                                                             // 93\n * @param {Function} callback triggered on end with (err, result)                                                      // 94\n */                                                                                                                    // 95\nHttpProvider.prototype.sendAsync = function (payload, callback) {                                                      // 96\n    var request = this.prepareRequest(true);                                                                           // 97\n                                                                                                                       // 98\n    request.onreadystatechange = function() {                                                                          // 99\n        if (request.readyState === 4) {                                                                                // 100\n            var result = request.responseText;                                                                         // 101\n            var error = null;                                                                                          // 102\n                                                                                                                       // 103\n            try {                                                                                                      // 104\n                result = JSON.parse(result);                                                                           // 105\n            } catch(e) {                                                                                               // 106\n                error = errors.InvalidResponse(request.responseText);                                                  // 107\n            }                                                                                                          // 108\n                                                                                                                       // 109\n            callback(error, result);                                                                                   // 110\n        }                                                                                                              // 111\n    };                                                                                                                 // 112\n                                                                                                                       // 113\n    try {                                                                                                              // 114\n        request.send(JSON.stringify(payload));                                                                         // 115\n    } catch(error) {                                                                                                   // 116\n        callback(errors.InvalidConnection(this.host));                                                                 // 117\n    }                                                                                                                  // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * Synchronously tries to make Http request                                                                            // 122\n *                                                                                                                     // 123\n * @method isConnected                                                                                                 // 124\n * @return {Boolean} returns true if request haven't failed. Otherwise false                                           // 125\n */                                                                                                                    // 126\nHttpProvider.prototype.isConnected = function() {                                                                      // 127\n    try {                                                                                                              // 128\n        this.send({                                                                                                    // 129\n            id: 9999999999,                                                                                            // 130\n            jsonrpc: '2.0',                                                                                            // 131\n            method: 'net_listening',                                                                                   // 132\n            params: []                                                                                                 // 133\n        });                                                                                                            // 134\n        return true;                                                                                                   // 135\n    } catch(e) {                                                                                                       // 136\n        return false;                                                                                                  // 137\n    }                                                                                                                  // 138\n};                                                                                                                     // 139\n                                                                                                                       // 140\nmodule.exports = HttpProvider;                                                                                         // 141\n                                                                                                                       // 142\n                                                                                                                       // 143\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ipcprovider.js\":[\"../utils/utils\",\"./errors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/web3/ipcprovider.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file ipcprovider.js                                                                                               // 17\n * @authors:                                                                                                           // 18\n *   Fabian Vogelsteller <fabian@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\n\"use strict\";                                                                                                          // 23\n                                                                                                                       // 24\nvar utils = require('../utils/utils');                                                                                 // 25\nvar errors = require('./errors');                                                                                      // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\nvar IpcProvider = function (path, net) {                                                                               // 29\n    var _this = this;                                                                                                  // 30\n    this.responseCallbacks = {};                                                                                       // 31\n    this.path = path;                                                                                                  // 32\n                                                                                                                       // 33\n    this.connection = net.connect({path: this.path});                                                                  // 34\n                                                                                                                       // 35\n    this.connection.on('error', function(e){                                                                           // 36\n        console.error('IPC Connection Error', e);                                                                      // 37\n        _this._timeout();                                                                                              // 38\n    });                                                                                                                // 39\n                                                                                                                       // 40\n    this.connection.on('end', function(){                                                                              // 41\n        _this._timeout();                                                                                              // 42\n    });                                                                                                                // 43\n                                                                                                                       // 44\n                                                                                                                       // 45\n    // LISTEN FOR CONNECTION RESPONSES                                                                                 // 46\n    this.connection.on('data', function(data) {                                                                        // 47\n        /*jshint maxcomplexity: 6 */                                                                                   // 48\n                                                                                                                       // 49\n        _this._parseResponse(data.toString()).forEach(function(result){                                                // 50\n                                                                                                                       // 51\n            var id = null;                                                                                             // 52\n                                                                                                                       // 53\n            // get the id which matches the returned id                                                                // 54\n            if(utils.isArray(result)) {                                                                                // 55\n                result.forEach(function(load){                                                                         // 56\n                    if(_this.responseCallbacks[load.id])                                                               // 57\n                        id = load.id;                                                                                  // 58\n                });                                                                                                    // 59\n            } else {                                                                                                   // 60\n                id = result.id;                                                                                        // 61\n            }                                                                                                          // 62\n                                                                                                                       // 63\n            // fire the callback                                                                                       // 64\n            if(_this.responseCallbacks[id]) {                                                                          // 65\n                _this.responseCallbacks[id](null, result);                                                             // 66\n                delete _this.responseCallbacks[id];                                                                    // 67\n            }                                                                                                          // 68\n        });                                                                                                            // 69\n    });                                                                                                                // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\nWill parse the response and make an array out of it.                                                                   // 74\n                                                                                                                       // 75\n@method _parseResponse                                                                                                 // 76\n@param {String} data                                                                                                   // 77\n*/                                                                                                                     // 78\nIpcProvider.prototype._parseResponse = function(data) {                                                                // 79\n    var _this = this,                                                                                                  // 80\n        returnValues = [];                                                                                             // 81\n                                                                                                                       // 82\n    // DE-CHUNKER                                                                                                      // 83\n    var dechunkedData = data                                                                                           // 84\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{                                                                        // 85\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{                                                                // 86\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{                                                                    // 87\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{                                                                    // 88\n        .split('|--|');                                                                                                // 89\n                                                                                                                       // 90\n    dechunkedData.forEach(function(data){                                                                              // 91\n                                                                                                                       // 92\n        // prepend the last chunk                                                                                      // 93\n        if(_this.lastChunk)                                                                                            // 94\n            data = _this.lastChunk + data;                                                                             // 95\n                                                                                                                       // 96\n        var result = null;                                                                                             // 97\n                                                                                                                       // 98\n        try {                                                                                                          // 99\n            result = JSON.parse(data);                                                                                 // 100\n                                                                                                                       // 101\n        } catch(e) {                                                                                                   // 102\n                                                                                                                       // 103\n            _this.lastChunk = data;                                                                                    // 104\n                                                                                                                       // 105\n            // start timeout to cancel all requests                                                                    // 106\n            clearTimeout(_this.lastChunkTimeout);                                                                      // 107\n            _this.lastChunkTimeout = setTimeout(function(){                                                            // 108\n                _this._timeout();                                                                                      // 109\n                throw errors.InvalidResponse(data);                                                                    // 110\n            }, 1000 * 15);                                                                                             // 111\n                                                                                                                       // 112\n            return;                                                                                                    // 113\n        }                                                                                                              // 114\n                                                                                                                       // 115\n        // cancel timeout and set chunk to null                                                                        // 116\n        clearTimeout(_this.lastChunkTimeout);                                                                          // 117\n        _this.lastChunk = null;                                                                                        // 118\n                                                                                                                       // 119\n        if(result)                                                                                                     // 120\n            returnValues.push(result);                                                                                 // 121\n    });                                                                                                                // 122\n                                                                                                                       // 123\n    return returnValues;                                                                                               // 124\n};                                                                                                                     // 125\n                                                                                                                       // 126\n                                                                                                                       // 127\n/**                                                                                                                    // 128\nGet the adds a callback to the responseCallbacks object,                                                               // 129\nwhich will be called if a response matching the response Id will arrive.                                               // 130\n                                                                                                                       // 131\n@method _addResponseCallback                                                                                           // 132\n*/                                                                                                                     // 133\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {                                             // 134\n    var id = payload.id || payload[0].id;                                                                              // 135\n    var method = payload.method || payload[0].method;                                                                  // 136\n                                                                                                                       // 137\n    this.responseCallbacks[id] = callback;                                                                             // 138\n    this.responseCallbacks[id].method = method;                                                                        // 139\n};                                                                                                                     // 140\n                                                                                                                       // 141\n/**                                                                                                                    // 142\nTimeout all requests when the end/error event is fired                                                                 // 143\n                                                                                                                       // 144\n@method _timeout                                                                                                       // 145\n*/                                                                                                                     // 146\nIpcProvider.prototype._timeout = function() {                                                                          // 147\n    for(var key in this.responseCallbacks) {                                                                           // 148\n        if(this.responseCallbacks.hasOwnProperty(key)){                                                                // 149\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));                                           // 150\n            delete this.responseCallbacks[key];                                                                        // 151\n        }                                                                                                              // 152\n    }                                                                                                                  // 153\n};                                                                                                                     // 154\n                                                                                                                       // 155\n                                                                                                                       // 156\n/**                                                                                                                    // 157\nCheck if the current connection is still valid.                                                                        // 158\n                                                                                                                       // 159\n@method isConnected                                                                                                    // 160\n*/                                                                                                                     // 161\nIpcProvider.prototype.isConnected = function() {                                                                       // 162\n    var _this = this;                                                                                                  // 163\n                                                                                                                       // 164\n    // try reconnect, when connection is gone                                                                          // 165\n    if(!_this.connection.writable)                                                                                     // 166\n        _this.connection.connect({path: _this.path});                                                                  // 167\n                                                                                                                       // 168\n    return !!this.connection.writable;                                                                                 // 169\n};                                                                                                                     // 170\n                                                                                                                       // 171\nIpcProvider.prototype.send = function (payload) {                                                                      // 172\n                                                                                                                       // 173\n    if(this.connection.writeSync) {                                                                                    // 174\n        var result;                                                                                                    // 175\n                                                                                                                       // 176\n        // try reconnect, when connection is gone                                                                      // 177\n        if(!this.connection.writable)                                                                                  // 178\n            this.connection.connect({path: this.path});                                                                // 179\n                                                                                                                       // 180\n        var data = this.connection.writeSync(JSON.stringify(payload));                                                 // 181\n                                                                                                                       // 182\n        try {                                                                                                          // 183\n            result = JSON.parse(data);                                                                                 // 184\n        } catch(e) {                                                                                                   // 185\n            throw errors.InvalidResponse(data);                                                                        // 186\n        }                                                                                                              // 187\n                                                                                                                       // 188\n        return result;                                                                                                 // 189\n                                                                                                                       // 190\n    } else {                                                                                                           // 191\n        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');\n    }                                                                                                                  // 193\n};                                                                                                                     // 194\n                                                                                                                       // 195\nIpcProvider.prototype.sendAsync = function (payload, callback) {                                                       // 196\n    // try reconnect, when connection is gone                                                                          // 197\n    if(!this.connection.writable)                                                                                      // 198\n        this.connection.connect({path: this.path});                                                                    // 199\n                                                                                                                       // 200\n                                                                                                                       // 201\n    this.connection.write(JSON.stringify(payload));                                                                    // 202\n    this._addResponseCallback(payload, callback);                                                                      // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\nmodule.exports = IpcProvider;                                                                                          // 206\n                                                                                                                       // 207\n                                                                                                                       // 208\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"utils\":{\"utils.js\":[\"bignumber.js\",\"./sha3.js\",\"utf8\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/utils/utils.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file utils.js                                                                                                      // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Utils                                                                                                               // 24\n *                                                                                                                     // 25\n * @module utils                                                                                                       // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Utility functions                                                                                                   // 30\n *                                                                                                                     // 31\n * @class [utils] utils                                                                                                // 32\n * @constructor                                                                                                        // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\n                                                                                                                       // 36\nvar BigNumber = require('bignumber.js');                                                                               // 37\nvar sha3 = require('./sha3.js');                                                                                       // 38\nvar utf8 = require('utf8');                                                                                            // 39\n                                                                                                                       // 40\nvar unitMap = {                                                                                                        // 41\n    'noether':      '0',                                                                                               // 42\n    'wei':          '1',                                                                                               // 43\n    'kwei':         '1000',                                                                                            // 44\n    'Kwei':         '1000',                                                                                            // 45\n    'babbage':      '1000',                                                                                            // 46\n    'femtoether':   '1000',                                                                                            // 47\n    'mwei':         '1000000',                                                                                         // 48\n    'Mwei':         '1000000',                                                                                         // 49\n    'lovelace':     '1000000',                                                                                         // 50\n    'picoether':    '1000000',                                                                                         // 51\n    'gwei':         '1000000000',                                                                                      // 52\n    'Gwei':         '1000000000',                                                                                      // 53\n    'shannon':      '1000000000',                                                                                      // 54\n    'nanoether':    '1000000000',                                                                                      // 55\n    'nano':         '1000000000',                                                                                      // 56\n    'szabo':        '1000000000000',                                                                                   // 57\n    'microether':   '1000000000000',                                                                                   // 58\n    'micro':        '1000000000000',                                                                                   // 59\n    'finney':       '1000000000000000',                                                                                // 60\n    'milliether':    '1000000000000000',                                                                               // 61\n    'milli':         '1000000000000000',                                                                               // 62\n    'ether':        '1000000000000000000',                                                                             // 63\n    'kether':       '1000000000000000000000',                                                                          // 64\n    'grand':        '1000000000000000000000',                                                                          // 65\n    'mether':       '1000000000000000000000000',                                                                       // 66\n    'gether':       '1000000000000000000000000000',                                                                    // 67\n    'tether':       '1000000000000000000000000000000'                                                                  // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * Should be called to pad string to expected length                                                                   // 72\n *                                                                                                                     // 73\n * @method padLeft                                                                                                     // 74\n * @param {String} string to be padded                                                                                 // 75\n * @param {Number} characters that result string should have                                                           // 76\n * @param {String} sign, by default 0                                                                                  // 77\n * @returns {String} right aligned string                                                                              // 78\n */                                                                                                                    // 79\nvar padLeft = function (string, chars, sign) {                                                                         // 80\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;                                      // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n/**                                                                                                                    // 84\n * Should be called to pad string to expected length                                                                   // 85\n *                                                                                                                     // 86\n * @method padRight                                                                                                    // 87\n * @param {String} string to be padded                                                                                 // 88\n * @param {Number} characters that result string should have                                                           // 89\n * @param {String} sign, by default 0                                                                                  // 90\n * @returns {String} right aligned string                                                                              // 91\n */                                                                                                                    // 92\nvar padRight = function (string, chars, sign) {                                                                        // 93\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));                                    // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\n/**                                                                                                                    // 97\n * Should be called to get utf8 from it's hex representation                                                           // 98\n *                                                                                                                     // 99\n * @method toUtf8                                                                                                      // 100\n * @param {String} string in hex                                                                                       // 101\n * @returns {String} ascii string representation of hex value                                                          // 102\n */                                                                                                                    // 103\nvar toUtf8 = function(hex) {                                                                                           // 104\n// Find termination                                                                                                    // 105\n    var str = \"\";                                                                                                      // 106\n    var i = 0, l = hex.length;                                                                                         // 107\n    if (hex.substring(0, 2) === '0x') {                                                                                // 108\n        i = 2;                                                                                                         // 109\n    }                                                                                                                  // 110\n    for (; i < l; i+=2) {                                                                                              // 111\n        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 112\n        if (code === 0)                                                                                                // 113\n            break;                                                                                                     // 114\n        str += String.fromCharCode(code);                                                                              // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    return utf8.decode(str);                                                                                           // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * Should be called to get ascii from it's hex representation                                                          // 122\n *                                                                                                                     // 123\n * @method toAscii                                                                                                     // 124\n * @param {String} string in hex                                                                                       // 125\n * @returns {String} ascii string representation of hex value                                                          // 126\n */                                                                                                                    // 127\nvar toAscii = function(hex) {                                                                                          // 128\n// Find termination                                                                                                    // 129\n    var str = \"\";                                                                                                      // 130\n    var i = 0, l = hex.length;                                                                                         // 131\n    if (hex.substring(0, 2) === '0x') {                                                                                // 132\n        i = 2;                                                                                                         // 133\n    }                                                                                                                  // 134\n    for (; i < l; i+=2) {                                                                                              // 135\n        var code = parseInt(hex.substr(i, 2), 16);                                                                     // 136\n        str += String.fromCharCode(code);                                                                              // 137\n    }                                                                                                                  // 138\n                                                                                                                       // 139\n    return str;                                                                                                        // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * Should be called to get hex representation (prefixed by 0x) of utf8 string                                          // 144\n *                                                                                                                     // 145\n * @method fromUtf8                                                                                                    // 146\n * @param {String} string                                                                                              // 147\n * @param {Number} optional padding                                                                                    // 148\n * @returns {String} hex representation of input string                                                                // 149\n */                                                                                                                    // 150\nvar fromUtf8 = function(str) {                                                                                         // 151\n    str = utf8.encode(str);                                                                                            // 152\n    var hex = \"\";                                                                                                      // 153\n    for(var i = 0; i < str.length; i++) {                                                                              // 154\n        var code = str.charCodeAt(i);                                                                                  // 155\n        if (code === 0)                                                                                                // 156\n            break;                                                                                                     // 157\n        var n = code.toString(16);                                                                                     // 158\n        hex += n.length < 2 ? '0' + n : n;                                                                             // 159\n    }                                                                                                                  // 160\n                                                                                                                       // 161\n    return \"0x\" + hex;                                                                                                 // 162\n};                                                                                                                     // 163\n                                                                                                                       // 164\n/**                                                                                                                    // 165\n * Should be called to get hex representation (prefixed by 0x) of ascii string                                         // 166\n *                                                                                                                     // 167\n * @method fromAscii                                                                                                   // 168\n * @param {String} string                                                                                              // 169\n * @param {Number} optional padding                                                                                    // 170\n * @returns {String} hex representation of input string                                                                // 171\n */                                                                                                                    // 172\nvar fromAscii = function(str) {                                                                                        // 173\n    var hex = \"\";                                                                                                      // 174\n    for(var i = 0; i < str.length; i++) {                                                                              // 175\n        var code = str.charCodeAt(i);                                                                                  // 176\n        var n = code.toString(16);                                                                                     // 177\n        hex += n.length < 2 ? '0' + n : n;                                                                             // 178\n    }                                                                                                                  // 179\n                                                                                                                       // 180\n    return \"0x\" + hex;                                                                                                 // 181\n};                                                                                                                     // 182\n                                                                                                                       // 183\n/**                                                                                                                    // 184\n * Should be used to create full function/event name from json abi                                                     // 185\n *                                                                                                                     // 186\n * @method transformToFullName                                                                                         // 187\n * @param {Object} json-abi                                                                                            // 188\n * @return {String} full fnction/event name                                                                            // 189\n */                                                                                                                    // 190\nvar transformToFullName = function (json) {                                                                            // 191\n    if (json.name.indexOf('(') !== -1) {                                                                               // 192\n        return json.name;                                                                                              // 193\n    }                                                                                                                  // 194\n                                                                                                                       // 195\n    var typeName = json.inputs.map(function(i){return i.type; }).join();                                               // 196\n    return json.name + '(' + typeName + ')';                                                                           // 197\n};                                                                                                                     // 198\n                                                                                                                       // 199\n/**                                                                                                                    // 200\n * Should be called to get display name of contract function                                                           // 201\n *                                                                                                                     // 202\n * @method extractDisplayName                                                                                          // 203\n * @param {String} name of function/event                                                                              // 204\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply                                 // 205\n */                                                                                                                    // 206\nvar extractDisplayName = function (name) {                                                                             // 207\n    var length = name.indexOf('(');                                                                                    // 208\n    return length !== -1 ? name.substr(0, length) : name;                                                              // 209\n};                                                                                                                     // 210\n                                                                                                                       // 211\n/// @returns overloaded part of function/event name                                                                    // 212\nvar extractTypeName = function (name) {                                                                                // 213\n    /// TODO: make it invulnerable                                                                                     // 214\n    var length = name.indexOf('(');                                                                                    // 215\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";              // 216\n};                                                                                                                     // 217\n                                                                                                                       // 218\n/**                                                                                                                    // 219\n * Converts value to it's decimal representation in string                                                             // 220\n *                                                                                                                     // 221\n * @method toDecimal                                                                                                   // 222\n * @param {String|Number|BigNumber}                                                                                    // 223\n * @return {String}                                                                                                    // 224\n */                                                                                                                    // 225\nvar toDecimal = function (value) {                                                                                     // 226\n    return toBigNumber(value).toNumber();                                                                              // 227\n};                                                                                                                     // 228\n                                                                                                                       // 229\n/**                                                                                                                    // 230\n * Converts value to it's hex representation                                                                           // 231\n *                                                                                                                     // 232\n * @method fromDecimal                                                                                                 // 233\n * @param {String|Number|BigNumber}                                                                                    // 234\n * @return {String}                                                                                                    // 235\n */                                                                                                                    // 236\nvar fromDecimal = function (value) {                                                                                   // 237\n    var number = toBigNumber(value);                                                                                   // 238\n    var result = number.toString(16);                                                                                  // 239\n                                                                                                                       // 240\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;                                              // 241\n};                                                                                                                     // 242\n                                                                                                                       // 243\n/**                                                                                                                    // 244\n * Auto converts any given value into it's hex representation.                                                         // 245\n *                                                                                                                     // 246\n * And even stringifys objects before.                                                                                 // 247\n *                                                                                                                     // 248\n * @method toHex                                                                                                       // 249\n * @param {String|Number|BigNumber|Object}                                                                             // 250\n * @return {String}                                                                                                    // 251\n */                                                                                                                    // 252\nvar toHex = function (val) {                                                                                           // 253\n    /*jshint maxcomplexity: 8 */                                                                                       // 254\n                                                                                                                       // 255\n    if (isBoolean(val))                                                                                                // 256\n        return fromDecimal(+val);                                                                                      // 257\n                                                                                                                       // 258\n    if (isBigNumber(val))                                                                                              // 259\n        return fromDecimal(val);                                                                                       // 260\n                                                                                                                       // 261\n    if (isObject(val))                                                                                                 // 262\n        return fromUtf8(JSON.stringify(val));                                                                          // 263\n                                                                                                                       // 264\n    // if its a negative number, pass it through fromDecimal                                                           // 265\n    if (isString(val)) {                                                                                               // 266\n        if (val.indexOf('-0x') === 0)                                                                                  // 267\n            return fromDecimal(val);                                                                                   // 268\n        else if(val.indexOf('0x') === 0)                                                                               // 269\n            return val;                                                                                                // 270\n        else if (!isFinite(val))                                                                                       // 271\n            return fromAscii(val);                                                                                     // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    return fromDecimal(val);                                                                                           // 275\n};                                                                                                                     // 276\n                                                                                                                       // 277\n/**                                                                                                                    // 278\n * Returns value of unit in Wei                                                                                        // 279\n *                                                                                                                     // 280\n * @method getValueOfUnit                                                                                              // 281\n * @param {String} unit the unit to convert to, default ether                                                          // 282\n * @returns {BigNumber} value of the unit (in Wei)                                                                     // 283\n * @throws error if the unit is not correct:w                                                                          // 284\n */                                                                                                                    // 285\nvar getValueOfUnit = function (unit) {                                                                                 // 286\n    unit = unit ? unit.toLowerCase() : 'ether';                                                                        // 287\n    var unitValue = unitMap[unit];                                                                                     // 288\n    if (unitValue === undefined) {                                                                                     // 289\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }                                                                                                                  // 291\n    return new BigNumber(unitValue, 10);                                                                               // 292\n};                                                                                                                     // 293\n                                                                                                                       // 294\n/**                                                                                                                    // 295\n * Takes a number of wei and converts it to any other ether unit.                                                      // 296\n *                                                                                                                     // 297\n * Possible units are:                                                                                                 // 298\n *   SI Short   SI Full        Effigy       Other                                                                      // 299\n * - kwei       femtoether     babbage                                                                                 // 300\n * - mwei       picoether      lovelace                                                                                // 301\n * - gwei       nanoether      shannon      nano                                                                       // 302\n * - --         microether     szabo        micro                                                                      // 303\n * - --         milliether     finney       milli                                                                      // 304\n * - ether      --             --                                                                                      // 305\n * - kether                    --           grand                                                                      // 306\n * - mether                                                                                                            // 307\n * - gether                                                                                                            // 308\n * - tether                                                                                                            // 309\n *                                                                                                                     // 310\n * @method fromWei                                                                                                     // 311\n * @param {Number|String} number can be a number, number string or a HEX of a decimal                                  // 312\n * @param {String} unit the unit to convert to, default ether                                                          // 313\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 314\n*/                                                                                                                     // 315\nvar fromWei = function(number, unit) {                                                                                 // 316\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));                                             // 317\n                                                                                                                       // 318\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 319\n};                                                                                                                     // 320\n                                                                                                                       // 321\n/**                                                                                                                    // 322\n * Takes a number of a unit and converts it to wei.                                                                    // 323\n *                                                                                                                     // 324\n * Possible units are:                                                                                                 // 325\n *   SI Short   SI Full        Effigy       Other                                                                      // 326\n * - kwei       femtoether     babbage                                                                                 // 327\n * - mwei       picoether      lovelace                                                                                // 328\n * - gwei       nanoether      shannon      nano                                                                       // 329\n * - --         microether     szabo        micro                                                                      // 330\n * - --         microether     szabo        micro                                                                      // 331\n * - --         milliether     finney       milli                                                                      // 332\n * - ether      --             --                                                                                      // 333\n * - kether                    --           grand                                                                      // 334\n * - mether                                                                                                            // 335\n * - gether                                                                                                            // 336\n * - tether                                                                                                            // 337\n *                                                                                                                     // 338\n * @method toWei                                                                                                       // 339\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal                        // 340\n * @param {String} unit the unit to convert from, default ether                                                        // 341\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number                    // 342\n*/                                                                                                                     // 343\nvar toWei = function(number, unit) {                                                                                   // 344\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));                                                 // 345\n                                                                                                                       // 346\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);                                               // 347\n};                                                                                                                     // 348\n                                                                                                                       // 349\n/**                                                                                                                    // 350\n * Takes an input and transforms it into an bignumber                                                                  // 351\n *                                                                                                                     // 352\n * @method toBigNumber                                                                                                 // 353\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber                                          // 354\n * @return {BigNumber} BigNumber                                                                                       // 355\n*/                                                                                                                     // 356\nvar toBigNumber = function(number) {                                                                                   // 357\n    /*jshint maxcomplexity:5 */                                                                                        // 358\n    number = number || 0;                                                                                              // 359\n    if (isBigNumber(number))                                                                                           // 360\n        return number;                                                                                                 // 361\n                                                                                                                       // 362\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {                             // 363\n        return new BigNumber(number.replace('0x',''), 16);                                                             // 364\n    }                                                                                                                  // 365\n                                                                                                                       // 366\n    return new BigNumber(number.toString(10), 10);                                                                     // 367\n};                                                                                                                     // 368\n                                                                                                                       // 369\n/**                                                                                                                    // 370\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement                     // 371\n *                                                                                                                     // 372\n * @method toTwosComplement                                                                                            // 373\n * @param {Number|String|BigNumber}                                                                                    // 374\n * @return {BigNumber}                                                                                                 // 375\n */                                                                                                                    // 376\nvar toTwosComplement = function (number) {                                                                             // 377\n    var bigNumber = toBigNumber(number);                                                                               // 378\n    if (bigNumber.lessThan(0)) {                                                                                       // 379\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }                                                                                                                  // 381\n    return bigNumber;                                                                                                  // 382\n};                                                                                                                     // 383\n                                                                                                                       // 384\n/**                                                                                                                    // 385\n * Checks if the given string is strictly an address                                                                   // 386\n *                                                                                                                     // 387\n * @method isStrictAddress                                                                                             // 388\n * @param {String} address the given HEX adress                                                                        // 389\n * @return {Boolean}                                                                                                   // 390\n*/                                                                                                                     // 391\nvar isStrictAddress = function (address) {                                                                             // 392\n    return /^0x[0-9a-f]{40}$/i.test(address);                                                                          // 393\n};                                                                                                                     // 394\n                                                                                                                       // 395\n/**                                                                                                                    // 396\n * Checks if the given string is an address                                                                            // 397\n *                                                                                                                     // 398\n * @method isAddress                                                                                                   // 399\n * @param {String} address the given HEX adress                                                                        // 400\n * @return {Boolean}                                                                                                   // 401\n*/                                                                                                                     // 402\nvar isAddress = function (address) {                                                                                   // 403\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {                                                                       // 404\n        // check if it has the basic requirements of an address                                                        // 405\n        return false;                                                                                                  // 406\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {                           // 407\n        // If it's all small caps or all all caps, return true                                                         // 408\n        return true;                                                                                                   // 409\n    } else {                                                                                                           // 410\n        // Otherwise check each case                                                                                   // 411\n        return isChecksumAddress(address);                                                                             // 412\n    }                                                                                                                  // 413\n};                                                                                                                     // 414\n                                                                                                                       // 415\n                                                                                                                       // 416\n                                                                                                                       // 417\n/**                                                                                                                    // 418\n * Checks if the given string is a checksummed address                                                                 // 419\n *                                                                                                                     // 420\n * @method isChecksumAddress                                                                                           // 421\n * @param {String} address the given HEX adress                                                                        // 422\n * @return {Boolean}                                                                                                   // 423\n*/                                                                                                                     // 424\nvar isChecksumAddress = function (address) {                                                                           // 425\n    // Check each case                                                                                                 // 426\n    address = address.replace('0x','');                                                                                // 427\n    var addressHash = sha3(address.toLowerCase());                                                                     // 428\n                                                                                                                       // 429\n    for (var i = 0; i < 40; i++ ) {                                                                                    // 430\n        // the nth letter should be uppercase if the nth digit of casemap is 1                                         // 431\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;                                                                                              // 433\n        }                                                                                                              // 434\n    }                                                                                                                  // 435\n    return true;                                                                                                       // 436\n};                                                                                                                     // 437\n                                                                                                                       // 438\n                                                                                                                       // 439\n                                                                                                                       // 440\n/**                                                                                                                    // 441\n * Makes a checksum address                                                                                            // 442\n *                                                                                                                     // 443\n * @method toChecksumAddress                                                                                           // 444\n * @param {String} address the given HEX adress                                                                        // 445\n * @return {String}                                                                                                    // 446\n*/                                                                                                                     // 447\nvar toChecksumAddress = function (address) {                                                                           // 448\n    if (typeof address === 'undefined') return '';                                                                     // 449\n                                                                                                                       // 450\n    address = address.toLowerCase().replace('0x','');                                                                  // 451\n    var addressHash = sha3(address);                                                                                   // 452\n    var checksumAddress = '0x';                                                                                        // 453\n                                                                                                                       // 454\n    for (var i = 0; i < address.length; i++ ) {                                                                        // 455\n        // If ith character is 9 to f then make it uppercase                                                           // 456\n        if (parseInt(addressHash[i], 16) > 7) {                                                                        // 457\n          checksumAddress += address[i].toUpperCase();                                                                 // 458\n        } else {                                                                                                       // 459\n            checksumAddress += address[i];                                                                             // 460\n        }                                                                                                              // 461\n    }                                                                                                                  // 462\n    return checksumAddress;                                                                                            // 463\n};                                                                                                                     // 464\n                                                                                                                       // 465\n/**                                                                                                                    // 466\n * Transforms given string to valid 20 bytes-length addres with 0x prefix                                              // 467\n *                                                                                                                     // 468\n * @method toAddress                                                                                                   // 469\n * @param {String} address                                                                                             // 470\n * @return {String} formatted address                                                                                  // 471\n */                                                                                                                    // 472\nvar toAddress = function (address) {                                                                                   // 473\n    if (isStrictAddress(address)) {                                                                                    // 474\n        return address;                                                                                                // 475\n    }                                                                                                                  // 476\n                                                                                                                       // 477\n    if (/^[0-9a-f]{40}$/.test(address)) {                                                                              // 478\n        return '0x' + address;                                                                                         // 479\n    }                                                                                                                  // 480\n                                                                                                                       // 481\n    return '0x' + padLeft(toHex(address).substr(2), 40);                                                               // 482\n};                                                                                                                     // 483\n                                                                                                                       // 484\n/**                                                                                                                    // 485\n * Returns true if object is BigNumber, otherwise false                                                                // 486\n *                                                                                                                     // 487\n * @method isBigNumber                                                                                                 // 488\n * @param {Object}                                                                                                     // 489\n * @return {Boolean}                                                                                                   // 490\n */                                                                                                                    // 491\nvar isBigNumber = function (object) {                                                                                  // 492\n    return object instanceof BigNumber ||                                                                              // 493\n        (object && object.constructor && object.constructor.name === 'BigNumber');                                     // 494\n};                                                                                                                     // 495\n                                                                                                                       // 496\n/**                                                                                                                    // 497\n * Returns true if object is string, otherwise false                                                                   // 498\n *                                                                                                                     // 499\n * @method isString                                                                                                    // 500\n * @param {Object}                                                                                                     // 501\n * @return {Boolean}                                                                                                   // 502\n */                                                                                                                    // 503\nvar isString = function (object) {                                                                                     // 504\n    return typeof object === 'string' ||                                                                               // 505\n        (object && object.constructor && object.constructor.name === 'String');                                        // 506\n};                                                                                                                     // 507\n                                                                                                                       // 508\n/**                                                                                                                    // 509\n * Returns true if object is function, otherwise false                                                                 // 510\n *                                                                                                                     // 511\n * @method isFunction                                                                                                  // 512\n * @param {Object}                                                                                                     // 513\n * @return {Boolean}                                                                                                   // 514\n */                                                                                                                    // 515\nvar isFunction = function (object) {                                                                                   // 516\n    return typeof object === 'function';                                                                               // 517\n};                                                                                                                     // 518\n                                                                                                                       // 519\n/**                                                                                                                    // 520\n * Returns true if object is Objet, otherwise false                                                                    // 521\n *                                                                                                                     // 522\n * @method isObject                                                                                                    // 523\n * @param {Object}                                                                                                     // 524\n * @return {Boolean}                                                                                                   // 525\n */                                                                                                                    // 526\nvar isObject = function (object) {                                                                                     // 527\n    return typeof object === 'object';                                                                                 // 528\n};                                                                                                                     // 529\n                                                                                                                       // 530\n/**                                                                                                                    // 531\n * Returns true if object is boolean, otherwise false                                                                  // 532\n *                                                                                                                     // 533\n * @method isBoolean                                                                                                   // 534\n * @param {Object}                                                                                                     // 535\n * @return {Boolean}                                                                                                   // 536\n */                                                                                                                    // 537\nvar isBoolean = function (object) {                                                                                    // 538\n    return typeof object === 'boolean';                                                                                // 539\n};                                                                                                                     // 540\n                                                                                                                       // 541\n/**                                                                                                                    // 542\n * Returns true if object is array, otherwise false                                                                    // 543\n *                                                                                                                     // 544\n * @method isArray                                                                                                     // 545\n * @param {Object}                                                                                                     // 546\n * @return {Boolean}                                                                                                   // 547\n */                                                                                                                    // 548\nvar isArray = function (object) {                                                                                      // 549\n    return object instanceof Array;                                                                                    // 550\n};                                                                                                                     // 551\n                                                                                                                       // 552\n/**                                                                                                                    // 553\n * Returns true if given string is valid json object                                                                   // 554\n *                                                                                                                     // 555\n * @method isJson                                                                                                      // 556\n * @param {String}                                                                                                     // 557\n * @return {Boolean}                                                                                                   // 558\n */                                                                                                                    // 559\nvar isJson = function (str) {                                                                                          // 560\n    try {                                                                                                              // 561\n        return !!JSON.parse(str);                                                                                      // 562\n    } catch (e) {                                                                                                      // 563\n        return false;                                                                                                  // 564\n    }                                                                                                                  // 565\n};                                                                                                                     // 566\n                                                                                                                       // 567\nmodule.exports = {                                                                                                     // 568\n    padLeft: padLeft,                                                                                                  // 569\n    padRight: padRight,                                                                                                // 570\n    toHex: toHex,                                                                                                      // 571\n    toDecimal: toDecimal,                                                                                              // 572\n    fromDecimal: fromDecimal,                                                                                          // 573\n    toUtf8: toUtf8,                                                                                                    // 574\n    toAscii: toAscii,                                                                                                  // 575\n    fromUtf8: fromUtf8,                                                                                                // 576\n    fromAscii: fromAscii,                                                                                              // 577\n    transformToFullName: transformToFullName,                                                                          // 578\n    extractDisplayName: extractDisplayName,                                                                            // 579\n    extractTypeName: extractTypeName,                                                                                  // 580\n    toWei: toWei,                                                                                                      // 581\n    fromWei: fromWei,                                                                                                  // 582\n    toBigNumber: toBigNumber,                                                                                          // 583\n    toTwosComplement: toTwosComplement,                                                                                // 584\n    toAddress: toAddress,                                                                                              // 585\n    isBigNumber: isBigNumber,                                                                                          // 586\n    isStrictAddress: isStrictAddress,                                                                                  // 587\n    isAddress: isAddress,                                                                                              // 588\n    isChecksumAddress: isChecksumAddress,                                                                              // 589\n    toChecksumAddress: toChecksumAddress,                                                                              // 590\n    isFunction: isFunction,                                                                                            // 591\n    isString: isString,                                                                                                // 592\n    isObject: isObject,                                                                                                // 593\n    isBoolean: isBoolean,                                                                                              // 594\n    isArray: isArray,                                                                                                  // 595\n    isJson: isJson                                                                                                     // 596\n};                                                                                                                     // 597\n                                                                                                                       // 598\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"sha3.js\":[\"crypto-js\",\"crypto-js/sha3\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/utils/sha3.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file sha3.js                                                                                                       // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar CryptoJS = require('crypto-js');                                                                                   // 23\nvar sha3 = require('crypto-js/sha3');                                                                                  // 24\n                                                                                                                       // 25\nmodule.exports = function (value, options) {                                                                           // 26\n    if (options && options.encoding === 'hex') {                                                                       // 27\n        if (value.length > 2 && value.substr(0, 2) === '0x') {                                                         // 28\n            value = value.substr(2);                                                                                   // 29\n        }                                                                                                              // 30\n        value = CryptoJS.enc.Hex.parse(value);                                                                         // 31\n    }                                                                                                                  // 32\n                                                                                                                       // 33\n    return sha3(value, {                                                                                               // 34\n        outputLength: 256                                                                                              // 35\n    }).toString();                                                                                                     // 36\n};                                                                                                                     // 37\n                                                                                                                       // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"config.js\":[\"bignumber.js\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/utils/config.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/** @file config.js                                                                                                    // 17\n * @authors:                                                                                                           // 18\n *   Marek Kotewicz <marek@ethdev.com>                                                                                 // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Utils                                                                                                               // 24\n *                                                                                                                     // 25\n * @module utils                                                                                                       // 26\n */                                                                                                                    // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Utility functions                                                                                                   // 30\n *                                                                                                                     // 31\n * @class [utils] config                                                                                               // 32\n * @constructor                                                                                                        // 33\n */                                                                                                                    // 34\n                                                                                                                       // 35\n                                                                                                                       // 36\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE                                                                     // 37\nvar BigNumber = require('bignumber.js');                                                                               // 38\n                                                                                                                       // 39\nvar ETH_UNITS = [                                                                                                      // 40\n    'wei',                                                                                                             // 41\n    'kwei',                                                                                                            // 42\n    'Mwei',                                                                                                            // 43\n    'Gwei',                                                                                                            // 44\n    'szabo',                                                                                                           // 45\n    'finney',                                                                                                          // 46\n    'femtoether',                                                                                                      // 47\n    'picoether',                                                                                                       // 48\n    'nanoether',                                                                                                       // 49\n    'microether',                                                                                                      // 50\n    'milliether',                                                                                                      // 51\n    'nano',                                                                                                            // 52\n    'micro',                                                                                                           // 53\n    'milli',                                                                                                           // 54\n    'ether',                                                                                                           // 55\n    'grand',                                                                                                           // 56\n    'Mether',                                                                                                          // 57\n    'Gether',                                                                                                          // 58\n    'Tether',                                                                                                          // 59\n    'Pether',                                                                                                          // 60\n    'Eether',                                                                                                          // 61\n    'Zether',                                                                                                          // 62\n    'Yether',                                                                                                          // 63\n    'Nether',                                                                                                          // 64\n    'Dether',                                                                                                          // 65\n    'Vether',                                                                                                          // 66\n    'Uether'                                                                                                           // 67\n];                                                                                                                     // 68\n                                                                                                                       // 69\nmodule.exports = {                                                                                                     // 70\n    ETH_PADDING: 32,                                                                                                   // 71\n    ETH_SIGNATURE_LENGTH: 4,                                                                                           // 72\n    ETH_UNITS: ETH_UNITS,                                                                                              // 73\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },                                              // 74\n    ETH_POLLING_TIMEOUT: 1000/2,                                                                                       // 75\n    defaultBlock: 'latest',                                                                                            // 76\n    defaultAccount: undefined                                                                                          // 77\n};                                                                                                                     // 78\n                                                                                                                       // 79\n                                                                                                                       // 80\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"solidity\":{\"coder.js\":[\"./formatters\",\"./address\",\"./bool\",\"./int\",\"./uint\",\"./dynamicbytes\",\"./string\",\"./real\",\"./ureal\",\"./bytes\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/coder.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file coder.js                                                                                                      // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar f = require('./formatters');                                                                                       // 23\n                                                                                                                       // 24\nvar SolidityTypeAddress = require('./address');                                                                        // 25\nvar SolidityTypeBool = require('./bool');                                                                              // 26\nvar SolidityTypeInt = require('./int');                                                                                // 27\nvar SolidityTypeUInt = require('./uint');                                                                              // 28\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');                                                              // 29\nvar SolidityTypeString = require('./string');                                                                          // 30\nvar SolidityTypeReal = require('./real');                                                                              // 31\nvar SolidityTypeUReal = require('./ureal');                                                                            // 32\nvar SolidityTypeBytes = require('./bytes');                                                                            // 33\n                                                                                                                       // 34\n/**                                                                                                                    // 35\n * SolidityCoder prototype should be used to encode/decode solidity params of any type                                 // 36\n */                                                                                                                    // 37\nvar SolidityCoder = function (types) {                                                                                 // 38\n    this._types = types;                                                                                               // 39\n};                                                                                                                     // 40\n                                                                                                                       // 41\n/**                                                                                                                    // 42\n * This method should be used to transform type to SolidityType                                                        // 43\n *                                                                                                                     // 44\n * @method _requireType                                                                                                // 45\n * @param {String} type                                                                                                // 46\n * @returns {SolidityType}                                                                                             // 47\n * @throws {Error} throws if no matching type is found                                                                 // 48\n */                                                                                                                    // 49\nSolidityCoder.prototype._requireType = function (type) {                                                               // 50\n    var solidityType = this._types.filter(function (t) {                                                               // 51\n        return t.isType(type);                                                                                         // 52\n    })[0];                                                                                                             // 53\n                                                                                                                       // 54\n    if (!solidityType) {                                                                                               // 55\n        throw Error('invalid solidity type!: ' + type);                                                                // 56\n    }                                                                                                                  // 57\n                                                                                                                       // 58\n    return solidityType;                                                                                               // 59\n};                                                                                                                     // 60\n                                                                                                                       // 61\n/**                                                                                                                    // 62\n * Should be used to encode plain param                                                                                // 63\n *                                                                                                                     // 64\n * @method encodeParam                                                                                                 // 65\n * @param {String} type                                                                                                // 66\n * @param {Object} plain param                                                                                         // 67\n * @return {String} encoded plain param                                                                                // 68\n */                                                                                                                    // 69\nSolidityCoder.prototype.encodeParam = function (type, param) {                                                         // 70\n    return this.encodeParams([type], [param]);                                                                         // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * Should be used to encode list of params                                                                             // 75\n *                                                                                                                     // 76\n * @method encodeParams                                                                                                // 77\n * @param {Array} types                                                                                                // 78\n * @param {Array} params                                                                                               // 79\n * @return {String} encoded list of params                                                                             // 80\n */                                                                                                                    // 81\nSolidityCoder.prototype.encodeParams = function (types, params) {                                                      // 82\n    var solidityTypes = this.getSolidityTypes(types);                                                                  // 83\n                                                                                                                       // 84\n    var encodeds = solidityTypes.map(function (solidityType, index) {                                                  // 85\n        return solidityType.encode(params[index], types[index]);                                                       // 86\n    });                                                                                                                // 87\n                                                                                                                       // 88\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {                                     // 89\n        var staticPartLength = solidityType.staticPartLength(types[index]);                                            // 90\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;                                   // 91\n        return acc + roundedStaticPartLength;                                                                          // 92\n    }, 0);                                                                                                             // 93\n                                                                                                                       // 94\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);                            // 95\n                                                                                                                       // 96\n    return result;                                                                                                     // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {             // 100\n    var result = \"\";                                                                                                   // 101\n    var self = this;                                                                                                   // 102\n                                                                                                                       // 103\n    var isDynamic = function (i) {                                                                                     // 104\n       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);                   // 105\n    };                                                                                                                 // 106\n                                                                                                                       // 107\n    types.forEach(function (type, i) {                                                                                 // 108\n        if (isDynamic(i)) {                                                                                            // 109\n            result += f.formatInputInt(dynamicOffset).encode();                                                        // 110\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 111\n            dynamicOffset += e.length / 2;                                                                             // 112\n        } else {                                                                                                       // 113\n            // don't add length to dynamicOffset. it's already counted                                                 // 114\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                   // 115\n        }                                                                                                              // 116\n                                                                                                                       // 117\n        // TODO: figure out nested arrays                                                                              // 118\n    });                                                                                                                // 119\n                                                                                                                       // 120\n    types.forEach(function (type, i) {                                                                                 // 121\n        if (isDynamic(i)) {                                                                                            // 122\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);                     // 123\n            dynamicOffset += e.length / 2;                                                                             // 124\n            result += e;                                                                                               // 125\n        }                                                                                                              // 126\n    });                                                                                                                // 127\n    return result;                                                                                                     // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n// TODO: refactor whole encoding!                                                                                      // 131\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {                            // 132\n    var self = this;                                                                                                   // 133\n    if (solidityType.isDynamicArray(type)) {                                                                           // 134\n        return (function () {                                                                                          // 135\n            // offset was already set                                                                                  // 136\n            var nestedName = solidityType.nestedName(type);                                                            // 137\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 138\n            var result = encoded[0];                                                                                   // 139\n                                                                                                                       // 140\n            (function () {                                                                                             // 141\n                var previousLength = 2; // in int                                                                      // 142\n                if (solidityType.isDynamicArray(nestedName)) {                                                         // 143\n                    for (var i = 1; i < encoded.length; i++) {                                                         // 144\n                        previousLength += +(encoded[i - 1])[0] || 0;                                                   // 145\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }                                                                                                  // 147\n                }                                                                                                      // 148\n            })();                                                                                                      // 149\n                                                                                                                       // 150\n            // first element is length, skip it                                                                        // 151\n            (function () {                                                                                             // 152\n                for (var i = 0; i < encoded.length - 1; i++) {                                                         // 153\n                    var additionalOffset = result / 2;                                                                 // 154\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }                                                                                                      // 156\n            })();                                                                                                      // 157\n                                                                                                                       // 158\n            return result;                                                                                             // 159\n        })();                                                                                                          // 160\n                                                                                                                       // 161\n    } else if (solidityType.isStaticArray(type)) {                                                                     // 162\n        return (function () {                                                                                          // 163\n            var nestedName = solidityType.nestedName(type);                                                            // 164\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);                                    // 165\n            var result = \"\";                                                                                           // 166\n                                                                                                                       // 167\n                                                                                                                       // 168\n            if (solidityType.isDynamicArray(nestedName)) {                                                             // 169\n                (function () {                                                                                         // 170\n                    var previousLength = 0; // in int                                                                  // 171\n                    for (var i = 0; i < encoded.length; i++) {                                                         // 172\n                        // calculate length of previous item                                                           // 173\n                        previousLength += +(encoded[i - 1] || [])[0] || 0;                                             // 174\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }                                                                                                  // 176\n                })();                                                                                                  // 177\n            }                                                                                                          // 178\n                                                                                                                       // 179\n            (function () {                                                                                             // 180\n                for (var i = 0; i < encoded.length; i++) {                                                             // 181\n                    var additionalOffset = result / 2;                                                                 // 182\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);  // 183\n                }                                                                                                      // 184\n            })();                                                                                                      // 185\n                                                                                                                       // 186\n            return result;                                                                                             // 187\n        })();                                                                                                          // 188\n    }                                                                                                                  // 189\n                                                                                                                       // 190\n    return encoded;                                                                                                    // 191\n};                                                                                                                     // 192\n                                                                                                                       // 193\n/**                                                                                                                    // 194\n * Should be used to decode bytes to plain param                                                                       // 195\n *                                                                                                                     // 196\n * @method decodeParam                                                                                                 // 197\n * @param {String} type                                                                                                // 198\n * @param {String} bytes                                                                                               // 199\n * @return {Object} plain param                                                                                        // 200\n */                                                                                                                    // 201\nSolidityCoder.prototype.decodeParam = function (type, bytes) {                                                         // 202\n    return this.decodeParams([type], bytes)[0];                                                                        // 203\n};                                                                                                                     // 204\n                                                                                                                       // 205\n/**                                                                                                                    // 206\n * Should be used to decode list of params                                                                             // 207\n *                                                                                                                     // 208\n * @method decodeParam                                                                                                 // 209\n * @param {Array} types                                                                                                // 210\n * @param {String} bytes                                                                                               // 211\n * @return {Array} array of plain params                                                                               // 212\n */                                                                                                                    // 213\nSolidityCoder.prototype.decodeParams = function (types, bytes) {                                                       // 214\n    var solidityTypes = this.getSolidityTypes(types);                                                                  // 215\n    var offsets = this.getOffsets(types, solidityTypes);                                                               // 216\n                                                                                                                       // 217\n    return solidityTypes.map(function (solidityType, index) {                                                          // 218\n        return solidityType.decode(bytes, offsets[index],  types[index], index);                                       // 219\n    });                                                                                                                // 220\n};                                                                                                                     // 221\n                                                                                                                       // 222\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {                                                 // 223\n    var lengths =  solidityTypes.map(function (solidityType, index) {                                                  // 224\n        return solidityType.staticPartLength(types[index]);                                                            // 225\n    });                                                                                                                // 226\n                                                                                                                       // 227\n    for (var i = 1; i < lengths.length; i++) {                                                                         // 228\n         // sum with length of previous element                                                                        // 229\n        lengths[i] += lengths[i - 1];                                                                                  // 230\n    }                                                                                                                  // 231\n                                                                                                                       // 232\n    return lengths.map(function (length, index) {                                                                      // 233\n        // remove the current length, so the length is sum of previous elements                                        // 234\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);                                    // 235\n        return length - staticPartLength;                                                                              // 236\n    });                                                                                                                // 237\n};                                                                                                                     // 238\n                                                                                                                       // 239\nSolidityCoder.prototype.getSolidityTypes = function (types) {                                                          // 240\n    var self = this;                                                                                                   // 241\n    return types.map(function (type) {                                                                                 // 242\n        return self._requireType(type);                                                                                // 243\n    });                                                                                                                // 244\n};                                                                                                                     // 245\n                                                                                                                       // 246\nvar coder = new SolidityCoder([                                                                                        // 247\n    new SolidityTypeAddress(),                                                                                         // 248\n    new SolidityTypeBool(),                                                                                            // 249\n    new SolidityTypeInt(),                                                                                             // 250\n    new SolidityTypeUInt(),                                                                                            // 251\n    new SolidityTypeDynamicBytes(),                                                                                    // 252\n    new SolidityTypeBytes(),                                                                                           // 253\n    new SolidityTypeString(),                                                                                          // 254\n    new SolidityTypeReal(),                                                                                            // 255\n    new SolidityTypeUReal()                                                                                            // 256\n]);                                                                                                                    // 257\n                                                                                                                       // 258\nmodule.exports = coder;                                                                                                // 259\n                                                                                                                       // 260\n                                                                                                                       // 261\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"formatters.js\":[\"bignumber.js\",\"../utils/utils\",\"../utils/config\",\"./param\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/formatters.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file formatters.js                                                                                                 // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar BigNumber = require('bignumber.js');                                                                               // 23\nvar utils = require('../utils/utils');                                                                                 // 24\nvar c = require('../utils/config');                                                                                    // 25\nvar SolidityParam = require('./param');                                                                                // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\n/**                                                                                                                    // 29\n * Formats input value to byte representation of int                                                                   // 30\n * If value is negative, return it's two's complement                                                                  // 31\n * If the value is floating point, round it down                                                                       // 32\n *                                                                                                                     // 33\n * @method formatInputInt                                                                                              // 34\n * @param {String|Number|BigNumber} value that needs to be formatted                                                   // 35\n * @returns {SolidityParam}                                                                                            // 36\n */                                                                                                                    // 37\nvar formatInputInt = function (value) {                                                                                // 38\n    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);                                                                   // 39\n    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);                                // 40\n    return new SolidityParam(result);                                                                                  // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * Formats input bytes                                                                                                 // 45\n *                                                                                                                     // 46\n * @method formatInputBytes                                                                                            // 47\n * @param {String}                                                                                                     // 48\n * @returns {SolidityParam}                                                                                            // 49\n */                                                                                                                    // 50\nvar formatInputBytes = function (value) {                                                                              // 51\n    var result = utils.toHex(value).substr(2);                                                                         // 52\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 53\n    result = utils.padRight(result, l * 64);                                                                           // 54\n    return new SolidityParam(result);                                                                                  // 55\n};                                                                                                                     // 56\n                                                                                                                       // 57\n/**                                                                                                                    // 58\n * Formats input bytes                                                                                                 // 59\n *                                                                                                                     // 60\n * @method formatDynamicInputBytes                                                                                     // 61\n * @param {String}                                                                                                     // 62\n * @returns {SolidityParam}                                                                                            // 63\n */                                                                                                                    // 64\nvar formatInputDynamicBytes = function (value) {                                                                       // 65\n    var result = utils.toHex(value).substr(2);                                                                         // 66\n    var length = result.length / 2;                                                                                    // 67\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 68\n    result = utils.padRight(result, l * 64);                                                                           // 69\n    return new SolidityParam(formatInputInt(length).value + result);                                                   // 70\n};                                                                                                                     // 71\n                                                                                                                       // 72\n/**                                                                                                                    // 73\n * Formats input value to byte representation of string                                                                // 74\n *                                                                                                                     // 75\n * @method formatInputString                                                                                           // 76\n * @param {String}                                                                                                     // 77\n * @returns {SolidityParam}                                                                                            // 78\n */                                                                                                                    // 79\nvar formatInputString = function (value) {                                                                             // 80\n    var result = utils.fromUtf8(value).substr(2);                                                                      // 81\n    var length = result.length / 2;                                                                                    // 82\n    var l = Math.floor((result.length + 63) / 64);                                                                     // 83\n    result = utils.padRight(result, l * 64);                                                                           // 84\n    return new SolidityParam(formatInputInt(length).value + result);                                                   // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * Formats input value to byte representation of bool                                                                  // 89\n *                                                                                                                     // 90\n * @method formatInputBool                                                                                             // 91\n * @param {Boolean}                                                                                                    // 92\n * @returns {SolidityParam}                                                                                            // 93\n */                                                                                                                    // 94\nvar formatInputBool = function (value) {                                                                               // 95\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');             // 96\n    return new SolidityParam(result);                                                                                  // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * Formats input value to byte representation of real                                                                  // 101\n * Values are multiplied by 2^m and encoded as integers                                                                // 102\n *                                                                                                                     // 103\n * @method formatInputReal                                                                                             // 104\n * @param {String|Number|BigNumber}                                                                                    // 105\n * @returns {SolidityParam}                                                                                            // 106\n */                                                                                                                    // 107\nvar formatInputReal = function (value) {                                                                               // 108\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));                                      // 109\n};                                                                                                                     // 110\n                                                                                                                       // 111\n/**                                                                                                                    // 112\n * Check if input value is negative                                                                                    // 113\n *                                                                                                                     // 114\n * @method signedIsNegative                                                                                            // 115\n * @param {String} value is hex format                                                                                 // 116\n * @returns {Boolean} true if it is negative, otherwise false                                                          // 117\n */                                                                                                                    // 118\nvar signedIsNegative = function (value) {                                                                              // 119\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';                                   // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\n/**                                                                                                                    // 123\n * Formats right-aligned output bytes to int                                                                           // 124\n *                                                                                                                     // 125\n * @method formatOutputInt                                                                                             // 126\n * @param {SolidityParam} param                                                                                        // 127\n * @returns {BigNumber} right-aligned output bytes formatted to big number                                             // 128\n */                                                                                                                    // 129\nvar formatOutputInt = function (param) {                                                                               // 130\n    var value = param.staticPart() || \"0\";                                                                             // 131\n                                                                                                                       // 132\n    // check if it's negative number                                                                                   // 133\n    // it it is, return two's complement                                                                               // 134\n    if (signedIsNegative(value)) {                                                                                     // 135\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\n    }                                                                                                                  // 137\n    return new BigNumber(value, 16);                                                                                   // 138\n};                                                                                                                     // 139\n                                                                                                                       // 140\n/**                                                                                                                    // 141\n * Formats right-aligned output bytes to uint                                                                          // 142\n *                                                                                                                     // 143\n * @method formatOutputUInt                                                                                            // 144\n * @param {SolidityParam}                                                                                              // 145\n * @returns {BigNumeber} right-aligned output bytes formatted to uint                                                  // 146\n */                                                                                                                    // 147\nvar formatOutputUInt = function (param) {                                                                              // 148\n    var value = param.staticPart() || \"0\";                                                                             // 149\n    return new BigNumber(value, 16);                                                                                   // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * Formats right-aligned output bytes to real                                                                          // 154\n *                                                                                                                     // 155\n * @method formatOutputReal                                                                                            // 156\n * @param {SolidityParam}                                                                                              // 157\n * @returns {BigNumber} input bytes formatted to real                                                                  // 158\n */                                                                                                                    // 159\nvar formatOutputReal = function (param) {                                                                              // 160\n    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));                                                // 161\n};                                                                                                                     // 162\n                                                                                                                       // 163\n/**                                                                                                                    // 164\n * Formats right-aligned output bytes to ureal                                                                         // 165\n *                                                                                                                     // 166\n * @method formatOutputUReal                                                                                           // 167\n * @param {SolidityParam}                                                                                              // 168\n * @returns {BigNumber} input bytes formatted to ureal                                                                 // 169\n */                                                                                                                    // 170\nvar formatOutputUReal = function (param) {                                                                             // 171\n    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));                                               // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * Should be used to format output bool                                                                                // 176\n *                                                                                                                     // 177\n * @method formatOutputBool                                                                                            // 178\n * @param {SolidityParam}                                                                                              // 179\n * @returns {Boolean} right-aligned input bytes formatted to bool                                                      // 180\n */                                                                                                                    // 181\nvar formatOutputBool = function (param) {                                                                              // 182\n    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;   // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\n/**                                                                                                                    // 186\n * Should be used to format output bytes                                                                               // 187\n *                                                                                                                     // 188\n * @method formatOutputBytes                                                                                           // 189\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 190\n * @returns {String} hex string                                                                                        // 191\n */                                                                                                                    // 192\nvar formatOutputBytes = function (param) {                                                                             // 193\n    return '0x' + param.staticPart();                                                                                  // 194\n};                                                                                                                     // 195\n                                                                                                                       // 196\n/**                                                                                                                    // 197\n * Should be used to format output bytes                                                                               // 198\n *                                                                                                                     // 199\n * @method formatOutputDynamicBytes                                                                                    // 200\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 201\n * @returns {String} hex string                                                                                        // 202\n */                                                                                                                    // 203\nvar formatOutputDynamicBytes = function (param) {                                                                      // 204\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 205\n    return '0x' + param.dynamicPart().substr(64, length);                                                              // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * Should be used to format output string                                                                              // 210\n *                                                                                                                     // 211\n * @method formatOutputString                                                                                          // 212\n * @param {SolidityParam} left-aligned hex representation of string                                                    // 213\n * @returns {String} ascii string                                                                                      // 214\n */                                                                                                                    // 215\nvar formatOutputString = function (param) {                                                                            // 216\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;                                 // 217\n    return utils.toUtf8(param.dynamicPart().substr(64, length));                                                       // 218\n};                                                                                                                     // 219\n                                                                                                                       // 220\n/**                                                                                                                    // 221\n * Should be used to format output address                                                                             // 222\n *                                                                                                                     // 223\n * @method formatOutputAddress                                                                                         // 224\n * @param {SolidityParam} right-aligned input bytes                                                                    // 225\n * @returns {String} address                                                                                           // 226\n */                                                                                                                    // 227\nvar formatOutputAddress = function (param) {                                                                           // 228\n    var value = param.staticPart();                                                                                    // 229\n    return \"0x\" + value.slice(value.length - 40, value.length);                                                        // 230\n};                                                                                                                     // 231\n                                                                                                                       // 232\nmodule.exports = {                                                                                                     // 233\n    formatInputInt: formatInputInt,                                                                                    // 234\n    formatInputBytes: formatInputBytes,                                                                                // 235\n    formatInputDynamicBytes: formatInputDynamicBytes,                                                                  // 236\n    formatInputString: formatInputString,                                                                              // 237\n    formatInputBool: formatInputBool,                                                                                  // 238\n    formatInputReal: formatInputReal,                                                                                  // 239\n    formatOutputInt: formatOutputInt,                                                                                  // 240\n    formatOutputUInt: formatOutputUInt,                                                                                // 241\n    formatOutputReal: formatOutputReal,                                                                                // 242\n    formatOutputUReal: formatOutputUReal,                                                                              // 243\n    formatOutputBool: formatOutputBool,                                                                                // 244\n    formatOutputBytes: formatOutputBytes,                                                                              // 245\n    formatOutputDynamicBytes: formatOutputDynamicBytes,                                                                // 246\n    formatOutputString: formatOutputString,                                                                            // 247\n    formatOutputAddress: formatOutputAddress                                                                           // 248\n};                                                                                                                     // 249\n                                                                                                                       // 250\n                                                                                                                       // 251\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"param.js\":[\"../utils/utils\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/param.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n    This file is part of web3.js.                                                                                      // 2\n                                                                                                                       // 3\n    web3.js is free software: you can redistribute it and/or modify                                                    // 4\n    it under the terms of the GNU Lesser General Public License as published by                                        // 5\n    the Free Software Foundation, either version 3 of the License, or                                                  // 6\n    (at your option) any later version.                                                                                // 7\n                                                                                                                       // 8\n    web3.js is distributed in the hope that it will be useful,                                                         // 9\n    but WITHOUT ANY WARRANTY; without even the implied warranty of                                                     // 10\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                                      // 11\n    GNU Lesser General Public License for more details.                                                                // 12\n                                                                                                                       // 13\n    You should have received a copy of the GNU Lesser General Public License                                           // 14\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.                                                   // 15\n*/                                                                                                                     // 16\n/**                                                                                                                    // 17\n * @file param.js                                                                                                      // 18\n * @author Marek Kotewicz <marek@ethdev.com>                                                                           // 19\n * @date 2015                                                                                                          // 20\n */                                                                                                                    // 21\n                                                                                                                       // 22\nvar utils = require('../utils/utils');                                                                                 // 23\n                                                                                                                       // 24\n/**                                                                                                                    // 25\n * SolidityParam object prototype.                                                                                     // 26\n * Should be used when encoding, decoding solidity bytes                                                               // 27\n */                                                                                                                    // 28\nvar SolidityParam = function (value, offset) {                                                                         // 29\n    this.value = value || '';                                                                                          // 30\n    this.offset = offset; // offset in bytes                                                                           // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * This method should be used to get length of params's dynamic part                                                   // 35\n *                                                                                                                     // 36\n * @method dynamicPartLength                                                                                           // 37\n * @returns {Number} length of dynamic part (in bytes)                                                                 // 38\n */                                                                                                                    // 39\nSolidityParam.prototype.dynamicPartLength = function () {                                                              // 40\n    return this.dynamicPart().length / 2;                                                                              // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\n/**                                                                                                                    // 44\n * This method should be used to create copy of solidity param with different offset                                   // 45\n *                                                                                                                     // 46\n * @method withOffset                                                                                                  // 47\n * @param {Number} offset length in bytes                                                                              // 48\n * @returns {SolidityParam} new solidity param with applied offset                                                     // 49\n */                                                                                                                    // 50\nSolidityParam.prototype.withOffset = function (offset) {                                                               // 51\n    return new SolidityParam(this.value, offset);                                                                      // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * This method should be used to combine solidity params together                                                      // 56\n * eg. when appending an array                                                                                         // 57\n *                                                                                                                     // 58\n * @method combine                                                                                                     // 59\n * @param {SolidityParam} param with which we should combine                                                           // 60\n * @param {SolidityParam} result of combination                                                                        // 61\n */                                                                                                                    // 62\nSolidityParam.prototype.combine = function (param) {                                                                   // 63\n    return new SolidityParam(this.value + param.value);                                                                // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * This method should be called to check if param has dynamic size.                                                    // 68\n * If it has, it returns true, otherwise false                                                                         // 69\n *                                                                                                                     // 70\n * @method isDynamic                                                                                                   // 71\n * @returns {Boolean}                                                                                                  // 72\n */                                                                                                                    // 73\nSolidityParam.prototype.isDynamic = function () {                                                                      // 74\n    return this.offset !== undefined;                                                                                  // 75\n};                                                                                                                     // 76\n                                                                                                                       // 77\n/**                                                                                                                    // 78\n * This method should be called to transform offset to bytes                                                           // 79\n *                                                                                                                     // 80\n * @method offsetAsBytes                                                                                               // 81\n * @returns {String} bytes representation of offset                                                                    // 82\n */                                                                                                                    // 83\nSolidityParam.prototype.offsetAsBytes = function () {                                                                  // 84\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);               // 85\n};                                                                                                                     // 86\n                                                                                                                       // 87\n/**                                                                                                                    // 88\n * This method should be called to get static part of param                                                            // 89\n *                                                                                                                     // 90\n * @method staticPart                                                                                                  // 91\n * @returns {String} offset if it is a dynamic param, otherwise value                                                  // 92\n */                                                                                                                    // 93\nSolidityParam.prototype.staticPart = function () {                                                                     // 94\n    if (!this.isDynamic()) {                                                                                           // 95\n        return this.value;                                                                                             // 96\n    }                                                                                                                  // 97\n    return this.offsetAsBytes();                                                                                       // 98\n};                                                                                                                     // 99\n                                                                                                                       // 100\n/**                                                                                                                    // 101\n * This method should be called to get dynamic part of param                                                           // 102\n *                                                                                                                     // 103\n * @method dynamicPart                                                                                                 // 104\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string                                  // 105\n */                                                                                                                    // 106\nSolidityParam.prototype.dynamicPart = function () {                                                                    // 107\n    return this.isDynamic() ? this.value : '';                                                                         // 108\n};                                                                                                                     // 109\n                                                                                                                       // 110\n/**                                                                                                                    // 111\n * This method should be called to encode param                                                                        // 112\n *                                                                                                                     // 113\n * @method encode                                                                                                      // 114\n * @returns {String}                                                                                                   // 115\n */                                                                                                                    // 116\nSolidityParam.prototype.encode = function () {                                                                         // 117\n    return this.staticPart() + this.dynamicPart();                                                                     // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * This method should be called to encode array of params                                                              // 122\n *                                                                                                                     // 123\n * @method encodeList                                                                                                  // 124\n * @param {Array[SolidityParam]} params                                                                                // 125\n * @returns {String}                                                                                                   // 126\n */                                                                                                                    // 127\nSolidityParam.encodeList = function (params) {                                                                         // 128\n                                                                                                                       // 129\n    // updating offsets                                                                                                // 130\n    var totalOffset = params.length * 32;                                                                              // 131\n    var offsetParams = params.map(function (param) {                                                                   // 132\n        if (!param.isDynamic()) {                                                                                      // 133\n            return param;                                                                                              // 134\n        }                                                                                                              // 135\n        var offset = totalOffset;                                                                                      // 136\n        totalOffset += param.dynamicPartLength();                                                                      // 137\n        return param.withOffset(offset);                                                                               // 138\n    });                                                                                                                // 139\n                                                                                                                       // 140\n    // encode everything!                                                                                              // 141\n    return offsetParams.reduce(function (result, param) {                                                              // 142\n        return result + param.dynamicPart();                                                                           // 143\n    }, offsetParams.reduce(function (result, param) {                                                                  // 144\n        return result + param.staticPart();                                                                            // 145\n    }, ''));                                                                                                           // 146\n};                                                                                                                     // 147\n                                                                                                                       // 148\n                                                                                                                       // 149\n                                                                                                                       // 150\nmodule.exports = SolidityParam;                                                                                        // 151\n                                                                                                                       // 152\n                                                                                                                       // 153\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"address.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/address.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeAddress is a prootype that represents address type                                                      // 5\n * It matches:                                                                                                         // 6\n * address                                                                                                             // 7\n * address[]                                                                                                           // 8\n * address[4]                                                                                                          // 9\n * address[][]                                                                                                         // 10\n * address[3][]                                                                                                        // 11\n * address[][6][], ...                                                                                                 // 12\n */                                                                                                                    // 13\nvar SolidityTypeAddress = function () {                                                                                // 14\n    this._inputFormatter = f.formatInputInt;                                                                           // 15\n    this._outputFormatter = f.formatOutputAddress;                                                                     // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\nSolidityTypeAddress.prototype = new SolidityType({});                                                                  // 19\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;                                                       // 20\n                                                                                                                       // 21\nSolidityTypeAddress.prototype.isType = function (name) {                                                               // 22\n    return !!name.match(/address(\\[([0-9]*)\\])?/);                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nSolidityTypeAddress.prototype.staticPartLength = function (name) {                                                     // 26\n    return 32 * this.staticArrayLength(name);                                                                          // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nmodule.exports = SolidityTypeAddress;                                                                                  // 30\n                                                                                                                       // 31\n                                                                                                                       // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"type.js\":[\"./formatters\",\"./param\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/type.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityParam = require('./param');                                                                                // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityType prototype is used to encode/decode solidity params of certain type                                     // 5\n */                                                                                                                    // 6\nvar SolidityType = function (config) {                                                                                 // 7\n    this._inputFormatter = config.inputFormatter;                                                                      // 8\n    this._outputFormatter = config.outputFormatter;                                                                    // 9\n};                                                                                                                     // 10\n                                                                                                                       // 11\n/**                                                                                                                    // 12\n * Should be used to determine if this SolidityType do match given name                                                // 13\n *                                                                                                                     // 14\n * @method isType                                                                                                      // 15\n * @param {String} name                                                                                                // 16\n * @return {Bool} true if type match this SolidityType, otherwise false                                                // 17\n */                                                                                                                    // 18\nSolidityType.prototype.isType = function (name) {                                                                      // 19\n    throw \"this method should be overrwritten for type \" + name;                                                       // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\n/**                                                                                                                    // 23\n * Should be used to determine what is the length of static part in given type                                         // 24\n *                                                                                                                     // 25\n * @method staticPartLength                                                                                            // 26\n * @param {String} name                                                                                                // 27\n * @return {Number} length of static part in bytes                                                                     // 28\n */                                                                                                                    // 29\nSolidityType.prototype.staticPartLength = function (name) {                                                            // 30\n    throw \"this method should be overrwritten for type: \" + name;                                                      // 31\n};                                                                                                                     // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * Should be used to determine if type is dynamic array                                                                // 35\n * eg:                                                                                                                 // 36\n * \"type[]\" => true                                                                                                    // 37\n * \"type[4]\" => false                                                                                                  // 38\n *                                                                                                                     // 39\n * @method isDynamicArray                                                                                              // 40\n * @param {String} name                                                                                                // 41\n * @return {Bool} true if the type is dynamic array                                                                    // 42\n */                                                                                                                    // 43\nSolidityType.prototype.isDynamicArray = function (name) {                                                              // 44\n    var nestedTypes = this.nestedTypes(name);                                                                          // 45\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                  // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\n/**                                                                                                                    // 49\n * Should be used to determine if type is static array                                                                 // 50\n * eg:                                                                                                                 // 51\n * \"type[]\" => false                                                                                                   // 52\n * \"type[4]\" => true                                                                                                   // 53\n *                                                                                                                     // 54\n * @method isStaticArray                                                                                               // 55\n * @param {String} name                                                                                                // 56\n * @return {Bool} true if the type is static array                                                                     // 57\n */                                                                                                                    // 58\nSolidityType.prototype.isStaticArray = function (name) {                                                               // 59\n    var nestedTypes = this.nestedTypes(name);                                                                          // 60\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);                                 // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/**                                                                                                                    // 64\n * Should return length of static array                                                                                // 65\n * eg.                                                                                                                 // 66\n * \"int[32]\" => 32                                                                                                     // 67\n * \"int256[14]\" => 14                                                                                                  // 68\n * \"int[2][3]\" => 3                                                                                                    // 69\n * \"int\" => 1                                                                                                          // 70\n * \"int[1]\" => 1                                                                                                       // 71\n * \"int[]\" => 1                                                                                                        // 72\n *                                                                                                                     // 73\n * @method staticArrayLength                                                                                           // 74\n * @param {String} name                                                                                                // 75\n * @return {Number} static array length                                                                                // 76\n */                                                                                                                    // 77\nSolidityType.prototype.staticArrayLength = function (name) {                                                           // 78\n    var nestedTypes = this.nestedTypes(name);                                                                          // 79\n    if (nestedTypes) {                                                                                                 // 80\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);                                  // 81\n    }                                                                                                                  // 82\n    return 1;                                                                                                          // 83\n};                                                                                                                     // 84\n                                                                                                                       // 85\n/**                                                                                                                    // 86\n * Should return nested type                                                                                           // 87\n * eg.                                                                                                                 // 88\n * \"int[32]\" => \"int\"                                                                                                  // 89\n * \"int256[14]\" => \"int256\"                                                                                            // 90\n * \"int[2][3]\" => \"int[2]\"                                                                                             // 91\n * \"int\" => \"int\"                                                                                                      // 92\n * \"int[]\" => \"int\"                                                                                                    // 93\n *                                                                                                                     // 94\n * @method nestedName                                                                                                  // 95\n * @param {String} name                                                                                                // 96\n * @return {String} nested name                                                                                        // 97\n */                                                                                                                    // 98\nSolidityType.prototype.nestedName = function (name) {                                                                  // 99\n    // remove last [] in name                                                                                          // 100\n    var nestedTypes = this.nestedTypes(name);                                                                          // 101\n    if (!nestedTypes) {                                                                                                // 102\n        return name;                                                                                                   // 103\n    }                                                                                                                  // 104\n                                                                                                                       // 105\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);                                   // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * Should return true if type has dynamic size by default                                                              // 110\n * such types are \"string\", \"bytes\"                                                                                    // 111\n *                                                                                                                     // 112\n * @method isDynamicType                                                                                               // 113\n * @param {String} name                                                                                                // 114\n * @return {Bool} true if is dynamic, otherwise false                                                                  // 115\n */                                                                                                                    // 116\nSolidityType.prototype.isDynamicType = function () {                                                                   // 117\n    return false;                                                                                                      // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * Should return array of nested types                                                                                 // 122\n * eg.                                                                                                                 // 123\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]                                                                               // 124\n * \"int[] => [\"[]\"]                                                                                                    // 125\n * \"int\" => null                                                                                                       // 126\n *                                                                                                                     // 127\n * @method nestedTypes                                                                                                 // 128\n * @param {String} name                                                                                                // 129\n * @return {Array} array of nested types                                                                               // 130\n */                                                                                                                    // 131\nSolidityType.prototype.nestedTypes = function (name) {                                                                 // 132\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"                                                             // 133\n    return name.match(/(\\[[0-9]*\\])/g);                                                                                // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\n/**                                                                                                                    // 137\n * Should be used to encode the value                                                                                  // 138\n *                                                                                                                     // 139\n * @method encode                                                                                                      // 140\n * @param {Object} value                                                                                               // 141\n * @param {String} name                                                                                                // 142\n * @return {String} encoded value                                                                                      // 143\n */                                                                                                                    // 144\nSolidityType.prototype.encode = function (value, name) {                                                               // 145\n    var self = this;                                                                                                   // 146\n    if (this.isDynamicArray(name)) {                                                                                   // 147\n                                                                                                                       // 148\n        return (function () {                                                                                          // 149\n            var length = value.length;                          // in int                                              // 150\n            var nestedName = self.nestedName(name);                                                                    // 151\n                                                                                                                       // 152\n            var result = [];                                                                                           // 153\n            result.push(f.formatInputInt(length).encode());                                                            // 154\n                                                                                                                       // 155\n            value.forEach(function (v) {                                                                               // 156\n                result.push(self.encode(v, nestedName));                                                               // 157\n            });                                                                                                        // 158\n                                                                                                                       // 159\n            return result;                                                                                             // 160\n        })();                                                                                                          // 161\n                                                                                                                       // 162\n    } else if (this.isStaticArray(name)) {                                                                             // 163\n                                                                                                                       // 164\n        return (function () {                                                                                          // 165\n            var length = self.staticArrayLength(name);          // in int                                              // 166\n            var nestedName = self.nestedName(name);                                                                    // 167\n                                                                                                                       // 168\n            var result = [];                                                                                           // 169\n            for (var i = 0; i < length; i++) {                                                                         // 170\n                result.push(self.encode(value[i], nestedName));                                                        // 171\n            }                                                                                                          // 172\n                                                                                                                       // 173\n            return result;                                                                                             // 174\n        })();                                                                                                          // 175\n                                                                                                                       // 176\n    }                                                                                                                  // 177\n                                                                                                                       // 178\n    return this._inputFormatter(value, name).encode();                                                                 // 179\n};                                                                                                                     // 180\n                                                                                                                       // 181\n/**                                                                                                                    // 182\n * Should be used to decode value from bytes                                                                           // 183\n *                                                                                                                     // 184\n * @method decode                                                                                                      // 185\n * @param {String} bytes                                                                                               // 186\n * @param {Number} offset in bytes                                                                                     // 187\n * @param {String} name type name                                                                                      // 188\n * @returns {Object} decoded value                                                                                     // 189\n */                                                                                                                    // 190\nSolidityType.prototype.decode = function (bytes, offset, name) {                                                       // 191\n    var self = this;                                                                                                   // 192\n                                                                                                                       // 193\n    if (this.isDynamicArray(name)) {                                                                                   // 194\n                                                                                                                       // 195\n        return (function () {                                                                                          // 196\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes                               // 197\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int                                 // 198\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes                               // 199\n                                                                                                                       // 200\n            var nestedName = self.nestedName(name);                                                                    // 201\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes                               // 202\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 203\n            var result = [];                                                                                           // 204\n                                                                                                                       // 205\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 206\n                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 207\n            }                                                                                                          // 208\n                                                                                                                       // 209\n            return result;                                                                                             // 210\n        })();                                                                                                          // 211\n                                                                                                                       // 212\n    } else if (this.isStaticArray(name)) {                                                                             // 213\n                                                                                                                       // 214\n        return (function () {                                                                                          // 215\n            var length = self.staticArrayLength(name);                      // in int                                  // 216\n            var arrayStart = offset;                                        // in bytes                                // 217\n                                                                                                                       // 218\n            var nestedName = self.nestedName(name);                                                                    // 219\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes                                // 220\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;                   // 221\n            var result = [];                                                                                           // 222\n                                                                                                                       // 223\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {          // 224\n                result.push(self.decode(bytes, arrayStart + i, nestedName));                                           // 225\n            }                                                                                                          // 226\n                                                                                                                       // 227\n            return result;                                                                                             // 228\n        })();                                                                                                          // 229\n    } else if (this.isDynamicType(name)) {                                                                             // 230\n                                                                                                                       // 231\n        return (function () {                                                                                          // 232\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes                        // 233\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes                        // 234\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int                          // 235\n                                                                                                                       // 236\n            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));\n        })();                                                                                                          // 238\n    }                                                                                                                  // 239\n                                                                                                                       // 240\n    var length = this.staticPartLength(name);                                                                          // 241\n    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));                             // 242\n};                                                                                                                     // 243\n                                                                                                                       // 244\nmodule.exports = SolidityType;                                                                                         // 245\n                                                                                                                       // 246\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"bool.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/bool.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeBool is a prootype that represents bool type                                                            // 5\n * It matches:                                                                                                         // 6\n * bool                                                                                                                // 7\n * bool[]                                                                                                              // 8\n * bool[4]                                                                                                             // 9\n * bool[][]                                                                                                            // 10\n * bool[3][]                                                                                                           // 11\n * bool[][6][], ...                                                                                                    // 12\n */                                                                                                                    // 13\nvar SolidityTypeBool = function () {                                                                                   // 14\n    this._inputFormatter = f.formatInputBool;                                                                          // 15\n    this._outputFormatter = f.formatOutputBool;                                                                        // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\nSolidityTypeBool.prototype = new SolidityType({});                                                                     // 19\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;                                                             // 20\n                                                                                                                       // 21\nSolidityTypeBool.prototype.isType = function (name) {                                                                  // 22\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);                                                                      // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nSolidityTypeBool.prototype.staticPartLength = function (name) {                                                        // 26\n    return 32 * this.staticArrayLength(name);                                                                          // 27\n};                                                                                                                     // 28\n                                                                                                                       // 29\nmodule.exports = SolidityTypeBool;                                                                                     // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"int.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/int.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeInt is a prootype that represents int type                                                              // 5\n * It matches:                                                                                                         // 6\n * int                                                                                                                 // 7\n * int[]                                                                                                               // 8\n * int[4]                                                                                                              // 9\n * int[][]                                                                                                             // 10\n * int[3][]                                                                                                            // 11\n * int[][6][], ...                                                                                                     // 12\n * int32                                                                                                               // 13\n * int64[]                                                                                                             // 14\n * int8[4]                                                                                                             // 15\n * int256[][]                                                                                                          // 16\n * int[3][]                                                                                                            // 17\n * int64[][6][], ...                                                                                                   // 18\n */                                                                                                                    // 19\nvar SolidityTypeInt = function () {                                                                                    // 20\n    this._inputFormatter = f.formatInputInt;                                                                           // 21\n    this._outputFormatter = f.formatOutputInt;                                                                         // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nSolidityTypeInt.prototype = new SolidityType({});                                                                      // 25\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;                                                               // 26\n                                                                                                                       // 27\nSolidityTypeInt.prototype.isType = function (name) {                                                                   // 28\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);                                                              // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nSolidityTypeInt.prototype.staticPartLength = function (name) {                                                         // 32\n    return 32 * this.staticArrayLength(name);                                                                          // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = SolidityTypeInt;                                                                                      // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"uint.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/uint.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeUInt is a prootype that represents uint type                                                            // 5\n * It matches:                                                                                                         // 6\n * uint                                                                                                                // 7\n * uint[]                                                                                                              // 8\n * uint[4]                                                                                                             // 9\n * uint[][]                                                                                                            // 10\n * uint[3][]                                                                                                           // 11\n * uint[][6][], ...                                                                                                    // 12\n * uint32                                                                                                              // 13\n * uint64[]                                                                                                            // 14\n * uint8[4]                                                                                                            // 15\n * uint256[][]                                                                                                         // 16\n * uint[3][]                                                                                                           // 17\n * uint64[][6][], ...                                                                                                  // 18\n */                                                                                                                    // 19\nvar SolidityTypeUInt = function () {                                                                                   // 20\n    this._inputFormatter = f.formatInputInt;                                                                           // 21\n    this._outputFormatter = f.formatOutputUInt;                                                                        // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nSolidityTypeUInt.prototype = new SolidityType({});                                                                     // 25\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;                                                             // 26\n                                                                                                                       // 27\nSolidityTypeUInt.prototype.isType = function (name) {                                                                  // 28\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);                                                             // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nSolidityTypeUInt.prototype.staticPartLength = function (name) {                                                        // 32\n    return 32 * this.staticArrayLength(name);                                                                          // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = SolidityTypeUInt;                                                                                     // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"dynamicbytes.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/dynamicbytes.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\nvar SolidityTypeDynamicBytes = function () {                                                                           // 4\n    this._inputFormatter = f.formatInputDynamicBytes;                                                                  // 5\n    this._outputFormatter = f.formatOutputDynamicBytes;                                                                // 6\n};                                                                                                                     // 7\n                                                                                                                       // 8\nSolidityTypeDynamicBytes.prototype = new SolidityType({});                                                             // 9\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;                                             // 10\n                                                                                                                       // 11\nSolidityTypeDynamicBytes.prototype.isType = function (name) {                                                          // 12\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);                                                                     // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\nSolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {                                                // 16\n    return 32 * this.staticArrayLength(name);                                                                          // 17\n};                                                                                                                     // 18\n                                                                                                                       // 19\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {                                                       // 20\n    return true;                                                                                                       // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nmodule.exports = SolidityTypeDynamicBytes;                                                                             // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"string.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/string.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\nvar SolidityTypeString = function () {                                                                                 // 4\n    this._inputFormatter = f.formatInputString;                                                                        // 5\n    this._outputFormatter = f.formatOutputString;                                                                      // 6\n};                                                                                                                     // 7\n                                                                                                                       // 8\nSolidityTypeString.prototype = new SolidityType({});                                                                   // 9\nSolidityTypeString.prototype.constructor = SolidityTypeString;                                                         // 10\n                                                                                                                       // 11\nSolidityTypeString.prototype.isType = function (name) {                                                                // 12\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);                                                                    // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\nSolidityTypeString.prototype.staticPartLength = function (name) {                                                      // 16\n    return 32 * this.staticArrayLength(name);                                                                          // 17\n};                                                                                                                     // 18\n                                                                                                                       // 19\nSolidityTypeString.prototype.isDynamicType = function () {                                                             // 20\n    return true;                                                                                                       // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nmodule.exports = SolidityTypeString;                                                                                   // 24\n                                                                                                                       // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"real.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/real.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeReal is a prootype that represents real type                                                            // 5\n * It matches:                                                                                                         // 6\n * real                                                                                                                // 7\n * real[]                                                                                                              // 8\n * real[4]                                                                                                             // 9\n * real[][]                                                                                                            // 10\n * real[3][]                                                                                                           // 11\n * real[][6][], ...                                                                                                    // 12\n * real32                                                                                                              // 13\n * real64[]                                                                                                            // 14\n * real8[4]                                                                                                            // 15\n * real256[][]                                                                                                         // 16\n * real[3][]                                                                                                           // 17\n * real64[][6][], ...                                                                                                  // 18\n */                                                                                                                    // 19\nvar SolidityTypeReal = function () {                                                                                   // 20\n    this._inputFormatter = f.formatInputReal;                                                                          // 21\n    this._outputFormatter = f.formatOutputReal;                                                                        // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nSolidityTypeReal.prototype = new SolidityType({});                                                                     // 25\nSolidityTypeReal.prototype.constructor = SolidityTypeReal;                                                             // 26\n                                                                                                                       // 27\nSolidityTypeReal.prototype.isType = function (name) {                                                                  // 28\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);                                                               // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nSolidityTypeReal.prototype.staticPartLength = function (name) {                                                        // 32\n    return 32 * this.staticArrayLength(name);                                                                          // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = SolidityTypeReal;                                                                                     // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"ureal.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/ureal.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeUReal is a prootype that represents ureal type                                                          // 5\n * It matches:                                                                                                         // 6\n * ureal                                                                                                               // 7\n * ureal[]                                                                                                             // 8\n * ureal[4]                                                                                                            // 9\n * ureal[][]                                                                                                           // 10\n * ureal[3][]                                                                                                          // 11\n * ureal[][6][], ...                                                                                                   // 12\n * ureal32                                                                                                             // 13\n * ureal64[]                                                                                                           // 14\n * ureal8[4]                                                                                                           // 15\n * ureal256[][]                                                                                                        // 16\n * ureal[3][]                                                                                                          // 17\n * ureal64[][6][], ...                                                                                                 // 18\n */                                                                                                                    // 19\nvar SolidityTypeUReal = function () {                                                                                  // 20\n    this._inputFormatter = f.formatInputReal;                                                                          // 21\n    this._outputFormatter = f.formatOutputUReal;                                                                       // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nSolidityTypeUReal.prototype = new SolidityType({});                                                                    // 25\nSolidityTypeUReal.prototype.constructor = SolidityTypeUReal;                                                           // 26\n                                                                                                                       // 27\nSolidityTypeUReal.prototype.isType = function (name) {                                                                 // 28\n    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/);                                                            // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nSolidityTypeUReal.prototype.staticPartLength = function (name) {                                                       // 32\n    return 32 * this.staticArrayLength(name);                                                                          // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nmodule.exports = SolidityTypeUReal;                                                                                    // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"bytes.js\":[\"./formatters\",\"./type\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/solidity/bytes.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar f = require('./formatters');                                                                                       // 1\nvar SolidityType = require('./type');                                                                                  // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * SolidityTypeBytes is a prootype that represents bytes type                                                          // 5\n * It matches:                                                                                                         // 6\n * bytes                                                                                                               // 7\n * bytes[]                                                                                                             // 8\n * bytes[4]                                                                                                            // 9\n * bytes[][]                                                                                                           // 10\n * bytes[3][]                                                                                                          // 11\n * bytes[][6][], ...                                                                                                   // 12\n * bytes32                                                                                                             // 13\n * bytes64[]                                                                                                           // 14\n * bytes8[4]                                                                                                           // 15\n * bytes256[][]                                                                                                        // 16\n * bytes[3][]                                                                                                          // 17\n * bytes64[][6][], ...                                                                                                 // 18\n */                                                                                                                    // 19\nvar SolidityTypeBytes = function () {                                                                                  // 20\n    this._inputFormatter = f.formatInputBytes;                                                                         // 21\n    this._outputFormatter = f.formatOutputBytes;                                                                       // 22\n};                                                                                                                     // 23\n                                                                                                                       // 24\nSolidityTypeBytes.prototype = new SolidityType({});                                                                    // 25\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;                                                           // 26\n                                                                                                                       // 27\nSolidityTypeBytes.prototype.isType = function (name) {                                                                 // 28\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);                                                          // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nSolidityTypeBytes.prototype.staticPartLength = function (name) {                                                       // 32\n    var matches = name.match(/^bytes([0-9]*)/);                                                                        // 33\n    var size = parseInt(matches[1]);                                                                                   // 34\n    return size * this.staticArrayLength(name);                                                                        // 35\n};                                                                                                                     // 36\n                                                                                                                       // 37\nmodule.exports = SolidityTypeBytes;                                                                                    // 38\n                                                                                                                       // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"contracts\":{\"GlobalRegistrar.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/contracts/GlobalRegistrar.json                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = [                                                                                                     // 1\n  {                                                                                                                    // 2\n    \"constant\": true,                                                                                                  // 3\n    \"inputs\": [                                                                                                        // 4\n      {                                                                                                                // 5\n        \"name\": \"_owner\",                                                                                              // 6\n        \"type\": \"address\"                                                                                              // 7\n      }                                                                                                                // 8\n    ],                                                                                                                 // 9\n    \"name\": \"name\",                                                                                                    // 10\n    \"outputs\": [                                                                                                       // 11\n      {                                                                                                                // 12\n        \"name\": \"o_name\",                                                                                              // 13\n        \"type\": \"bytes32\"                                                                                              // 14\n      }                                                                                                                // 15\n    ],                                                                                                                 // 16\n    \"type\": \"function\"                                                                                                 // 17\n  },                                                                                                                   // 18\n  {                                                                                                                    // 19\n    \"constant\": true,                                                                                                  // 20\n    \"inputs\": [                                                                                                        // 21\n      {                                                                                                                // 22\n        \"name\": \"_name\",                                                                                               // 23\n        \"type\": \"bytes32\"                                                                                              // 24\n      }                                                                                                                // 25\n    ],                                                                                                                 // 26\n    \"name\": \"owner\",                                                                                                   // 27\n    \"outputs\": [                                                                                                       // 28\n      {                                                                                                                // 29\n        \"name\": \"\",                                                                                                    // 30\n        \"type\": \"address\"                                                                                              // 31\n      }                                                                                                                // 32\n    ],                                                                                                                 // 33\n    \"type\": \"function\"                                                                                                 // 34\n  },                                                                                                                   // 35\n  {                                                                                                                    // 36\n    \"constant\": true,                                                                                                  // 37\n    \"inputs\": [                                                                                                        // 38\n      {                                                                                                                // 39\n        \"name\": \"_name\",                                                                                               // 40\n        \"type\": \"bytes32\"                                                                                              // 41\n      }                                                                                                                // 42\n    ],                                                                                                                 // 43\n    \"name\": \"content\",                                                                                                 // 44\n    \"outputs\": [                                                                                                       // 45\n      {                                                                                                                // 46\n        \"name\": \"\",                                                                                                    // 47\n        \"type\": \"bytes32\"                                                                                              // 48\n      }                                                                                                                // 49\n    ],                                                                                                                 // 50\n    \"type\": \"function\"                                                                                                 // 51\n  },                                                                                                                   // 52\n  {                                                                                                                    // 53\n    \"constant\": true,                                                                                                  // 54\n    \"inputs\": [                                                                                                        // 55\n      {                                                                                                                // 56\n        \"name\": \"_name\",                                                                                               // 57\n        \"type\": \"bytes32\"                                                                                              // 58\n      }                                                                                                                // 59\n    ],                                                                                                                 // 60\n    \"name\": \"addr\",                                                                                                    // 61\n    \"outputs\": [                                                                                                       // 62\n      {                                                                                                                // 63\n        \"name\": \"\",                                                                                                    // 64\n        \"type\": \"address\"                                                                                              // 65\n      }                                                                                                                // 66\n    ],                                                                                                                 // 67\n    \"type\": \"function\"                                                                                                 // 68\n  },                                                                                                                   // 69\n  {                                                                                                                    // 70\n    \"constant\": false,                                                                                                 // 71\n    \"inputs\": [                                                                                                        // 72\n      {                                                                                                                // 73\n        \"name\": \"_name\",                                                                                               // 74\n        \"type\": \"bytes32\"                                                                                              // 75\n      }                                                                                                                // 76\n    ],                                                                                                                 // 77\n    \"name\": \"reserve\",                                                                                                 // 78\n    \"outputs\": [],                                                                                                     // 79\n    \"type\": \"function\"                                                                                                 // 80\n  },                                                                                                                   // 81\n  {                                                                                                                    // 82\n    \"constant\": true,                                                                                                  // 83\n    \"inputs\": [                                                                                                        // 84\n      {                                                                                                                // 85\n        \"name\": \"_name\",                                                                                               // 86\n        \"type\": \"bytes32\"                                                                                              // 87\n      }                                                                                                                // 88\n    ],                                                                                                                 // 89\n    \"name\": \"subRegistrar\",                                                                                            // 90\n    \"outputs\": [                                                                                                       // 91\n      {                                                                                                                // 92\n        \"name\": \"\",                                                                                                    // 93\n        \"type\": \"address\"                                                                                              // 94\n      }                                                                                                                // 95\n    ],                                                                                                                 // 96\n    \"type\": \"function\"                                                                                                 // 97\n  },                                                                                                                   // 98\n  {                                                                                                                    // 99\n    \"constant\": false,                                                                                                 // 100\n    \"inputs\": [                                                                                                        // 101\n      {                                                                                                                // 102\n        \"name\": \"_name\",                                                                                               // 103\n        \"type\": \"bytes32\"                                                                                              // 104\n      },                                                                                                               // 105\n      {                                                                                                                // 106\n        \"name\": \"_newOwner\",                                                                                           // 107\n        \"type\": \"address\"                                                                                              // 108\n      }                                                                                                                // 109\n    ],                                                                                                                 // 110\n    \"name\": \"transfer\",                                                                                                // 111\n    \"outputs\": [],                                                                                                     // 112\n    \"type\": \"function\"                                                                                                 // 113\n  },                                                                                                                   // 114\n  {                                                                                                                    // 115\n    \"constant\": false,                                                                                                 // 116\n    \"inputs\": [                                                                                                        // 117\n      {                                                                                                                // 118\n        \"name\": \"_name\",                                                                                               // 119\n        \"type\": \"bytes32\"                                                                                              // 120\n      },                                                                                                               // 121\n      {                                                                                                                // 122\n        \"name\": \"_registrar\",                                                                                          // 123\n        \"type\": \"address\"                                                                                              // 124\n      }                                                                                                                // 125\n    ],                                                                                                                 // 126\n    \"name\": \"setSubRegistrar\",                                                                                         // 127\n    \"outputs\": [],                                                                                                     // 128\n    \"type\": \"function\"                                                                                                 // 129\n  },                                                                                                                   // 130\n  {                                                                                                                    // 131\n    \"constant\": false,                                                                                                 // 132\n    \"inputs\": [],                                                                                                      // 133\n    \"name\": \"Registrar\",                                                                                               // 134\n    \"outputs\": [],                                                                                                     // 135\n    \"type\": \"function\"                                                                                                 // 136\n  },                                                                                                                   // 137\n  {                                                                                                                    // 138\n    \"constant\": false,                                                                                                 // 139\n    \"inputs\": [                                                                                                        // 140\n      {                                                                                                                // 141\n        \"name\": \"_name\",                                                                                               // 142\n        \"type\": \"bytes32\"                                                                                              // 143\n      },                                                                                                               // 144\n      {                                                                                                                // 145\n        \"name\": \"_a\",                                                                                                  // 146\n        \"type\": \"address\"                                                                                              // 147\n      },                                                                                                               // 148\n      {                                                                                                                // 149\n        \"name\": \"_primary\",                                                                                            // 150\n        \"type\": \"bool\"                                                                                                 // 151\n      }                                                                                                                // 152\n    ],                                                                                                                 // 153\n    \"name\": \"setAddress\",                                                                                              // 154\n    \"outputs\": [],                                                                                                     // 155\n    \"type\": \"function\"                                                                                                 // 156\n  },                                                                                                                   // 157\n  {                                                                                                                    // 158\n    \"constant\": false,                                                                                                 // 159\n    \"inputs\": [                                                                                                        // 160\n      {                                                                                                                // 161\n        \"name\": \"_name\",                                                                                               // 162\n        \"type\": \"bytes32\"                                                                                              // 163\n      },                                                                                                               // 164\n      {                                                                                                                // 165\n        \"name\": \"_content\",                                                                                            // 166\n        \"type\": \"bytes32\"                                                                                              // 167\n      }                                                                                                                // 168\n    ],                                                                                                                 // 169\n    \"name\": \"setContent\",                                                                                              // 170\n    \"outputs\": [],                                                                                                     // 171\n    \"type\": \"function\"                                                                                                 // 172\n  },                                                                                                                   // 173\n  {                                                                                                                    // 174\n    \"constant\": false,                                                                                                 // 175\n    \"inputs\": [                                                                                                        // 176\n      {                                                                                                                // 177\n        \"name\": \"_name\",                                                                                               // 178\n        \"type\": \"bytes32\"                                                                                              // 179\n      }                                                                                                                // 180\n    ],                                                                                                                 // 181\n    \"name\": \"disown\",                                                                                                  // 182\n    \"outputs\": [],                                                                                                     // 183\n    \"type\": \"function\"                                                                                                 // 184\n  },                                                                                                                   // 185\n  {                                                                                                                    // 186\n    \"anonymous\": false,                                                                                                // 187\n    \"inputs\": [                                                                                                        // 188\n      {                                                                                                                // 189\n        \"indexed\": true,                                                                                               // 190\n        \"name\": \"_name\",                                                                                               // 191\n        \"type\": \"bytes32\"                                                                                              // 192\n      },                                                                                                               // 193\n      {                                                                                                                // 194\n        \"indexed\": false,                                                                                              // 195\n        \"name\": \"_winner\",                                                                                             // 196\n        \"type\": \"address\"                                                                                              // 197\n      }                                                                                                                // 198\n    ],                                                                                                                 // 199\n    \"name\": \"AuctionEnded\",                                                                                            // 200\n    \"type\": \"event\"                                                                                                    // 201\n  },                                                                                                                   // 202\n  {                                                                                                                    // 203\n    \"anonymous\": false,                                                                                                // 204\n    \"inputs\": [                                                                                                        // 205\n      {                                                                                                                // 206\n        \"indexed\": true,                                                                                               // 207\n        \"name\": \"_name\",                                                                                               // 208\n        \"type\": \"bytes32\"                                                                                              // 209\n      },                                                                                                               // 210\n      {                                                                                                                // 211\n        \"indexed\": false,                                                                                              // 212\n        \"name\": \"_bidder\",                                                                                             // 213\n        \"type\": \"address\"                                                                                              // 214\n      },                                                                                                               // 215\n      {                                                                                                                // 216\n        \"indexed\": false,                                                                                              // 217\n        \"name\": \"_value\",                                                                                              // 218\n        \"type\": \"uint256\"                                                                                              // 219\n      }                                                                                                                // 220\n    ],                                                                                                                 // 221\n    \"name\": \"NewBid\",                                                                                                  // 222\n    \"type\": \"event\"                                                                                                    // 223\n  },                                                                                                                   // 224\n  {                                                                                                                    // 225\n    \"anonymous\": false,                                                                                                // 226\n    \"inputs\": [                                                                                                        // 227\n      {                                                                                                                // 228\n        \"indexed\": true,                                                                                               // 229\n        \"name\": \"name\",                                                                                                // 230\n        \"type\": \"bytes32\"                                                                                              // 231\n      }                                                                                                                // 232\n    ],                                                                                                                 // 233\n    \"name\": \"Changed\",                                                                                                 // 234\n    \"type\": \"event\"                                                                                                    // 235\n  },                                                                                                                   // 236\n  {                                                                                                                    // 237\n    \"anonymous\": false,                                                                                                // 238\n    \"inputs\": [                                                                                                        // 239\n      {                                                                                                                // 240\n        \"indexed\": true,                                                                                               // 241\n        \"name\": \"name\",                                                                                                // 242\n        \"type\": \"bytes32\"                                                                                              // 243\n      },                                                                                                               // 244\n      {                                                                                                                // 245\n        \"indexed\": true,                                                                                               // 246\n        \"name\": \"addr\",                                                                                                // 247\n        \"type\": \"address\"                                                                                              // 248\n      }                                                                                                                // 249\n    ],                                                                                                                 // 250\n    \"name\": \"PrimaryChanged\",                                                                                          // 251\n    \"type\": \"event\"                                                                                                    // 252\n  }                                                                                                                    // 253\n];                                                                                                                     // 254\n                                                                                                                       // 255\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ICAPRegistrar.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/contracts/ICAPRegistrar.json                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = [                                                                                                     // 1\n  {                                                                                                                    // 2\n    \"constant\": true,                                                                                                  // 3\n    \"inputs\": [                                                                                                        // 4\n      {                                                                                                                // 5\n        \"name\": \"_name\",                                                                                               // 6\n        \"type\": \"bytes32\"                                                                                              // 7\n      }                                                                                                                // 8\n    ],                                                                                                                 // 9\n    \"name\": \"owner\",                                                                                                   // 10\n    \"outputs\": [                                                                                                       // 11\n      {                                                                                                                // 12\n        \"name\": \"\",                                                                                                    // 13\n        \"type\": \"address\"                                                                                              // 14\n      }                                                                                                                // 15\n    ],                                                                                                                 // 16\n    \"type\": \"function\"                                                                                                 // 17\n  },                                                                                                                   // 18\n  {                                                                                                                    // 19\n    \"constant\": false,                                                                                                 // 20\n    \"inputs\": [                                                                                                        // 21\n      {                                                                                                                // 22\n        \"name\": \"_name\",                                                                                               // 23\n        \"type\": \"bytes32\"                                                                                              // 24\n      },                                                                                                               // 25\n      {                                                                                                                // 26\n        \"name\": \"_refund\",                                                                                             // 27\n        \"type\": \"address\"                                                                                              // 28\n      }                                                                                                                // 29\n    ],                                                                                                                 // 30\n    \"name\": \"disown\",                                                                                                  // 31\n    \"outputs\": [],                                                                                                     // 32\n    \"type\": \"function\"                                                                                                 // 33\n  },                                                                                                                   // 34\n  {                                                                                                                    // 35\n    \"constant\": true,                                                                                                  // 36\n    \"inputs\": [                                                                                                        // 37\n      {                                                                                                                // 38\n        \"name\": \"_name\",                                                                                               // 39\n        \"type\": \"bytes32\"                                                                                              // 40\n      }                                                                                                                // 41\n    ],                                                                                                                 // 42\n    \"name\": \"addr\",                                                                                                    // 43\n    \"outputs\": [                                                                                                       // 44\n      {                                                                                                                // 45\n        \"name\": \"\",                                                                                                    // 46\n        \"type\": \"address\"                                                                                              // 47\n      }                                                                                                                // 48\n    ],                                                                                                                 // 49\n    \"type\": \"function\"                                                                                                 // 50\n  },                                                                                                                   // 51\n  {                                                                                                                    // 52\n    \"constant\": false,                                                                                                 // 53\n    \"inputs\": [                                                                                                        // 54\n      {                                                                                                                // 55\n        \"name\": \"_name\",                                                                                               // 56\n        \"type\": \"bytes32\"                                                                                              // 57\n      }                                                                                                                // 58\n    ],                                                                                                                 // 59\n    \"name\": \"reserve\",                                                                                                 // 60\n    \"outputs\": [],                                                                                                     // 61\n    \"type\": \"function\"                                                                                                 // 62\n  },                                                                                                                   // 63\n  {                                                                                                                    // 64\n    \"constant\": false,                                                                                                 // 65\n    \"inputs\": [                                                                                                        // 66\n      {                                                                                                                // 67\n        \"name\": \"_name\",                                                                                               // 68\n        \"type\": \"bytes32\"                                                                                              // 69\n      },                                                                                                               // 70\n      {                                                                                                                // 71\n        \"name\": \"_newOwner\",                                                                                           // 72\n        \"type\": \"address\"                                                                                              // 73\n      }                                                                                                                // 74\n    ],                                                                                                                 // 75\n    \"name\": \"transfer\",                                                                                                // 76\n    \"outputs\": [],                                                                                                     // 77\n    \"type\": \"function\"                                                                                                 // 78\n  },                                                                                                                   // 79\n  {                                                                                                                    // 80\n    \"constant\": false,                                                                                                 // 81\n    \"inputs\": [                                                                                                        // 82\n      {                                                                                                                // 83\n        \"name\": \"_name\",                                                                                               // 84\n        \"type\": \"bytes32\"                                                                                              // 85\n      },                                                                                                               // 86\n      {                                                                                                                // 87\n        \"name\": \"_a\",                                                                                                  // 88\n        \"type\": \"address\"                                                                                              // 89\n      }                                                                                                                // 90\n    ],                                                                                                                 // 91\n    \"name\": \"setAddr\",                                                                                                 // 92\n    \"outputs\": [],                                                                                                     // 93\n    \"type\": \"function\"                                                                                                 // 94\n  },                                                                                                                   // 95\n  {                                                                                                                    // 96\n    \"anonymous\": false,                                                                                                // 97\n    \"inputs\": [                                                                                                        // 98\n      {                                                                                                                // 99\n        \"indexed\": true,                                                                                               // 100\n        \"name\": \"name\",                                                                                                // 101\n        \"type\": \"bytes32\"                                                                                              // 102\n      }                                                                                                                // 103\n    ],                                                                                                                 // 104\n    \"name\": \"Changed\",                                                                                                 // 105\n    \"type\": \"event\"                                                                                                    // 106\n  }                                                                                                                    // 107\n];                                                                                                                     // 108\n                                                                                                                       // 109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"SmartExchange.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/contracts/SmartExchange.json                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = [                                                                                                     // 1\n  {                                                                                                                    // 2\n    \"constant\": false,                                                                                                 // 3\n    \"inputs\": [                                                                                                        // 4\n      {                                                                                                                // 5\n        \"name\": \"from\",                                                                                                // 6\n        \"type\": \"bytes32\"                                                                                              // 7\n      },                                                                                                               // 8\n      {                                                                                                                // 9\n        \"name\": \"to\",                                                                                                  // 10\n        \"type\": \"address\"                                                                                              // 11\n      },                                                                                                               // 12\n      {                                                                                                                // 13\n        \"name\": \"value\",                                                                                               // 14\n        \"type\": \"uint256\"                                                                                              // 15\n      }                                                                                                                // 16\n    ],                                                                                                                 // 17\n    \"name\": \"transfer\",                                                                                                // 18\n    \"outputs\": [],                                                                                                     // 19\n    \"type\": \"function\"                                                                                                 // 20\n  },                                                                                                                   // 21\n  {                                                                                                                    // 22\n    \"constant\": false,                                                                                                 // 23\n    \"inputs\": [                                                                                                        // 24\n      {                                                                                                                // 25\n        \"name\": \"from\",                                                                                                // 26\n        \"type\": \"bytes32\"                                                                                              // 27\n      },                                                                                                               // 28\n      {                                                                                                                // 29\n        \"name\": \"to\",                                                                                                  // 30\n        \"type\": \"address\"                                                                                              // 31\n      },                                                                                                               // 32\n      {                                                                                                                // 33\n        \"name\": \"indirectId\",                                                                                          // 34\n        \"type\": \"bytes32\"                                                                                              // 35\n      },                                                                                                               // 36\n      {                                                                                                                // 37\n        \"name\": \"value\",                                                                                               // 38\n        \"type\": \"uint256\"                                                                                              // 39\n      }                                                                                                                // 40\n    ],                                                                                                                 // 41\n    \"name\": \"icapTransfer\",                                                                                            // 42\n    \"outputs\": [],                                                                                                     // 43\n    \"type\": \"function\"                                                                                                 // 44\n  },                                                                                                                   // 45\n  {                                                                                                                    // 46\n    \"constant\": false,                                                                                                 // 47\n    \"inputs\": [                                                                                                        // 48\n      {                                                                                                                // 49\n        \"name\": \"to\",                                                                                                  // 50\n        \"type\": \"bytes32\"                                                                                              // 51\n      }                                                                                                                // 52\n    ],                                                                                                                 // 53\n    \"name\": \"deposit\",                                                                                                 // 54\n    \"outputs\": [],                                                                                                     // 55\n    \"type\": \"function\"                                                                                                 // 56\n  },                                                                                                                   // 57\n  {                                                                                                                    // 58\n    \"anonymous\": false,                                                                                                // 59\n    \"inputs\": [                                                                                                        // 60\n      {                                                                                                                // 61\n        \"indexed\": true,                                                                                               // 62\n        \"name\": \"from\",                                                                                                // 63\n        \"type\": \"address\"                                                                                              // 64\n      },                                                                                                               // 65\n      {                                                                                                                // 66\n        \"indexed\": false,                                                                                              // 67\n        \"name\": \"value\",                                                                                               // 68\n        \"type\": \"uint256\"                                                                                              // 69\n      }                                                                                                                // 70\n    ],                                                                                                                 // 71\n    \"name\": \"AnonymousDeposit\",                                                                                        // 72\n    \"type\": \"event\"                                                                                                    // 73\n  },                                                                                                                   // 74\n  {                                                                                                                    // 75\n    \"anonymous\": false,                                                                                                // 76\n    \"inputs\": [                                                                                                        // 77\n      {                                                                                                                // 78\n        \"indexed\": true,                                                                                               // 79\n        \"name\": \"from\",                                                                                                // 80\n        \"type\": \"address\"                                                                                              // 81\n      },                                                                                                               // 82\n      {                                                                                                                // 83\n        \"indexed\": true,                                                                                               // 84\n        \"name\": \"to\",                                                                                                  // 85\n        \"type\": \"bytes32\"                                                                                              // 86\n      },                                                                                                               // 87\n      {                                                                                                                // 88\n        \"indexed\": false,                                                                                              // 89\n        \"name\": \"value\",                                                                                               // 90\n        \"type\": \"uint256\"                                                                                              // 91\n      }                                                                                                                // 92\n    ],                                                                                                                 // 93\n    \"name\": \"Deposit\",                                                                                                 // 94\n    \"type\": \"event\"                                                                                                    // 95\n  },                                                                                                                   // 96\n  {                                                                                                                    // 97\n    \"anonymous\": false,                                                                                                // 98\n    \"inputs\": [                                                                                                        // 99\n      {                                                                                                                // 100\n        \"indexed\": true,                                                                                               // 101\n        \"name\": \"from\",                                                                                                // 102\n        \"type\": \"bytes32\"                                                                                              // 103\n      },                                                                                                               // 104\n      {                                                                                                                // 105\n        \"indexed\": true,                                                                                               // 106\n        \"name\": \"to\",                                                                                                  // 107\n        \"type\": \"address\"                                                                                              // 108\n      },                                                                                                               // 109\n      {                                                                                                                // 110\n        \"indexed\": false,                                                                                              // 111\n        \"name\": \"value\",                                                                                               // 112\n        \"type\": \"uint256\"                                                                                              // 113\n      }                                                                                                                // 114\n    ],                                                                                                                 // 115\n    \"name\": \"Transfer\",                                                                                                // 116\n    \"type\": \"event\"                                                                                                    // 117\n  },                                                                                                                   // 118\n  {                                                                                                                    // 119\n    \"anonymous\": false,                                                                                                // 120\n    \"inputs\": [                                                                                                        // 121\n      {                                                                                                                // 122\n        \"indexed\": true,                                                                                               // 123\n        \"name\": \"from\",                                                                                                // 124\n        \"type\": \"bytes32\"                                                                                              // 125\n      },                                                                                                               // 126\n      {                                                                                                                // 127\n        \"indexed\": true,                                                                                               // 128\n        \"name\": \"to\",                                                                                                  // 129\n        \"type\": \"address\"                                                                                              // 130\n      },                                                                                                               // 131\n      {                                                                                                                // 132\n        \"indexed\": false,                                                                                              // 133\n        \"name\": \"indirectId\",                                                                                          // 134\n        \"type\": \"bytes32\"                                                                                              // 135\n      },                                                                                                               // 136\n      {                                                                                                                // 137\n        \"indexed\": false,                                                                                              // 138\n        \"name\": \"value\",                                                                                               // 139\n        \"type\": \"uint256\"                                                                                              // 140\n      }                                                                                                                // 141\n    ],                                                                                                                 // 142\n    \"name\": \"IcapTransfer\",                                                                                            // 143\n    \"type\": \"event\"                                                                                                    // 144\n  }                                                                                                                    // 145\n];                                                                                                                     // 146\n                                                                                                                       // 147\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"version.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/lib/version.json                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {                                                                                                     // 1\n  \"version\": \"0.17.0-alpha\"                                                                                            // 2\n};                                                                                                                     // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"node_modules\":{\"bignumber.js\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/node_modules/bignumber.js/package.json                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"bignumber.js\";                                                                                         // 1\nexports.version = \"2.0.7\";                                                                                             // 2\nexports.main = \"bignumber\";                                                                                            // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bignumber.js\":[\"crypto\",\"meteor-node-stubs/deps/crypto\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/web3/node_modules/bignumber.js/bignumber.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */                                             // 1\n                                                                                                                       // 2\n;(function (global) {                                                                                                  // 3\n    'use strict';                                                                                                      // 4\n                                                                                                                       // 5\n    /*                                                                                                                 // 6\n      bignumber.js v2.0.7                                                                                              // 7\n      A JavaScript library for arbitrary-precision arithmetic.                                                         // 8\n      https://github.com/MikeMcl/bignumber.js                                                                          // 9\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>                                                        // 10\n      MIT Expat Licence                                                                                                // 11\n    */                                                                                                                 // 12\n                                                                                                                       // 13\n                                                                                                                       // 14\n    var BigNumber, crypto, parseNumeric,                                                                               // 15\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,                                                            // 16\n        mathceil = Math.ceil,                                                                                          // 17\n        mathfloor = Math.floor,                                                                                        // 18\n        notBool = ' not a boolean or binary digit',                                                                    // 19\n        roundingMode = 'rounding mode',                                                                                // 20\n        tooManyDigits = 'number type has more than 15 significant digits',                                             // 21\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',                                 // 22\n        BASE = 1e14,                                                                                                   // 23\n        LOG_BASE = 14,                                                                                                 // 24\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1                                                       // 25\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1                                                       // 26\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],                            // 27\n        SQRT_BASE = 1e7,                                                                                               // 28\n                                                                                                                       // 29\n        /*                                                                                                             // 30\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and                     // 31\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an                         // 32\n         * exception is thrown (if ERRORS is true).                                                                    // 33\n         */                                                                                                            // 34\n        MAX = 1E9;                                   // 0 to MAX_INT32                                                 // 35\n                                                                                                                       // 36\n                                                                                                                       // 37\n    /*                                                                                                                 // 38\n     * Create and return a BigNumber constructor.                                                                      // 39\n     */                                                                                                                // 40\n    function another(configObj) {                                                                                      // 41\n        var div,                                                                                                       // 42\n                                                                                                                       // 43\n            // id tracks the caller function, so its name can be included in error messages.                           // 44\n            id = 0,                                                                                                    // 45\n            P = BigNumber.prototype,                                                                                   // 46\n            ONE = new BigNumber(1),                                                                                    // 47\n                                                                                                                       // 48\n                                                                                                                       // 49\n            /********************************* EDITABLE DEFAULTS **********************************/                   // 50\n                                                                                                                       // 51\n                                                                                                                       // 52\n            /*                                                                                                         // 53\n             * The default values below must be integers within the inclusive ranges stated.                           // 54\n             * The values can also be changed at run-time using BigNumber.config.                                      // 55\n             */                                                                                                        // 56\n                                                                                                                       // 57\n            // The maximum number of decimal places for operations involving division.                                 // 58\n            DECIMAL_PLACES = 20,                     // 0 to MAX                                                       // 59\n                                                                                                                       // 60\n            /*                                                                                                         // 61\n             * The rounding mode used when rounding to the above decimal places, and when using                        // 62\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).                            // 63\n             * UP         0 Away from zero.                                                                            // 64\n             * DOWN       1 Towards zero.                                                                              // 65\n             * CEIL       2 Towards +Infinity.                                                                         // 66\n             * FLOOR      3 Towards -Infinity.                                                                         // 67\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.                                             // 68\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.                                           // 69\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.                         // 70\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.                              // 71\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.                              // 72\n             */                                                                                                        // 73\n            ROUNDING_MODE = 4,                       // 0 to 8                                                         // 74\n                                                                                                                       // 75\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]                                                              // 76\n                                                                                                                       // 77\n            // The exponent value at and beneath which toString returns exponential notation.                          // 78\n            // Number type: -7                                                                                         // 79\n            TO_EXP_NEG = -7,                         // 0 to -MAX                                                      // 80\n                                                                                                                       // 81\n            // The exponent value at and above which toString returns exponential notation.                            // 82\n            // Number type: 21                                                                                         // 83\n            TO_EXP_POS = 21,                         // 0 to MAX                                                       // 84\n                                                                                                                       // 85\n            // RANGE : [MIN_EXP, MAX_EXP]                                                                              // 86\n                                                                                                                       // 87\n            // The minimum exponent value, beneath which underflow to zero occurs.                                     // 88\n            // Number type: -324  (5e-324)                                                                             // 89\n            MIN_EXP = -1e7,                          // -1 to -MAX                                                     // 90\n                                                                                                                       // 91\n            // The maximum exponent value, above which overflow to Infinity occurs.                                    // 92\n            // Number type:  308  (1.7976931348623157e+308)                                                            // 93\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.                               // 94\n            MAX_EXP = 1e7,                           // 1 to MAX                                                       // 95\n                                                                                                                       // 96\n            // Whether BigNumber Errors are ever thrown.                                                               // 97\n            ERRORS = true,                           // true or false                                                  // 98\n                                                                                                                       // 99\n            // Change to intValidatorNoErrors if ERRORS is false.                                                      // 100\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors                    // 101\n                                                                                                                       // 102\n            // Whether to use cryptographically-secure random number generation, if available.                         // 103\n            CRYPTO = false,                          // true or false                                                  // 104\n                                                                                                                       // 105\n            /*                                                                                                         // 106\n             * The modulo mode used when calculating the modulus: a mod n.                                             // 107\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.                    // 108\n             * The remainder (r) is calculated as: r = a - n * q.                                                      // 109\n             *                                                                                                         // 110\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.                    // 111\n             * DOWN      1 The remainder has the same sign as the dividend.                                            // 112\n             *             This modulo mode is commonly known as 'truncated division' and is                           // 113\n             *             equivalent to (a % n) in JavaScript.                                                        // 114\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).                                  // 115\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.                                // 116\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).                                        // 117\n             *             The remainder is always positive.                                                           // 118\n             *                                                                                                         // 119\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder                     // 120\n             * modes are commonly used for the modulus operation.                                                      // 121\n             * Although the other rounding modes can also be used, they may not give useful results.                   // 122\n             */                                                                                                        // 123\n            MODULO_MODE = 1,                         // 0 to 9                                                         // 124\n                                                                                                                       // 125\n            // The maximum number of significant digits of the result of the toPower operation.                        // 126\n            // If POW_PRECISION is 0, there will be unlimited significant digits.                                      // 127\n            POW_PRECISION = 100,                     // 0 to MAX                                                       // 128\n                                                                                                                       // 129\n            // The format specification used by the BigNumber.prototype.toFormat method.                               // 130\n            FORMAT = {                                                                                                 // 131\n                decimalSeparator: '.',                                                                                 // 132\n                groupSeparator: ',',                                                                                   // 133\n                groupSize: 3,                                                                                          // 134\n                secondaryGroupSize: 0,                                                                                 // 135\n                fractionGroupSeparator: '\\xA0',      // non-breaking space                                             // 136\n                fractionGroupSize: 0                                                                                   // 137\n            };                                                                                                         // 138\n                                                                                                                       // 139\n                                                                                                                       // 140\n        /******************************************************************************************/                   // 141\n                                                                                                                       // 142\n                                                                                                                       // 143\n        // CONSTRUCTOR                                                                                                 // 144\n                                                                                                                       // 145\n                                                                                                                       // 146\n        /*                                                                                                             // 147\n         * The BigNumber constructor and exported function.                                                            // 148\n         * Create and return a new instance of a BigNumber object.                                                     // 149\n         *                                                                                                             // 150\n         * n {number|string|BigNumber} A numeric value.                                                                // 151\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.                                                     // 152\n         */                                                                                                            // 153\n        function BigNumber( n, b ) {                                                                                   // 154\n            var c, e, i, num, len, str,                                                                                // 155\n                x = this;                                                                                              // 156\n                                                                                                                       // 157\n            // Enable constructor usage without new.                                                                   // 158\n            if ( !( x instanceof BigNumber ) ) {                                                                       // 159\n                                                                                                                       // 160\n                // 'BigNumber() constructor call without new: {n}'                                                     // 161\n                if (ERRORS) raise( 26, 'constructor call without new', n );                                            // 162\n                return new BigNumber( n, b );                                                                          // 163\n            }                                                                                                          // 164\n                                                                                                                       // 165\n            // 'new BigNumber() base not an integer: {b}'                                                              // 166\n            // 'new BigNumber() base out of range: {b}'                                                                // 167\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {                                                  // 168\n                                                                                                                       // 169\n                // Duplicate.                                                                                          // 170\n                if ( n instanceof BigNumber ) {                                                                        // 171\n                    x.s = n.s;                                                                                         // 172\n                    x.e = n.e;                                                                                         // 173\n                    x.c = ( n = n.c ) ? n.slice() : n;                                                                 // 174\n                    id = 0;                                                                                            // 175\n                    return;                                                                                            // 176\n                }                                                                                                      // 177\n                                                                                                                       // 178\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {                                                  // 179\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;                                                              // 180\n                                                                                                                       // 181\n                    // Fast path for integers.                                                                         // 182\n                    if ( n === ~~n ) {                                                                                 // 183\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );                                                   // 184\n                        x.e = e;                                                                                       // 185\n                        x.c = [n];                                                                                     // 186\n                        id = 0;                                                                                        // 187\n                        return;                                                                                        // 188\n                    }                                                                                                  // 189\n                                                                                                                       // 190\n                    str = n + '';                                                                                      // 191\n                } else {                                                                                               // 192\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );                         // 193\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 194\n                }                                                                                                      // 195\n            } else {                                                                                                   // 196\n                b = b | 0;                                                                                             // 197\n                str = n + '';                                                                                          // 198\n                                                                                                                       // 199\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.                               // 200\n                // Allow exponential notation to be used with base 10 argument.                                        // 201\n                if ( b == 10 ) {                                                                                       // 202\n                    x = new BigNumber( n instanceof BigNumber ? n : str );                                             // 203\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );                                        // 204\n                }                                                                                                      // 205\n                                                                                                                       // 206\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.                              // 207\n                // Any number in exponential form will fail due to the [Ee][+-].                                       // 208\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||                                                   // 209\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +                                 // 210\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {                                           // 211\n                    return parseNumeric( x, str, num, b );                                                             // 212\n                }                                                                                                      // 213\n                                                                                                                       // 214\n                if (num) {                                                                                             // 215\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;                                                  // 216\n                                                                                                                       // 217\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {                                      // 218\n                                                                                                                       // 219\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'                      // 220\n                        raise( id, tooManyDigits, n );                                                                 // 221\n                    }                                                                                                  // 222\n                                                                                                                       // 223\n                    // Prevent later check for length on converted number.                                             // 224\n                    num = false;                                                                                       // 225\n                } else {                                                                                               // 226\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;                                   // 227\n                }                                                                                                      // 228\n                                                                                                                       // 229\n                str = convertBase( str, 10, b, x.s );                                                                  // 230\n            }                                                                                                          // 231\n                                                                                                                       // 232\n            // Decimal point?                                                                                          // 233\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );                                         // 234\n                                                                                                                       // 235\n            // Exponential form?                                                                                       // 236\n            if ( ( i = str.search( /e/i ) ) > 0 ) {                                                                    // 237\n                                                                                                                       // 238\n                // Determine exponent.                                                                                 // 239\n                if ( e < 0 ) e = i;                                                                                    // 240\n                e += +str.slice( i + 1 );                                                                              // 241\n                str = str.substring( 0, i );                                                                           // 242\n            } else if ( e < 0 ) {                                                                                      // 243\n                                                                                                                       // 244\n                // Integer.                                                                                            // 245\n                e = str.length;                                                                                        // 246\n            }                                                                                                          // 247\n                                                                                                                       // 248\n            // Determine leading zeros.                                                                                // 249\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );                                                              // 250\n                                                                                                                       // 251\n            // Determine trailing zeros.                                                                               // 252\n            for ( len = str.length; str.charCodeAt(--len) === 48; );                                                   // 253\n            str = str.slice( i, len + 1 );                                                                             // 254\n                                                                                                                       // 255\n            if (str) {                                                                                                 // 256\n                len = str.length;                                                                                      // 257\n                                                                                                                       // 258\n                // Disallow numbers with over 15 significant digits if number type.                                    // 259\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'                              // 260\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );                                  // 261\n                                                                                                                       // 262\n                e = e - i - 1;                                                                                         // 263\n                                                                                                                       // 264\n                 // Overflow?                                                                                          // 265\n                if ( e > MAX_EXP ) {                                                                                   // 266\n                                                                                                                       // 267\n                    // Infinity.                                                                                       // 268\n                    x.c = x.e = null;                                                                                  // 269\n                                                                                                                       // 270\n                // Underflow?                                                                                          // 271\n                } else if ( e < MIN_EXP ) {                                                                            // 272\n                                                                                                                       // 273\n                    // Zero.                                                                                           // 274\n                    x.c = [ x.e = 0 ];                                                                                 // 275\n                } else {                                                                                               // 276\n                    x.e = e;                                                                                           // 277\n                    x.c = [];                                                                                          // 278\n                                                                                                                       // 279\n                    // Transform base                                                                                  // 280\n                                                                                                                       // 281\n                    // e is the base 10 exponent.                                                                      // 282\n                    // i is where to slice str to get the first element of the coefficient array.                      // 283\n                    i = ( e + 1 ) % LOG_BASE;                                                                          // 284\n                    if ( e < 0 ) i += LOG_BASE;                                                                        // 285\n                                                                                                                       // 286\n                    if ( i < len ) {                                                                                   // 287\n                        if (i) x.c.push( +str.slice( 0, i ) );                                                         // 288\n                                                                                                                       // 289\n                        for ( len -= LOG_BASE; i < len; ) {                                                            // 290\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );                                                // 291\n                        }                                                                                              // 292\n                                                                                                                       // 293\n                        str = str.slice(i);                                                                            // 294\n                        i = LOG_BASE - str.length;                                                                     // 295\n                    } else {                                                                                           // 296\n                        i -= len;                                                                                      // 297\n                    }                                                                                                  // 298\n                                                                                                                       // 299\n                    for ( ; i--; str += '0' );                                                                         // 300\n                    x.c.push( +str );                                                                                  // 301\n                }                                                                                                      // 302\n            } else {                                                                                                   // 303\n                                                                                                                       // 304\n                // Zero.                                                                                               // 305\n                x.c = [ x.e = 0 ];                                                                                     // 306\n            }                                                                                                          // 307\n                                                                                                                       // 308\n            id = 0;                                                                                                    // 309\n        }                                                                                                              // 310\n                                                                                                                       // 311\n                                                                                                                       // 312\n        // CONSTRUCTOR PROPERTIES                                                                                      // 313\n                                                                                                                       // 314\n                                                                                                                       // 315\n        BigNumber.another = another;                                                                                   // 316\n                                                                                                                       // 317\n        BigNumber.ROUND_UP = 0;                                                                                        // 318\n        BigNumber.ROUND_DOWN = 1;                                                                                      // 319\n        BigNumber.ROUND_CEIL = 2;                                                                                      // 320\n        BigNumber.ROUND_FLOOR = 3;                                                                                     // 321\n        BigNumber.ROUND_HALF_UP = 4;                                                                                   // 322\n        BigNumber.ROUND_HALF_DOWN = 5;                                                                                 // 323\n        BigNumber.ROUND_HALF_EVEN = 6;                                                                                 // 324\n        BigNumber.ROUND_HALF_CEIL = 7;                                                                                 // 325\n        BigNumber.ROUND_HALF_FLOOR = 8;                                                                                // 326\n        BigNumber.EUCLID = 9;                                                                                          // 327\n                                                                                                                       // 328\n                                                                                                                       // 329\n        /*                                                                                                             // 330\n         * Configure infrequently-changing library-wide settings.                                                      // 331\n         *                                                                                                             // 332\n         * Accept an object or an argument list, with one or many of the following properties or                       // 333\n         * parameters respectively:                                                                                    // 334\n         *                                                                                                             // 335\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive                                                     // 336\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive                                                       // 337\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or                                      // 338\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]                              // 339\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or                             // 340\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]                     // 341\n         *   ERRORS          {boolean|number}   true, false, 1 or 0                                                    // 342\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0                                                    // 343\n         *   MODULO_MODE     {number}           0 to 9 inclusive                                                       // 344\n         *   POW_PRECISION   {number}           0 to MAX inclusive                                                     // 345\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat                                       // 346\n         *      decimalSeparator       {string}                                                                        // 347\n         *      groupSeparator         {string}                                                                        // 348\n         *      groupSize              {number}                                                                        // 349\n         *      secondaryGroupSize     {number}                                                                        // 350\n         *      fractionGroupSeparator {string}                                                                        // 351\n         *      fractionGroupSize      {number}                                                                        // 352\n         *                                                                                                             // 353\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)                   // 354\n         *                                                                                                             // 355\n         * E.g.                                                                                                        // 356\n         * BigNumber.config(20, 4) is equivalent to                                                                    // 357\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })                                                // 358\n         *                                                                                                             // 359\n         * Ignore properties/parameters set to null or undefined.                                                      // 360\n         * Return an object with the properties current values.                                                        // 361\n         */                                                                                                            // 362\n        BigNumber.config = function () {                                                                               // 363\n            var v, p,                                                                                                  // 364\n                i = 0,                                                                                                 // 365\n                r = {},                                                                                                // 366\n                a = arguments,                                                                                         // 367\n                o = a[0],                                                                                              // 368\n                has = o && typeof o == 'object'                                                                        // 369\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }                            // 370\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };                                // 371\n                                                                                                                       // 372\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.                                                    // 373\n            // 'config() DECIMAL_PLACES not an integer: {v}'                                                           // 374\n            // 'config() DECIMAL_PLACES out of range: {v}'                                                             // 375\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                      // 376\n                DECIMAL_PLACES = v | 0;                                                                                // 377\n            }                                                                                                          // 378\n            r[p] = DECIMAL_PLACES;                                                                                     // 379\n                                                                                                                       // 380\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.                                                       // 381\n            // 'config() ROUNDING_MODE not an integer: {v}'                                                            // 382\n            // 'config() ROUNDING_MODE out of range: {v}'                                                              // 383\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {                                         // 384\n                ROUNDING_MODE = v | 0;                                                                                 // 385\n            }                                                                                                          // 386\n            r[p] = ROUNDING_MODE;                                                                                      // 387\n                                                                                                                       // 388\n            // EXPONENTIAL_AT {number|number[]}                                                                        // 389\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].                    // 390\n            // 'config() EXPONENTIAL_AT not an integer: {v}'                                                           // 391\n            // 'config() EXPONENTIAL_AT out of range: {v}'                                                             // 392\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {                                                                       // 393\n                                                                                                                       // 394\n                if ( isArray(v) ) {                                                                                    // 395\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {                     // 396\n                        TO_EXP_NEG = v[0] | 0;                                                                         // 397\n                        TO_EXP_POS = v[1] | 0;                                                                         // 398\n                    }                                                                                                  // 399\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 400\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );                                             // 401\n                }                                                                                                      // 402\n            }                                                                                                          // 403\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];                                                                         // 404\n                                                                                                                       // 405\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or                                      // 406\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].                                             // 407\n            // 'config() RANGE not an integer: {v}'                                                                    // 408\n            // 'config() RANGE cannot be zero: {v}'                                                                    // 409\n            // 'config() RANGE out of range: {v}'                                                                      // 410\n            if ( has( p = 'RANGE' ) ) {                                                                                // 411\n                                                                                                                       // 412\n                if ( isArray(v) ) {                                                                                    // 413\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {                    // 414\n                        MIN_EXP = v[0] | 0;                                                                            // 415\n                        MAX_EXP = v[1] | 0;                                                                            // 416\n                    }                                                                                                  // 417\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {                                                       // 418\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );                                      // 419\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );                                             // 420\n                }                                                                                                      // 421\n            }                                                                                                          // 422\n            r[p] = [ MIN_EXP, MAX_EXP ];                                                                               // 423\n                                                                                                                       // 424\n            // ERRORS {boolean|number} true, false, 1 or 0.                                                            // 425\n            // 'config() ERRORS not a boolean or binary digit: {v}'                                                    // 426\n            if ( has( p = 'ERRORS' ) ) {                                                                               // 427\n                                                                                                                       // 428\n                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 429\n                    id = 0;                                                                                            // 430\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;                     // 431\n                } else if (ERRORS) {                                                                                   // 432\n                    raise( 2, p + notBool, v );                                                                        // 433\n                }                                                                                                      // 434\n            }                                                                                                          // 435\n            r[p] = ERRORS;                                                                                             // 436\n                                                                                                                       // 437\n            // CRYPTO {boolean|number} true, false, 1 or 0.                                                            // 438\n            // 'config() CRYPTO not a boolean or binary digit: {v}'                                                    // 439\n            // 'config() crypto unavailable: {crypto}'                                                                 // 440\n            if ( has( p = 'CRYPTO' ) ) {                                                                               // 441\n                                                                                                                       // 442\n                if ( v === !!v || v === 1 || v === 0 ) {                                                               // 443\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );                                           // 444\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );                            // 445\n                } else if (ERRORS) {                                                                                   // 446\n                    raise( 2, p + notBool, v );                                                                        // 447\n                }                                                                                                      // 448\n            }                                                                                                          // 449\n            r[p] = CRYPTO;                                                                                             // 450\n                                                                                                                       // 451\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.                                                         // 452\n            // 'config() MODULO_MODE not an integer: {v}'                                                              // 453\n            // 'config() MODULO_MODE out of range: {v}'                                                                // 454\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {                                           // 455\n                MODULO_MODE = v | 0;                                                                                   // 456\n            }                                                                                                          // 457\n            r[p] = MODULO_MODE;                                                                                        // 458\n                                                                                                                       // 459\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.                                                     // 460\n            // 'config() POW_PRECISION not an integer: {v}'                                                            // 461\n            // 'config() POW_PRECISION out of range: {v}'                                                              // 462\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {                                       // 463\n                POW_PRECISION = v | 0;                                                                                 // 464\n            }                                                                                                          // 465\n            r[p] = POW_PRECISION;                                                                                      // 466\n                                                                                                                       // 467\n            // FORMAT {object}                                                                                         // 468\n            // 'config() FORMAT not an object: {v}'                                                                    // 469\n            if ( has( p = 'FORMAT' ) ) {                                                                               // 470\n                                                                                                                       // 471\n                if ( typeof v == 'object' ) {                                                                          // 472\n                    FORMAT = v;                                                                                        // 473\n                } else if (ERRORS) {                                                                                   // 474\n                    raise( 2, p + ' not an object', v );                                                               // 475\n                }                                                                                                      // 476\n            }                                                                                                          // 477\n            r[p] = FORMAT;                                                                                             // 478\n                                                                                                                       // 479\n            return r;                                                                                                  // 480\n        };                                                                                                             // 481\n                                                                                                                       // 482\n                                                                                                                       // 483\n        /*                                                                                                             // 484\n         * Return a new BigNumber whose value is the maximum of the arguments.                                         // 485\n         *                                                                                                             // 486\n         * arguments {number|string|BigNumber}                                                                         // 487\n         */                                                                                                            // 488\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };                                           // 489\n                                                                                                                       // 490\n                                                                                                                       // 491\n        /*                                                                                                             // 492\n         * Return a new BigNumber whose value is the minimum of the arguments.                                         // 493\n         *                                                                                                             // 494\n         * arguments {number|string|BigNumber}                                                                         // 495\n         */                                                                                                            // 496\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };                                           // 497\n                                                                                                                       // 498\n                                                                                                                       // 499\n        /*                                                                                                             // 500\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,                      // 501\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing                        // 502\n         * zeros are produced).                                                                                        // 503\n         *                                                                                                             // 504\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 505\n         *                                                                                                             // 506\n         * 'random() decimal places not an integer: {dp}'                                                              // 507\n         * 'random() decimal places out of range: {dp}'                                                                // 508\n         * 'random() crypto unavailable: {crypto}'                                                                     // 509\n         */                                                                                                            // 510\n        BigNumber.random = (function () {                                                                              // 511\n            var pow2_53 = 0x20000000000000;                                                                            // 512\n                                                                                                                       // 513\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.                                             // 514\n            // Check if Math.random() produces more than 32 bits of randomness.                                        // 515\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.                    // 516\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.                                             // 517\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff                                                  // 518\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }                                           // 519\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +                                   // 520\n                  (Math.random() * 0x800000 | 0); };                                                                   // 521\n                                                                                                                       // 522\n            return function (dp) {                                                                                     // 523\n                var a, b, e, k, v,                                                                                     // 524\n                    i = 0,                                                                                             // 525\n                    c = [],                                                                                            // 526\n                    rand = new BigNumber(ONE);                                                                         // 527\n                                                                                                                       // 528\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;                            // 529\n                k = mathceil( dp / LOG_BASE );                                                                         // 530\n                                                                                                                       // 531\n                if (CRYPTO) {                                                                                          // 532\n                                                                                                                       // 533\n                    // Browsers supporting crypto.getRandomValues.                                                     // 534\n                    if ( crypto && crypto.getRandomValues ) {                                                          // 535\n                                                                                                                       // 536\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );                                       // 537\n                                                                                                                       // 538\n                        for ( ; i < k; ) {                                                                             // 539\n                                                                                                                       // 540\n                            // 53 bits:                                                                                // 541\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)                                   // 542\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000                             // 543\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)                                              // 544\n                            //                                     11111 11111111 11111111                             // 545\n                            // 0x20000 is 2^21.                                                                        // 546\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);                                                    // 547\n                                                                                                                       // 548\n                            // Rejection sampling:                                                                     // 549\n                            // 0 <= v < 9007199254740992                                                               // 550\n                            // Probability that v >= 9e15, is                                                          // 551\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251                              // 552\n                            if ( v >= 9e15 ) {                                                                         // 553\n                                b = crypto.getRandomValues( new Uint32Array(2) );                                      // 554\n                                a[i] = b[0];                                                                           // 555\n                                a[i + 1] = b[1];                                                                       // 556\n                            } else {                                                                                   // 557\n                                                                                                                       // 558\n                                // 0 <= v <= 8999999999999999                                                          // 559\n                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 560\n                                c.push( v % 1e14 );                                                                    // 561\n                                i += 2;                                                                                // 562\n                            }                                                                                          // 563\n                        }                                                                                              // 564\n                        i = k / 2;                                                                                     // 565\n                                                                                                                       // 566\n                    // Node.js supporting crypto.randomBytes.                                                          // 567\n                    } else if ( crypto && crypto.randomBytes ) {                                                       // 568\n                                                                                                                       // 569\n                        // buffer                                                                                      // 570\n                        a = crypto.randomBytes( k *= 7 );                                                              // 571\n                                                                                                                       // 572\n                        for ( ; i < k; ) {                                                                             // 573\n                                                                                                                       // 574\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40                                          // 575\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24                                                  // 576\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111                             // 577\n                            // 0 <= v < 9007199254740992                                                               // 578\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +                   // 579\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +                              // 580\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];                                   // 581\n                                                                                                                       // 582\n                            if ( v >= 9e15 ) {                                                                         // 583\n                                crypto.randomBytes(7).copy( a, i );                                                    // 584\n                            } else {                                                                                   // 585\n                                                                                                                       // 586\n                                // 0 <= (v % 1e14) <= 99999999999999                                                   // 587\n                                c.push( v % 1e14 );                                                                    // 588\n                                i += 7;                                                                                // 589\n                            }                                                                                          // 590\n                        }                                                                                              // 591\n                        i = k / 7;                                                                                     // 592\n                    } else if (ERRORS) {                                                                               // 593\n                        raise( 14, 'crypto unavailable', crypto );                                                     // 594\n                    }                                                                                                  // 595\n                }                                                                                                      // 596\n                                                                                                                       // 597\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.                      // 598\n                if (!i) {                                                                                              // 599\n                                                                                                                       // 600\n                    for ( ; i < k; ) {                                                                                 // 601\n                        v = random53bitInt();                                                                          // 602\n                        if ( v < 9e15 ) c[i++] = v % 1e14;                                                             // 603\n                    }                                                                                                  // 604\n                }                                                                                                      // 605\n                                                                                                                       // 606\n                k = c[--i];                                                                                            // 607\n                dp %= LOG_BASE;                                                                                        // 608\n                                                                                                                       // 609\n                // Convert trailing digits to zeros according to dp.                                                   // 610\n                if ( k && dp ) {                                                                                       // 611\n                    v = POWS_TEN[LOG_BASE - dp];                                                                       // 612\n                    c[i] = mathfloor( k / v ) * v;                                                                     // 613\n                }                                                                                                      // 614\n                                                                                                                       // 615\n                // Remove trailing elements which are zero.                                                            // 616\n                for ( ; c[i] === 0; c.pop(), i-- );                                                                    // 617\n                                                                                                                       // 618\n                // Zero?                                                                                               // 619\n                if ( i < 0 ) {                                                                                         // 620\n                    c = [ e = 0 ];                                                                                     // 621\n                } else {                                                                                               // 622\n                                                                                                                       // 623\n                    // Remove leading elements which are zero and adjust exponent accordingly.                         // 624\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);                                              // 625\n                                                                                                                       // 626\n                    // Count the digits of the first element of c to determine leading zeros, and...                   // 627\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);                                                     // 628\n                                                                                                                       // 629\n                    // adjust the exponent accordingly.                                                                // 630\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;                                                             // 631\n                }                                                                                                      // 632\n                                                                                                                       // 633\n                rand.e = e;                                                                                            // 634\n                rand.c = c;                                                                                            // 635\n                return rand;                                                                                           // 636\n            };                                                                                                         // 637\n        })();                                                                                                          // 638\n                                                                                                                       // 639\n                                                                                                                       // 640\n        // PRIVATE FUNCTIONS                                                                                           // 641\n                                                                                                                       // 642\n                                                                                                                       // 643\n        // Convert a numeric string of baseIn to a numeric string of baseOut.                                          // 644\n        function convertBase( str, baseOut, baseIn, sign ) {                                                           // 645\n            var d, e, k, r, x, xc, y,                                                                                  // 646\n                i = str.indexOf( '.' ),                                                                                // 647\n                dp = DECIMAL_PLACES,                                                                                   // 648\n                rm = ROUNDING_MODE;                                                                                    // 649\n                                                                                                                       // 650\n            if ( baseIn < 37 ) str = str.toLowerCase();                                                                // 651\n                                                                                                                       // 652\n            // Non-integer.                                                                                            // 653\n            if ( i >= 0 ) {                                                                                            // 654\n                k = POW_PRECISION;                                                                                     // 655\n                                                                                                                       // 656\n                // Unlimited precision.                                                                                // 657\n                POW_PRECISION = 0;                                                                                     // 658\n                str = str.replace( '.', '' );                                                                          // 659\n                y = new BigNumber(baseIn);                                                                             // 660\n                x = y.pow( str.length - i );                                                                           // 661\n                POW_PRECISION = k;                                                                                     // 662\n                                                                                                                       // 663\n                // Convert str as if an integer, then restore the fraction part by dividing the                        // 664\n                // result by its base raised to a power.                                                               // 665\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );                             // 666\n                y.e = y.c.length;                                                                                      // 667\n            }                                                                                                          // 668\n                                                                                                                       // 669\n            // Convert the number as integer.                                                                          // 670\n            xc = toBaseOut( str, baseIn, baseOut );                                                                    // 671\n            e = k = xc.length;                                                                                         // 672\n                                                                                                                       // 673\n            // Remove trailing zeros.                                                                                  // 674\n            for ( ; xc[--k] == 0; xc.pop() );                                                                          // 675\n            if ( !xc[0] ) return '0';                                                                                  // 676\n                                                                                                                       // 677\n            if ( i < 0 ) {                                                                                             // 678\n                --e;                                                                                                   // 679\n            } else {                                                                                                   // 680\n                x.c = xc;                                                                                              // 681\n                x.e = e;                                                                                               // 682\n                                                                                                                       // 683\n                // sign is needed for correct rounding.                                                                // 684\n                x.s = sign;                                                                                            // 685\n                x = div( x, y, dp, rm, baseOut );                                                                      // 686\n                xc = x.c;                                                                                              // 687\n                r = x.r;                                                                                               // 688\n                e = x.e;                                                                                               // 689\n            }                                                                                                          // 690\n                                                                                                                       // 691\n            d = e + dp + 1;                                                                                            // 692\n                                                                                                                       // 693\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.                    // 694\n            i = xc[d];                                                                                                 // 695\n            k = baseOut / 2;                                                                                           // 696\n            r = r || d < 0 || xc[d + 1] != null;                                                                       // 697\n                                                                                                                       // 698\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                // 699\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||                               // 700\n                         rm == ( x.s < 0 ? 8 : 7 ) );                                                                  // 701\n                                                                                                                       // 702\n            if ( d < 1 || !xc[0] ) {                                                                                   // 703\n                                                                                                                       // 704\n                // 1^-dp or 0.                                                                                         // 705\n                str = r ? toFixedPoint( '1', -dp ) : '0';                                                              // 706\n            } else {                                                                                                   // 707\n                xc.length = d;                                                                                         // 708\n                                                                                                                       // 709\n                if (r) {                                                                                               // 710\n                                                                                                                       // 711\n                    // Rounding up may mean the previous digit has to be rounded up and so on.                         // 712\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {                                                          // 713\n                        xc[d] = 0;                                                                                     // 714\n                                                                                                                       // 715\n                        if ( !d ) {                                                                                    // 716\n                            ++e;                                                                                       // 717\n                            xc.unshift(1);                                                                             // 718\n                        }                                                                                              // 719\n                    }                                                                                                  // 720\n                }                                                                                                      // 721\n                                                                                                                       // 722\n                // Determine trailing zeros.                                                                           // 723\n                for ( k = xc.length; !xc[--k]; );                                                                      // 724\n                                                                                                                       // 725\n                // E.g. [4, 11, 15] becomes 4bf.                                                                       // 726\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );                                    // 727\n                str = toFixedPoint( str, e );                                                                          // 728\n            }                                                                                                          // 729\n                                                                                                                       // 730\n            // The caller will add the sign.                                                                           // 731\n            return str;                                                                                                // 732\n        }                                                                                                              // 733\n                                                                                                                       // 734\n                                                                                                                       // 735\n        // Perform division in the specified base. Called by div and convertBase.                                      // 736\n        div = (function () {                                                                                           // 737\n                                                                                                                       // 738\n            // Assume non-zero x and k.                                                                                // 739\n            function multiply( x, k, base ) {                                                                          // 740\n                var m, temp, xlo, xhi,                                                                                 // 741\n                    carry = 0,                                                                                         // 742\n                    i = x.length,                                                                                      // 743\n                    klo = k % SQRT_BASE,                                                                               // 744\n                    khi = k / SQRT_BASE | 0;                                                                           // 745\n                                                                                                                       // 746\n                for ( x = x.slice(); i--; ) {                                                                          // 747\n                    xlo = x[i] % SQRT_BASE;                                                                            // 748\n                    xhi = x[i] / SQRT_BASE | 0;                                                                        // 749\n                    m = khi * xlo + xhi * klo;                                                                         // 750\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;                                      // 751\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;                                   // 752\n                    x[i] = temp % base;                                                                                // 753\n                }                                                                                                      // 754\n                                                                                                                       // 755\n                if (carry) x.unshift(carry);                                                                           // 756\n                                                                                                                       // 757\n                return x;                                                                                              // 758\n            }                                                                                                          // 759\n                                                                                                                       // 760\n            function compare( a, b, aL, bL ) {                                                                         // 761\n                var i, cmp;                                                                                            // 762\n                                                                                                                       // 763\n                if ( aL != bL ) {                                                                                      // 764\n                    cmp = aL > bL ? 1 : -1;                                                                            // 765\n                } else {                                                                                               // 766\n                                                                                                                       // 767\n                    for ( i = cmp = 0; i < aL; i++ ) {                                                                 // 768\n                                                                                                                       // 769\n                        if ( a[i] != b[i] ) {                                                                          // 770\n                            cmp = a[i] > b[i] ? 1 : -1;                                                                // 771\n                            break;                                                                                     // 772\n                        }                                                                                              // 773\n                    }                                                                                                  // 774\n                }                                                                                                      // 775\n                return cmp;                                                                                            // 776\n            }                                                                                                          // 777\n                                                                                                                       // 778\n            function subtract( a, b, aL, base ) {                                                                      // 779\n                var i = 0;                                                                                             // 780\n                                                                                                                       // 781\n                // Subtract b from a.                                                                                  // 782\n                for ( ; aL--; ) {                                                                                      // 783\n                    a[aL] -= i;                                                                                        // 784\n                    i = a[aL] < b[aL] ? 1 : 0;                                                                         // 785\n                    a[aL] = i * base + a[aL] - b[aL];                                                                  // 786\n                }                                                                                                      // 787\n                                                                                                                       // 788\n                // Remove leading zeros.                                                                               // 789\n                for ( ; !a[0] && a.length > 1; a.shift() );                                                            // 790\n            }                                                                                                          // 791\n                                                                                                                       // 792\n            // x: dividend, y: divisor.                                                                                // 793\n            return function ( x, y, dp, rm, base ) {                                                                   // 794\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,                              // 795\n                    yL, yz,                                                                                            // 796\n                    s = x.s == y.s ? 1 : -1,                                                                           // 797\n                    xc = x.c,                                                                                          // 798\n                    yc = y.c;                                                                                          // 799\n                                                                                                                       // 800\n                // Either NaN, Infinity or 0?                                                                          // 801\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {                                                                // 802\n                                                                                                                       // 803\n                    return new BigNumber(                                                                              // 804\n                                                                                                                       // 805\n                      // Return NaN if either NaN, or both Infinity or 0.                                              // 806\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :                                      // 807\n                                                                                                                       // 808\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.                     // 809\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0                                                        // 810\n                    );                                                                                                 // 811\n                }                                                                                                      // 812\n                                                                                                                       // 813\n                q = new BigNumber(s);                                                                                  // 814\n                qc = q.c = [];                                                                                         // 815\n                e = x.e - y.e;                                                                                         // 816\n                s = dp + e + 1;                                                                                        // 817\n                                                                                                                       // 818\n                if ( !base ) {                                                                                         // 819\n                    base = BASE;                                                                                       // 820\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );                                       // 821\n                    s = s / LOG_BASE | 0;                                                                              // 822\n                }                                                                                                      // 823\n                                                                                                                       // 824\n                // Result exponent may be one less then the current value of e.                                        // 825\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.                        // 826\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );                                                           // 827\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;                                                                     // 828\n                                                                                                                       // 829\n                if ( s < 0 ) {                                                                                         // 830\n                    qc.push(1);                                                                                        // 831\n                    more = true;                                                                                       // 832\n                } else {                                                                                               // 833\n                    xL = xc.length;                                                                                    // 834\n                    yL = yc.length;                                                                                    // 835\n                    i = 0;                                                                                             // 836\n                    s += 2;                                                                                            // 837\n                                                                                                                       // 838\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.                                // 839\n                                                                                                                       // 840\n                    n = mathfloor( base / ( yc[0] + 1 ) );                                                             // 841\n                                                                                                                       // 842\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.                         // 843\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {                                                  // 844\n                    if ( n > 1 ) {                                                                                     // 845\n                        yc = multiply( yc, n, base );                                                                  // 846\n                        xc = multiply( xc, n, base );                                                                  // 847\n                        yL = yc.length;                                                                                // 848\n                        xL = xc.length;                                                                                // 849\n                    }                                                                                                  // 850\n                                                                                                                       // 851\n                    xi = yL;                                                                                           // 852\n                    rem = xc.slice( 0, yL );                                                                           // 853\n                    remL = rem.length;                                                                                 // 854\n                                                                                                                       // 855\n                    // Add zeros to make remainder as long as divisor.                                                 // 856\n                    for ( ; remL < yL; rem[remL++] = 0 );                                                              // 857\n                    yz = yc.slice();                                                                                   // 858\n                    yz.unshift(0);                                                                                     // 859\n                    yc0 = yc[0];                                                                                       // 860\n                    if ( yc[1] >= base / 2 ) yc0++;                                                                    // 861\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.                          // 862\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;                                              // 863\n                                                                                                                       // 864\n                    do {                                                                                               // 865\n                        n = 0;                                                                                         // 866\n                                                                                                                       // 867\n                        // Compare divisor and remainder.                                                              // 868\n                        cmp = compare( yc, rem, yL, remL );                                                            // 869\n                                                                                                                       // 870\n                        // If divisor < remainder.                                                                     // 871\n                        if ( cmp < 0 ) {                                                                               // 872\n                                                                                                                       // 873\n                            // Calculate trial digit, n.                                                               // 874\n                                                                                                                       // 875\n                            rem0 = rem[0];                                                                             // 876\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );                                    // 877\n                                                                                                                       // 878\n                            // n is how many times the divisor goes into the current remainder.                        // 879\n                            n = mathfloor( rem0 / yc0 );                                                               // 880\n                                                                                                                       // 881\n                            //  Algorithm:                                                                             // 882\n                            //  1. product = divisor * trial digit (n)                                                 // 883\n                            //  2. if product > remainder: product -= divisor, n--                                     // 884\n                            //  3. remainder -= product                                                                // 885\n                            //  4. if product was < remainder at 2:                                                    // 886\n                            //    5. compare new remainder and divisor                                                 // 887\n                            //    6. If remainder > divisor: remainder -= divisor, n++                                 // 888\n                                                                                                                       // 889\n                            if ( n > 1 ) {                                                                             // 890\n                                                                                                                       // 891\n                                // n may be > base only when base is 3.                                                // 892\n                                if (n >= base) n = base - 1;                                                           // 893\n                                                                                                                       // 894\n                                // product = divisor * trial digit.                                                    // 895\n                                prod = multiply( yc, n, base );                                                        // 896\n                                prodL = prod.length;                                                                   // 897\n                                remL = rem.length;                                                                     // 898\n                                                                                                                       // 899\n                                // Compare product and remainder.                                                      // 900\n                                // If product > remainder.                                                             // 901\n                                // Trial digit n too high.                                                             // 902\n                                // n is 1 too high about 5% of the time, and is not known to have                      // 903\n                                // ever been more than 1 too high.                                                     // 904\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {                                     // 905\n                                    n--;                                                                               // 906\n                                                                                                                       // 907\n                                    // Subtract divisor from product.                                                  // 908\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );                               // 909\n                                    prodL = prod.length;                                                               // 910\n                                    cmp = 1;                                                                           // 911\n                                }                                                                                      // 912\n                            } else {                                                                                   // 913\n                                                                                                                       // 914\n                                // n is 0 or 1, cmp is -1.                                                             // 915\n                                // If n is 0, there is no need to compare yc and rem again below,                      // 916\n                                // so change cmp to 1 to avoid it.                                                     // 917\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.                       // 918\n                                if ( n == 0 ) {                                                                        // 919\n                                                                                                                       // 920\n                                    // divisor < remainder, so n must be at least 1.                                   // 921\n                                    cmp = n = 1;                                                                       // 922\n                                }                                                                                      // 923\n                                                                                                                       // 924\n                                // product = divisor                                                                   // 925\n                                prod = yc.slice();                                                                     // 926\n                                prodL = prod.length;                                                                   // 927\n                            }                                                                                          // 928\n                                                                                                                       // 929\n                            if ( prodL < remL ) prod.unshift(0);                                                       // 930\n                                                                                                                       // 931\n                            // Subtract product from remainder.                                                        // 932\n                            subtract( rem, prod, remL, base );                                                         // 933\n                            remL = rem.length;                                                                         // 934\n                                                                                                                       // 935\n                             // If product was < remainder.                                                            // 936\n                            if ( cmp == -1 ) {                                                                         // 937\n                                                                                                                       // 938\n                                // Compare divisor and new remainder.                                                  // 939\n                                // If divisor < new remainder, subtract divisor from remainder.                        // 940\n                                // Trial digit n too low.                                                              // 941\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.                     // 942\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {                                           // 943\n                                    n++;                                                                               // 944\n                                                                                                                       // 945\n                                    // Subtract divisor from remainder.                                                // 946\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );                                  // 947\n                                    remL = rem.length;                                                                 // 948\n                                }                                                                                      // 949\n                            }                                                                                          // 950\n                        } else if ( cmp === 0 ) {                                                                      // 951\n                            n++;                                                                                       // 952\n                            rem = [0];                                                                                 // 953\n                        } // else cmp === 1 and n will be 0                                                            // 954\n                                                                                                                       // 955\n                        // Add the next digit, n, to the result array.                                                 // 956\n                        qc[i++] = n;                                                                                   // 957\n                                                                                                                       // 958\n                        // Update the remainder.                                                                       // 959\n                        if ( rem[0] ) {                                                                                // 960\n                            rem[remL++] = xc[xi] || 0;                                                                 // 961\n                        } else {                                                                                       // 962\n                            rem = [ xc[xi] ];                                                                          // 963\n                            remL = 1;                                                                                  // 964\n                        }                                                                                              // 965\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );                                                // 966\n                                                                                                                       // 967\n                    more = rem[0] != null;                                                                             // 968\n                                                                                                                       // 969\n                    // Leading zero?                                                                                   // 970\n                    if ( !qc[0] ) qc.shift();                                                                          // 971\n                }                                                                                                      // 972\n                                                                                                                       // 973\n                if ( base == BASE ) {                                                                                  // 974\n                                                                                                                       // 975\n                    // To calculate q.e, first get the number of digits of qc[0].                                      // 976\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );                                                   // 977\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );                                     // 978\n                                                                                                                       // 979\n                // Caller is convertBase.                                                                              // 980\n                } else {                                                                                               // 981\n                    q.e = e;                                                                                           // 982\n                    q.r = +more;                                                                                       // 983\n                }                                                                                                      // 984\n                                                                                                                       // 985\n                return q;                                                                                              // 986\n            };                                                                                                         // 987\n        })();                                                                                                          // 988\n                                                                                                                       // 989\n                                                                                                                       // 990\n        /*                                                                                                             // 991\n         * Return a string representing the value of BigNumber n in fixed-point or exponential                         // 992\n         * notation rounded to the specified decimal places or significant digits.                                     // 993\n         *                                                                                                             // 994\n         * n is a BigNumber.                                                                                           // 995\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).                          // 996\n         * rm is the rounding mode.                                                                                    // 997\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.                             // 998\n         */                                                                                                            // 999\n        function format( n, i, rm, caller ) {                                                                          // 1000\n            var c0, e, ne, len, str;                                                                                   // 1001\n                                                                                                                       // 1002\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )                                            // 1003\n              ? rm | 0 : ROUNDING_MODE;                                                                                // 1004\n                                                                                                                       // 1005\n            if ( !n.c ) return n.toString();                                                                           // 1006\n            c0 = n.c[0];                                                                                               // 1007\n            ne = n.e;                                                                                                  // 1008\n                                                                                                                       // 1009\n            if ( i == null ) {                                                                                         // 1010\n                str = coeffToString( n.c );                                                                            // 1011\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG                                                 // 1012\n                  ? toExponential( str, ne )                                                                           // 1013\n                  : toFixedPoint( str, ne );                                                                           // 1014\n            } else {                                                                                                   // 1015\n                n = round( new BigNumber(n), i, rm );                                                                  // 1016\n                                                                                                                       // 1017\n                // n.e may have changed if the value was rounded up.                                                   // 1018\n                e = n.e;                                                                                               // 1019\n                                                                                                                       // 1020\n                str = coeffToString( n.c );                                                                            // 1021\n                len = str.length;                                                                                      // 1022\n                                                                                                                       // 1023\n                // toPrecision returns exponential notation if the number of significant digits                        // 1024\n                // specified is less than the number of digits necessary to represent the integer                      // 1025\n                // part of the value in fixed-point notation.                                                          // 1026\n                                                                                                                       // 1027\n                // Exponential notation.                                                                               // 1028\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {                                 // 1029\n                                                                                                                       // 1030\n                    // Append zeros?                                                                                   // 1031\n                    for ( ; len < i; str += '0', len++ );                                                              // 1032\n                    str = toExponential( str, e );                                                                     // 1033\n                                                                                                                       // 1034\n                // Fixed-point notation.                                                                               // 1035\n                } else {                                                                                               // 1036\n                    i -= ne;                                                                                           // 1037\n                    str = toFixedPoint( str, e );                                                                      // 1038\n                                                                                                                       // 1039\n                    // Append zeros?                                                                                   // 1040\n                    if ( e + 1 > len ) {                                                                               // 1041\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );                                            // 1042\n                    } else {                                                                                           // 1043\n                        i += e - len;                                                                                  // 1044\n                        if ( i > 0 ) {                                                                                 // 1045\n                            if ( e + 1 == len ) str += '.';                                                            // 1046\n                            for ( ; i--; str += '0' );                                                                 // 1047\n                        }                                                                                              // 1048\n                    }                                                                                                  // 1049\n                }                                                                                                      // 1050\n            }                                                                                                          // 1051\n                                                                                                                       // 1052\n            return n.s < 0 && c0 ? '-' + str : str;                                                                    // 1053\n        }                                                                                                              // 1054\n                                                                                                                       // 1055\n                                                                                                                       // 1056\n        // Handle BigNumber.max and BigNumber.min.                                                                     // 1057\n        function maxOrMin( args, method ) {                                                                            // 1058\n            var m, n,                                                                                                  // 1059\n                i = 0;                                                                                                 // 1060\n                                                                                                                       // 1061\n            if ( isArray( args[0] ) ) args = args[0];                                                                  // 1062\n            m = new BigNumber( args[0] );                                                                              // 1063\n                                                                                                                       // 1064\n            for ( ; ++i < args.length; ) {                                                                             // 1065\n                n = new BigNumber( args[i] );                                                                          // 1066\n                                                                                                                       // 1067\n                // If any number is NaN, return NaN.                                                                   // 1068\n                if ( !n.s ) {                                                                                          // 1069\n                    m = n;                                                                                             // 1070\n                    break;                                                                                             // 1071\n                } else if ( method.call( m, n ) ) {                                                                    // 1072\n                    m = n;                                                                                             // 1073\n                }                                                                                                      // 1074\n            }                                                                                                          // 1075\n                                                                                                                       // 1076\n            return m;                                                                                                  // 1077\n        }                                                                                                              // 1078\n                                                                                                                       // 1079\n                                                                                                                       // 1080\n        /*                                                                                                             // 1081\n         * Return true if n is an integer in range, otherwise throw.                                                   // 1082\n         * Use for argument validation when ERRORS is true.                                                            // 1083\n         */                                                                                                            // 1084\n        function intValidatorWithErrors( n, min, max, caller, name ) {                                                 // 1085\n            if ( n < min || n > max || n != truncate(n) ) {                                                            // 1086\n                raise( caller, ( name || 'decimal places' ) +                                                          // 1087\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );                                   // 1088\n            }                                                                                                          // 1089\n                                                                                                                       // 1090\n            return true;                                                                                               // 1091\n        }                                                                                                              // 1092\n                                                                                                                       // 1093\n                                                                                                                       // 1094\n        /*                                                                                                             // 1095\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.                     // 1096\n         * Called by minus, plus and times.                                                                            // 1097\n         */                                                                                                            // 1098\n        function normalise( n, c, e ) {                                                                                // 1099\n            var i = 1,                                                                                                 // 1100\n                j = c.length;                                                                                          // 1101\n                                                                                                                       // 1102\n             // Remove trailing zeros.                                                                                 // 1103\n            for ( ; !c[--j]; c.pop() );                                                                                // 1104\n                                                                                                                       // 1105\n            // Calculate the base 10 exponent. First get the number of digits of c[0].                                 // 1106\n            for ( j = c[0]; j >= 10; j /= 10, i++ );                                                                   // 1107\n                                                                                                                       // 1108\n            // Overflow?                                                                                               // 1109\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {                                                            // 1110\n                                                                                                                       // 1111\n                // Infinity.                                                                                           // 1112\n                n.c = n.e = null;                                                                                      // 1113\n                                                                                                                       // 1114\n            // Underflow?                                                                                              // 1115\n            } else if ( e < MIN_EXP ) {                                                                                // 1116\n                                                                                                                       // 1117\n                // Zero.                                                                                               // 1118\n                n.c = [ n.e = 0 ];                                                                                     // 1119\n            } else {                                                                                                   // 1120\n                n.e = e;                                                                                               // 1121\n                n.c = c;                                                                                               // 1122\n            }                                                                                                          // 1123\n                                                                                                                       // 1124\n            return n;                                                                                                  // 1125\n        }                                                                                                              // 1126\n                                                                                                                       // 1127\n                                                                                                                       // 1128\n        // Handle values that fail the validity test in BigNumber.                                                     // 1129\n        parseNumeric = (function () {                                                                                  // 1130\n            var basePrefix = /^(-?)0([xbo])/i,                                                                         // 1131\n                dotAfter = /^([^.]+)\\.$/,                                                                              // 1132\n                dotBefore = /^\\.([^.]+)$/,                                                                             // 1133\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,                                                                // 1134\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;                                                                // 1135\n                                                                                                                       // 1136\n            return function ( x, str, num, b ) {                                                                       // 1137\n                var base,                                                                                              // 1138\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );                                               // 1139\n                                                                                                                       // 1140\n                // No exception on ±Infinity or NaN.                                                                   // 1141\n                if ( isInfinityOrNaN.test(s) ) {                                                                       // 1142\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;                                                            // 1143\n                } else {                                                                                               // 1144\n                    if ( !num ) {                                                                                      // 1145\n                                                                                                                       // 1146\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i                                                  // 1147\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {                                            // 1148\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;                          // 1149\n                            return !b || b == base ? p1 : m;                                                           // 1150\n                        });                                                                                            // 1151\n                                                                                                                       // 1152\n                        if (b) {                                                                                       // 1153\n                            base = b;                                                                                  // 1154\n                                                                                                                       // 1155\n                            // E.g. '1.' to '1', '.1' to '0.1'                                                         // 1156\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );                              // 1157\n                        }                                                                                              // 1158\n                                                                                                                       // 1159\n                        if ( str != s ) return new BigNumber( s, base );                                               // 1160\n                    }                                                                                                  // 1161\n                                                                                                                       // 1162\n                    // 'new BigNumber() not a number: {n}'                                                             // 1163\n                    // 'new BigNumber() not a base {b} number: {n}'                                                    // 1164\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );                     // 1165\n                    x.s = null;                                                                                        // 1166\n                }                                                                                                      // 1167\n                                                                                                                       // 1168\n                x.c = x.e = null;                                                                                      // 1169\n                id = 0;                                                                                                // 1170\n            }                                                                                                          // 1171\n        })();                                                                                                          // 1172\n                                                                                                                       // 1173\n                                                                                                                       // 1174\n        // Throw a BigNumber Error.                                                                                    // 1175\n        function raise( caller, msg, val ) {                                                                           // 1176\n            var error = new Error( [                                                                                   // 1177\n                'new BigNumber',     // 0                                                                              // 1178\n                'cmp',               // 1                                                                              // 1179\n                'config',            // 2                                                                              // 1180\n                'div',               // 3                                                                              // 1181\n                'divToInt',          // 4                                                                              // 1182\n                'eq',                // 5                                                                              // 1183\n                'gt',                // 6                                                                              // 1184\n                'gte',               // 7                                                                              // 1185\n                'lt',                // 8                                                                              // 1186\n                'lte',               // 9                                                                              // 1187\n                'minus',             // 10                                                                             // 1188\n                'mod',               // 11                                                                             // 1189\n                'plus',              // 12                                                                             // 1190\n                'precision',         // 13                                                                             // 1191\n                'random',            // 14                                                                             // 1192\n                'round',             // 15                                                                             // 1193\n                'shift',             // 16                                                                             // 1194\n                'times',             // 17                                                                             // 1195\n                'toDigits',          // 18                                                                             // 1196\n                'toExponential',     // 19                                                                             // 1197\n                'toFixed',           // 20                                                                             // 1198\n                'toFormat',          // 21                                                                             // 1199\n                'toFraction',        // 22                                                                             // 1200\n                'pow',               // 23                                                                             // 1201\n                'toPrecision',       // 24                                                                             // 1202\n                'toString',          // 25                                                                             // 1203\n                'BigNumber'          // 26                                                                             // 1204\n            ][caller] + '() ' + msg + ': ' + val );                                                                    // 1205\n                                                                                                                       // 1206\n            error.name = 'BigNumber Error';                                                                            // 1207\n            id = 0;                                                                                                    // 1208\n            throw error;                                                                                               // 1209\n        }                                                                                                              // 1210\n                                                                                                                       // 1211\n                                                                                                                       // 1212\n        /*                                                                                                             // 1213\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.                         // 1214\n         * If r is truthy, it is known that there are more digits after the rounding digit.                            // 1215\n         */                                                                                                            // 1216\n        function round( x, sd, rm, r ) {                                                                               // 1217\n            var d, i, j, k, n, ni, rd,                                                                                 // 1218\n                xc = x.c,                                                                                              // 1219\n                pows10 = POWS_TEN;                                                                                     // 1220\n                                                                                                                       // 1221\n            // if x is not Infinity or NaN...                                                                          // 1222\n            if (xc) {                                                                                                  // 1223\n                                                                                                                       // 1224\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.                    // 1225\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.                       // 1226\n                // ni is the index of n within x.c.                                                                    // 1227\n                // d is the number of digits of n.                                                                     // 1228\n                // i is the index of rd within n including leading zeros.                                              // 1229\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).                                // 1230\n                out: {                                                                                                 // 1231\n                                                                                                                       // 1232\n                    // Get the number of digits of the first element of xc.                                            // 1233\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );                                                   // 1234\n                    i = sd - d;                                                                                        // 1235\n                                                                                                                       // 1236\n                    // If the rounding digit is in the first element of xc...                                          // 1237\n                    if ( i < 0 ) {                                                                                     // 1238\n                        i += LOG_BASE;                                                                                 // 1239\n                        j = sd;                                                                                        // 1240\n                        n = xc[ ni = 0 ];                                                                              // 1241\n                                                                                                                       // 1242\n                        // Get the rounding digit at index j of n.                                                     // 1243\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;                                                         // 1244\n                    } else {                                                                                           // 1245\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );                                                         // 1246\n                                                                                                                       // 1247\n                        if ( ni >= xc.length ) {                                                                       // 1248\n                                                                                                                       // 1249\n                            if (r) {                                                                                   // 1250\n                                                                                                                       // 1251\n                                // Needed by sqrt.                                                                     // 1252\n                                for ( ; xc.length <= ni; xc.push(0) );                                                 // 1253\n                                n = rd = 0;                                                                            // 1254\n                                d = 1;                                                                                 // 1255\n                                i %= LOG_BASE;                                                                         // 1256\n                                j = i - LOG_BASE + 1;                                                                  // 1257\n                            } else {                                                                                   // 1258\n                                break out;                                                                             // 1259\n                            }                                                                                          // 1260\n                        } else {                                                                                       // 1261\n                            n = k = xc[ni];                                                                            // 1262\n                                                                                                                       // 1263\n                            // Get the number of digits of n.                                                          // 1264\n                            for ( d = 1; k >= 10; k /= 10, d++ );                                                      // 1265\n                                                                                                                       // 1266\n                            // Get the index of rd within n.                                                           // 1267\n                            i %= LOG_BASE;                                                                             // 1268\n                                                                                                                       // 1269\n                            // Get the index of rd within n, adjusted for leading zeros.                               // 1270\n                            // The number of leading zeros of n is given by LOG_BASE - d.                              // 1271\n                            j = i - LOG_BASE + d;                                                                      // 1272\n                                                                                                                       // 1273\n                            // Get the rounding digit at index j of n.                                                 // 1274\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;                                         // 1275\n                        }                                                                                              // 1276\n                    }                                                                                                  // 1277\n                                                                                                                       // 1278\n                    r = r || sd < 0 ||                                                                                 // 1279\n                                                                                                                       // 1280\n                    // Are there any non-zero digits after the rounding digit?                                         // 1281\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right                   // 1282\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.                    // 1283\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );                                   // 1284\n                                                                                                                       // 1285\n                    r = rm < 4                                                                                         // 1286\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )                                        // 1287\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&                                              // 1288\n                                                                                                                       // 1289\n                        // Check whether the digit to the left of the rounding digit is odd.                           // 1290\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||                       // 1291\n                          rm == ( x.s < 0 ? 8 : 7 ) );                                                                 // 1292\n                                                                                                                       // 1293\n                    if ( sd < 1 || !xc[0] ) {                                                                          // 1294\n                        xc.length = 0;                                                                                 // 1295\n                                                                                                                       // 1296\n                        if (r) {                                                                                       // 1297\n                                                                                                                       // 1298\n                            // Convert sd to decimal places.                                                           // 1299\n                            sd -= x.e + 1;                                                                             // 1300\n                                                                                                                       // 1301\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.                                                        // 1302\n                            xc[0] = pows10[ sd % LOG_BASE ];                                                           // 1303\n                            x.e = -sd || 0;                                                                            // 1304\n                        } else {                                                                                       // 1305\n                                                                                                                       // 1306\n                            // Zero.                                                                                   // 1307\n                            xc[0] = x.e = 0;                                                                           // 1308\n                        }                                                                                              // 1309\n                                                                                                                       // 1310\n                        return x;                                                                                      // 1311\n                    }                                                                                                  // 1312\n                                                                                                                       // 1313\n                    // Remove excess digits.                                                                           // 1314\n                    if ( i == 0 ) {                                                                                    // 1315\n                        xc.length = ni;                                                                                // 1316\n                        k = 1;                                                                                         // 1317\n                        ni--;                                                                                          // 1318\n                    } else {                                                                                           // 1319\n                        xc.length = ni + 1;                                                                            // 1320\n                        k = pows10[ LOG_BASE - i ];                                                                    // 1321\n                                                                                                                       // 1322\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.                                        // 1323\n                        // j > 0 means i > number of leading zeros of n.                                               // 1324\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;                         // 1325\n                    }                                                                                                  // 1326\n                                                                                                                       // 1327\n                    // Round up?                                                                                       // 1328\n                    if (r) {                                                                                           // 1329\n                                                                                                                       // 1330\n                        for ( ; ; ) {                                                                                  // 1331\n                                                                                                                       // 1332\n                            // If the digit to be rounded up is in the first element of xc...                          // 1333\n                            if ( ni == 0 ) {                                                                           // 1334\n                                                                                                                       // 1335\n                                // i will be the length of xc[0] before k is added.                                    // 1336\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );                                       // 1337\n                                j = xc[0] += k;                                                                        // 1338\n                                for ( k = 1; j >= 10; j /= 10, k++ );                                                  // 1339\n                                                                                                                       // 1340\n                                // if i != k the length has increased.                                                 // 1341\n                                if ( i != k ) {                                                                        // 1342\n                                    x.e++;                                                                             // 1343\n                                    if ( xc[0] == BASE ) xc[0] = 1;                                                    // 1344\n                                }                                                                                      // 1345\n                                                                                                                       // 1346\n                                break;                                                                                 // 1347\n                            } else {                                                                                   // 1348\n                                xc[ni] += k;                                                                           // 1349\n                                if ( xc[ni] != BASE ) break;                                                           // 1350\n                                xc[ni--] = 0;                                                                          // 1351\n                                k = 1;                                                                                 // 1352\n                            }                                                                                          // 1353\n                        }                                                                                              // 1354\n                    }                                                                                                  // 1355\n                                                                                                                       // 1356\n                    // Remove trailing zeros.                                                                          // 1357\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );                                                    // 1358\n                }                                                                                                      // 1359\n                                                                                                                       // 1360\n                // Overflow? Infinity.                                                                                 // 1361\n                if ( x.e > MAX_EXP ) {                                                                                 // 1362\n                    x.c = x.e = null;                                                                                  // 1363\n                                                                                                                       // 1364\n                // Underflow? Zero.                                                                                    // 1365\n                } else if ( x.e < MIN_EXP ) {                                                                          // 1366\n                    x.c = [ x.e = 0 ];                                                                                 // 1367\n                }                                                                                                      // 1368\n            }                                                                                                          // 1369\n                                                                                                                       // 1370\n            return x;                                                                                                  // 1371\n        }                                                                                                              // 1372\n                                                                                                                       // 1373\n                                                                                                                       // 1374\n        // PROTOTYPE/INSTANCE METHODS                                                                                  // 1375\n                                                                                                                       // 1376\n                                                                                                                       // 1377\n        /*                                                                                                             // 1378\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.                                 // 1379\n         */                                                                                                            // 1380\n        P.absoluteValue = P.abs = function () {                                                                        // 1381\n            var x = new BigNumber(this);                                                                               // 1382\n            if ( x.s < 0 ) x.s = 1;                                                                                    // 1383\n            return x;                                                                                                  // 1384\n        };                                                                                                             // 1385\n                                                                                                                       // 1386\n                                                                                                                       // 1387\n        /*                                                                                                             // 1388\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 1389\n         * number in the direction of Infinity.                                                                        // 1390\n         */                                                                                                            // 1391\n        P.ceil = function () {                                                                                         // 1392\n            return round( new BigNumber(this), this.e + 1, 2 );                                                        // 1393\n        };                                                                                                             // 1394\n                                                                                                                       // 1395\n                                                                                                                       // 1396\n        /*                                                                                                             // 1397\n         * Return                                                                                                      // 1398\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),                              // 1399\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),                                // 1400\n         * 0 if they have the same value,                                                                              // 1401\n         * or null if the value of either is NaN.                                                                      // 1402\n         */                                                                                                            // 1403\n        P.comparedTo = P.cmp = function ( y, b ) {                                                                     // 1404\n            id = 1;                                                                                                    // 1405\n            return compare( this, new BigNumber( y, b ) );                                                             // 1406\n        };                                                                                                             // 1407\n                                                                                                                       // 1408\n                                                                                                                       // 1409\n        /*                                                                                                             // 1410\n         * Return the number of decimal places of the value of this BigNumber, or null if the value                    // 1411\n         * of this BigNumber is ±Infinity or NaN.                                                                      // 1412\n         */                                                                                                            // 1413\n        P.decimalPlaces = P.dp = function () {                                                                         // 1414\n            var n, v,                                                                                                  // 1415\n                c = this.c;                                                                                            // 1416\n                                                                                                                       // 1417\n            if ( !c ) return null;                                                                                     // 1418\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;                                   // 1419\n                                                                                                                       // 1420\n            // Subtract the number of trailing zeros of the last number.                                               // 1421\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );                                                       // 1422\n            if ( n < 0 ) n = 0;                                                                                        // 1423\n                                                                                                                       // 1424\n            return n;                                                                                                  // 1425\n        };                                                                                                             // 1426\n                                                                                                                       // 1427\n                                                                                                                       // 1428\n        /*                                                                                                             // 1429\n         *  n / 0 = I                                                                                                  // 1430\n         *  n / N = N                                                                                                  // 1431\n         *  n / I = 0                                                                                                  // 1432\n         *  0 / n = 0                                                                                                  // 1433\n         *  0 / 0 = N                                                                                                  // 1434\n         *  0 / N = N                                                                                                  // 1435\n         *  0 / I = 0                                                                                                  // 1436\n         *  N / n = N                                                                                                  // 1437\n         *  N / 0 = N                                                                                                  // 1438\n         *  N / N = N                                                                                                  // 1439\n         *  N / I = N                                                                                                  // 1440\n         *  I / n = I                                                                                                  // 1441\n         *  I / 0 = I                                                                                                  // 1442\n         *  I / N = N                                                                                                  // 1443\n         *  I / I = N                                                                                                  // 1444\n         *                                                                                                             // 1445\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of                   // 1446\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                     // 1447\n         */                                                                                                            // 1448\n        P.dividedBy = P.div = function ( y, b ) {                                                                      // 1449\n            id = 3;                                                                                                    // 1450\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );                                  // 1451\n        };                                                                                                             // 1452\n                                                                                                                       // 1453\n                                                                                                                       // 1454\n        /*                                                                                                             // 1455\n         * Return a new BigNumber whose value is the integer part of dividing the value of this                        // 1456\n         * BigNumber by the value of BigNumber(y, b).                                                                  // 1457\n         */                                                                                                            // 1458\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {                                                        // 1459\n            id = 4;                                                                                                    // 1460\n            return div( this, new BigNumber( y, b ), 0, 1 );                                                           // 1461\n        };                                                                                                             // 1462\n                                                                                                                       // 1463\n                                                                                                                       // 1464\n        /*                                                                                                             // 1465\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),                        // 1466\n         * otherwise returns false.                                                                                    // 1467\n         */                                                                                                            // 1468\n        P.equals = P.eq = function ( y, b ) {                                                                          // 1469\n            id = 5;                                                                                                    // 1470\n            return compare( this, new BigNumber( y, b ) ) === 0;                                                       // 1471\n        };                                                                                                             // 1472\n                                                                                                                       // 1473\n                                                                                                                       // 1474\n        /*                                                                                                             // 1475\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole                        // 1476\n         * number in the direction of -Infinity.                                                                       // 1477\n         */                                                                                                            // 1478\n        P.floor = function () {                                                                                        // 1479\n            return round( new BigNumber(this), this.e + 1, 3 );                                                        // 1480\n        };                                                                                                             // 1481\n                                                                                                                       // 1482\n                                                                                                                       // 1483\n        /*                                                                                                             // 1484\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),                    // 1485\n         * otherwise returns false.                                                                                    // 1486\n         */                                                                                                            // 1487\n        P.greaterThan = P.gt = function ( y, b ) {                                                                     // 1488\n            id = 6;                                                                                                    // 1489\n            return compare( this, new BigNumber( y, b ) ) > 0;                                                         // 1490\n        };                                                                                                             // 1491\n                                                                                                                       // 1492\n                                                                                                                       // 1493\n        /*                                                                                                             // 1494\n         * Return true if the value of this BigNumber is greater than or equal to the value of                         // 1495\n         * BigNumber(y, b), otherwise returns false.                                                                   // 1496\n         */                                                                                                            // 1497\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {                                                           // 1498\n            id = 7;                                                                                                    // 1499\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;                                    // 1500\n                                                                                                                       // 1501\n        };                                                                                                             // 1502\n                                                                                                                       // 1503\n                                                                                                                       // 1504\n        /*                                                                                                             // 1505\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.                     // 1506\n         */                                                                                                            // 1507\n        P.isFinite = function () {                                                                                     // 1508\n            return !!this.c;                                                                                           // 1509\n        };                                                                                                             // 1510\n                                                                                                                       // 1511\n                                                                                                                       // 1512\n        /*                                                                                                             // 1513\n         * Return true if the value of this BigNumber is an integer, otherwise return false.                           // 1514\n         */                                                                                                            // 1515\n        P.isInteger = P.isInt = function () {                                                                          // 1516\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;                                      // 1517\n        };                                                                                                             // 1518\n                                                                                                                       // 1519\n                                                                                                                       // 1520\n        /*                                                                                                             // 1521\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.                                 // 1522\n         */                                                                                                            // 1523\n        P.isNaN = function () {                                                                                        // 1524\n            return !this.s;                                                                                            // 1525\n        };                                                                                                             // 1526\n                                                                                                                       // 1527\n                                                                                                                       // 1528\n        /*                                                                                                             // 1529\n         * Return true if the value of this BigNumber is negative, otherwise returns false.                            // 1530\n         */                                                                                                            // 1531\n        P.isNegative = P.isNeg = function () {                                                                         // 1532\n            return this.s < 0;                                                                                         // 1533\n        };                                                                                                             // 1534\n                                                                                                                       // 1535\n                                                                                                                       // 1536\n        /*                                                                                                             // 1537\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.                             // 1538\n         */                                                                                                            // 1539\n        P.isZero = function () {                                                                                       // 1540\n            return !!this.c && this.c[0] == 0;                                                                         // 1541\n        };                                                                                                             // 1542\n                                                                                                                       // 1543\n                                                                                                                       // 1544\n        /*                                                                                                             // 1545\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),                       // 1546\n         * otherwise returns false.                                                                                    // 1547\n         */                                                                                                            // 1548\n        P.lessThan = P.lt = function ( y, b ) {                                                                        // 1549\n            id = 8;                                                                                                    // 1550\n            return compare( this, new BigNumber( y, b ) ) < 0;                                                         // 1551\n        };                                                                                                             // 1552\n                                                                                                                       // 1553\n                                                                                                                       // 1554\n        /*                                                                                                             // 1555\n         * Return true if the value of this BigNumber is less than or equal to the value of                            // 1556\n         * BigNumber(y, b), otherwise returns false.                                                                   // 1557\n         */                                                                                                            // 1558\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {                                                              // 1559\n            id = 9;                                                                                                    // 1560\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;                                   // 1561\n        };                                                                                                             // 1562\n                                                                                                                       // 1563\n                                                                                                                       // 1564\n        /*                                                                                                             // 1565\n         *  n - 0 = n                                                                                                  // 1566\n         *  n - N = N                                                                                                  // 1567\n         *  n - I = -I                                                                                                 // 1568\n         *  0 - n = -n                                                                                                 // 1569\n         *  0 - 0 = 0                                                                                                  // 1570\n         *  0 - N = N                                                                                                  // 1571\n         *  0 - I = -I                                                                                                 // 1572\n         *  N - n = N                                                                                                  // 1573\n         *  N - 0 = N                                                                                                  // 1574\n         *  N - N = N                                                                                                  // 1575\n         *  N - I = N                                                                                                  // 1576\n         *  I - n = I                                                                                                  // 1577\n         *  I - 0 = I                                                                                                  // 1578\n         *  I - N = N                                                                                                  // 1579\n         *  I - I = N                                                                                                  // 1580\n         *                                                                                                             // 1581\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of                        // 1582\n         * BigNumber(y, b).                                                                                            // 1583\n         */                                                                                                            // 1584\n        P.minus = P.sub = function ( y, b ) {                                                                          // 1585\n            var i, j, t, xLTy,                                                                                         // 1586\n                x = this,                                                                                              // 1587\n                a = x.s;                                                                                               // 1588\n                                                                                                                       // 1589\n            id = 10;                                                                                                   // 1590\n            y = new BigNumber( y, b );                                                                                 // 1591\n            b = y.s;                                                                                                   // 1592\n                                                                                                                       // 1593\n            // Either NaN?                                                                                             // 1594\n            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 1595\n                                                                                                                       // 1596\n            // Signs differ?                                                                                           // 1597\n            if ( a != b ) {                                                                                            // 1598\n                y.s = -b;                                                                                              // 1599\n                return x.plus(y);                                                                                      // 1600\n            }                                                                                                          // 1601\n                                                                                                                       // 1602\n            var xe = x.e / LOG_BASE,                                                                                   // 1603\n                ye = y.e / LOG_BASE,                                                                                   // 1604\n                xc = x.c,                                                                                              // 1605\n                yc = y.c;                                                                                              // 1606\n                                                                                                                       // 1607\n            if ( !xe || !ye ) {                                                                                        // 1608\n                                                                                                                       // 1609\n                // Either Infinity?                                                                                    // 1610\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );                         // 1611\n                                                                                                                       // 1612\n                // Either zero?                                                                                        // 1613\n                if ( !xc[0] || !yc[0] ) {                                                                              // 1614\n                                                                                                                       // 1615\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                        // 1616\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :                                        // 1617\n                                                                                                                       // 1618\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity                                    // 1619\n                      ROUNDING_MODE == 3 ? -0 : 0 );                                                                   // 1620\n                }                                                                                                      // 1621\n            }                                                                                                          // 1622\n                                                                                                                       // 1623\n            xe = bitFloor(xe);                                                                                         // 1624\n            ye = bitFloor(ye);                                                                                         // 1625\n            xc = xc.slice();                                                                                           // 1626\n                                                                                                                       // 1627\n            // Determine which is the bigger number.                                                                   // 1628\n            if ( a = xe - ye ) {                                                                                       // 1629\n                                                                                                                       // 1630\n                if ( xLTy = a < 0 ) {                                                                                  // 1631\n                    a = -a;                                                                                            // 1632\n                    t = xc;                                                                                            // 1633\n                } else {                                                                                               // 1634\n                    ye = xe;                                                                                           // 1635\n                    t = yc;                                                                                            // 1636\n                }                                                                                                      // 1637\n                                                                                                                       // 1638\n                t.reverse();                                                                                           // 1639\n                                                                                                                       // 1640\n                // Prepend zeros to equalise exponents.                                                                // 1641\n                for ( b = a; b--; t.push(0) );                                                                         // 1642\n                t.reverse();                                                                                           // 1643\n            } else {                                                                                                   // 1644\n                                                                                                                       // 1645\n                // Exponents equal. Check digit by digit.                                                              // 1646\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;                                          // 1647\n                                                                                                                       // 1648\n                for ( a = b = 0; b < j; b++ ) {                                                                        // 1649\n                                                                                                                       // 1650\n                    if ( xc[b] != yc[b] ) {                                                                            // 1651\n                        xLTy = xc[b] < yc[b];                                                                          // 1652\n                        break;                                                                                         // 1653\n                    }                                                                                                  // 1654\n                }                                                                                                      // 1655\n            }                                                                                                          // 1656\n                                                                                                                       // 1657\n            // x < y? Point xc to the array of the bigger number.                                                      // 1658\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;                                                             // 1659\n                                                                                                                       // 1660\n            b = ( j = yc.length ) - ( i = xc.length );                                                                 // 1661\n                                                                                                                       // 1662\n            // Append zeros to xc if shorter.                                                                          // 1663\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.                     // 1664\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );                                                                   // 1665\n            b = BASE - 1;                                                                                              // 1666\n                                                                                                                       // 1667\n            // Subtract yc from xc.                                                                                    // 1668\n            for ( ; j > a; ) {                                                                                         // 1669\n                                                                                                                       // 1670\n                if ( xc[--j] < yc[j] ) {                                                                               // 1671\n                    for ( i = j; i && !xc[--i]; xc[i] = b );                                                           // 1672\n                    --xc[i];                                                                                           // 1673\n                    xc[j] += BASE;                                                                                     // 1674\n                }                                                                                                      // 1675\n                                                                                                                       // 1676\n                xc[j] -= yc[j];                                                                                        // 1677\n            }                                                                                                          // 1678\n                                                                                                                       // 1679\n            // Remove leading zeros and adjust exponent accordingly.                                                   // 1680\n            for ( ; xc[0] == 0; xc.shift(), --ye );                                                                    // 1681\n                                                                                                                       // 1682\n            // Zero?                                                                                                   // 1683\n            if ( !xc[0] ) {                                                                                            // 1684\n                                                                                                                       // 1685\n                // Following IEEE 754 (2008) 6.3,                                                                      // 1686\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.                                       // 1687\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;                                                                     // 1688\n                y.c = [ y.e = 0 ];                                                                                     // 1689\n                return y;                                                                                              // 1690\n            }                                                                                                          // 1691\n                                                                                                                       // 1692\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity                             // 1693\n            // for finite x and y.                                                                                     // 1694\n            return normalise( y, xc, ye );                                                                             // 1695\n        };                                                                                                             // 1696\n                                                                                                                       // 1697\n                                                                                                                       // 1698\n        /*                                                                                                             // 1699\n         *   n % 0 =  N                                                                                                // 1700\n         *   n % N =  N                                                                                                // 1701\n         *   n % I =  n                                                                                                // 1702\n         *   0 % n =  0                                                                                                // 1703\n         *  -0 % n = -0                                                                                                // 1704\n         *   0 % 0 =  N                                                                                                // 1705\n         *   0 % N =  N                                                                                                // 1706\n         *   0 % I =  0                                                                                                // 1707\n         *   N % n =  N                                                                                                // 1708\n         *   N % 0 =  N                                                                                                // 1709\n         *   N % N =  N                                                                                                // 1710\n         *   N % I =  N                                                                                                // 1711\n         *   I % n =  N                                                                                                // 1712\n         *   I % 0 =  N                                                                                                // 1713\n         *   I % N =  N                                                                                                // 1714\n         *   I % I =  N                                                                                                // 1715\n         *                                                                                                             // 1716\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of                       // 1717\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.                                            // 1718\n         */                                                                                                            // 1719\n        P.modulo = P.mod = function ( y, b ) {                                                                         // 1720\n            var q, s,                                                                                                  // 1721\n                x = this;                                                                                              // 1722\n                                                                                                                       // 1723\n            id = 11;                                                                                                   // 1724\n            y = new BigNumber( y, b );                                                                                 // 1725\n                                                                                                                       // 1726\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.                                                // 1727\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {                                                                    // 1728\n                return new BigNumber(NaN);                                                                             // 1729\n                                                                                                                       // 1730\n            // Return x if y is Infinity or x is zero.                                                                 // 1731\n            } else if ( !y.c || x.c && !x.c[0] ) {                                                                     // 1732\n                return new BigNumber(x);                                                                               // 1733\n            }                                                                                                          // 1734\n                                                                                                                       // 1735\n            if ( MODULO_MODE == 9 ) {                                                                                  // 1736\n                                                                                                                       // 1737\n                // Euclidian division: q = sign(y) * floor(x / abs(y))                                                 // 1738\n                // r = x - qy    where  0 <= r < abs(y)                                                                // 1739\n                s = y.s;                                                                                               // 1740\n                y.s = 1;                                                                                               // 1741\n                q = div( x, y, 0, 3 );                                                                                 // 1742\n                y.s = s;                                                                                               // 1743\n                q.s *= s;                                                                                              // 1744\n            } else {                                                                                                   // 1745\n                q = div( x, y, 0, MODULO_MODE );                                                                       // 1746\n            }                                                                                                          // 1747\n                                                                                                                       // 1748\n            return x.minus( q.times(y) );                                                                              // 1749\n        };                                                                                                             // 1750\n                                                                                                                       // 1751\n                                                                                                                       // 1752\n        /*                                                                                                             // 1753\n         * Return a new BigNumber whose value is the value of this BigNumber negated,                                  // 1754\n         * i.e. multiplied by -1.                                                                                      // 1755\n         */                                                                                                            // 1756\n        P.negated = P.neg = function () {                                                                              // 1757\n            var x = new BigNumber(this);                                                                               // 1758\n            x.s = -x.s || null;                                                                                        // 1759\n            return x;                                                                                                  // 1760\n        };                                                                                                             // 1761\n                                                                                                                       // 1762\n                                                                                                                       // 1763\n        /*                                                                                                             // 1764\n         *  n + 0 = n                                                                                                  // 1765\n         *  n + N = N                                                                                                  // 1766\n         *  n + I = I                                                                                                  // 1767\n         *  0 + n = n                                                                                                  // 1768\n         *  0 + 0 = 0                                                                                                  // 1769\n         *  0 + N = N                                                                                                  // 1770\n         *  0 + I = I                                                                                                  // 1771\n         *  N + n = N                                                                                                  // 1772\n         *  N + 0 = N                                                                                                  // 1773\n         *  N + N = N                                                                                                  // 1774\n         *  N + I = N                                                                                                  // 1775\n         *  I + n = I                                                                                                  // 1776\n         *  I + 0 = I                                                                                                  // 1777\n         *  I + N = N                                                                                                  // 1778\n         *  I + I = I                                                                                                  // 1779\n         *                                                                                                             // 1780\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of                         // 1781\n         * BigNumber(y, b).                                                                                            // 1782\n         */                                                                                                            // 1783\n        P.plus = P.add = function ( y, b ) {                                                                           // 1784\n            var t,                                                                                                     // 1785\n                x = this,                                                                                              // 1786\n                a = x.s;                                                                                               // 1787\n                                                                                                                       // 1788\n            id = 12;                                                                                                   // 1789\n            y = new BigNumber( y, b );                                                                                 // 1790\n            b = y.s;                                                                                                   // 1791\n                                                                                                                       // 1792\n            // Either NaN?                                                                                             // 1793\n            if ( !a || !b ) return new BigNumber(NaN);                                                                 // 1794\n                                                                                                                       // 1795\n            // Signs differ?                                                                                           // 1796\n             if ( a != b ) {                                                                                           // 1797\n                y.s = -b;                                                                                              // 1798\n                return x.minus(y);                                                                                     // 1799\n            }                                                                                                          // 1800\n                                                                                                                       // 1801\n            var xe = x.e / LOG_BASE,                                                                                   // 1802\n                ye = y.e / LOG_BASE,                                                                                   // 1803\n                xc = x.c,                                                                                              // 1804\n                yc = y.c;                                                                                              // 1805\n                                                                                                                       // 1806\n            if ( !xe || !ye ) {                                                                                        // 1807\n                                                                                                                       // 1808\n                // Return ±Infinity if either ±Infinity.                                                               // 1809\n                if ( !xc || !yc ) return new BigNumber( a / 0 );                                                       // 1810\n                                                                                                                       // 1811\n                // Either zero?                                                                                        // 1812\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.                            // 1813\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );                         // 1814\n            }                                                                                                          // 1815\n                                                                                                                       // 1816\n            xe = bitFloor(xe);                                                                                         // 1817\n            ye = bitFloor(ye);                                                                                         // 1818\n            xc = xc.slice();                                                                                           // 1819\n                                                                                                                       // 1820\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.                            // 1821\n            if ( a = xe - ye ) {                                                                                       // 1822\n                if ( a > 0 ) {                                                                                         // 1823\n                    ye = xe;                                                                                           // 1824\n                    t = yc;                                                                                            // 1825\n                } else {                                                                                               // 1826\n                    a = -a;                                                                                            // 1827\n                    t = xc;                                                                                            // 1828\n                }                                                                                                      // 1829\n                                                                                                                       // 1830\n                t.reverse();                                                                                           // 1831\n                for ( ; a--; t.push(0) );                                                                              // 1832\n                t.reverse();                                                                                           // 1833\n            }                                                                                                          // 1834\n                                                                                                                       // 1835\n            a = xc.length;                                                                                             // 1836\n            b = yc.length;                                                                                             // 1837\n                                                                                                                       // 1838\n            // Point xc to the longer array, and b to the shorter length.                                              // 1839\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;                                                           // 1840\n                                                                                                                       // 1841\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.                          // 1842\n            for ( a = 0; b; ) {                                                                                        // 1843\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;                                                        // 1844\n                xc[b] %= BASE;                                                                                         // 1845\n            }                                                                                                          // 1846\n                                                                                                                       // 1847\n            if (a) {                                                                                                   // 1848\n                xc.unshift(a);                                                                                         // 1849\n                ++ye;                                                                                                  // 1850\n            }                                                                                                          // 1851\n                                                                                                                       // 1852\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0                                              // 1853\n            // ye = MAX_EXP + 1 possible                                                                               // 1854\n            return normalise( y, xc, ye );                                                                             // 1855\n        };                                                                                                             // 1856\n                                                                                                                       // 1857\n                                                                                                                       // 1858\n        /*                                                                                                             // 1859\n         * Return the number of significant digits of the value of this BigNumber.                                     // 1860\n         *                                                                                                             // 1861\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.                     // 1862\n         */                                                                                                            // 1863\n        P.precision = P.sd = function (z) {                                                                            // 1864\n            var n, v,                                                                                                  // 1865\n                x = this,                                                                                              // 1866\n                c = x.c;                                                                                               // 1867\n                                                                                                                       // 1868\n            // 'precision() argument not a boolean or binary digit: {z}'                                               // 1869\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {                                                      // 1870\n                if (ERRORS) raise( 13, 'argument' + notBool, z );                                                      // 1871\n                if ( z != !!z ) z = null;                                                                              // 1872\n            }                                                                                                          // 1873\n                                                                                                                       // 1874\n            if ( !c ) return null;                                                                                     // 1875\n            v = c.length - 1;                                                                                          // 1876\n            n = v * LOG_BASE + 1;                                                                                      // 1877\n                                                                                                                       // 1878\n            if ( v = c[v] ) {                                                                                          // 1879\n                                                                                                                       // 1880\n                // Subtract the number of trailing zeros of the last element.                                          // 1881\n                for ( ; v % 10 == 0; v /= 10, n-- );                                                                   // 1882\n                                                                                                                       // 1883\n                // Add the number of digits of the first element.                                                      // 1884\n                for ( v = c[0]; v >= 10; v /= 10, n++ );                                                               // 1885\n            }                                                                                                          // 1886\n                                                                                                                       // 1887\n            if ( z && x.e + 1 > n ) n = x.e + 1;                                                                       // 1888\n                                                                                                                       // 1889\n            return n;                                                                                                  // 1890\n        };                                                                                                             // 1891\n                                                                                                                       // 1892\n                                                                                                                       // 1893\n        /*                                                                                                             // 1894\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 1895\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if                         // 1896\n         * omitted.                                                                                                    // 1897\n         *                                                                                                             // 1898\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 1899\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 1900\n         *                                                                                                             // 1901\n         * 'round() decimal places out of range: {dp}'                                                                 // 1902\n         * 'round() decimal places not an integer: {dp}'                                                               // 1903\n         * 'round() rounding mode not an integer: {rm}'                                                                // 1904\n         * 'round() rounding mode out of range: {rm}'                                                                  // 1905\n         */                                                                                                            // 1906\n        P.round = function ( dp, rm ) {                                                                                // 1907\n            var n = new BigNumber(this);                                                                               // 1908\n                                                                                                                       // 1909\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {                                                        // 1910\n                round( n, ~~dp + this.e + 1, rm == null ||                                                             // 1911\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );                                // 1912\n            }                                                                                                          // 1913\n                                                                                                                       // 1914\n            return n;                                                                                                  // 1915\n        };                                                                                                             // 1916\n                                                                                                                       // 1917\n                                                                                                                       // 1918\n        /*                                                                                                             // 1919\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places                       // 1920\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.                                      // 1921\n         *                                                                                                             // 1922\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.                                        // 1923\n         *                                                                                                             // 1924\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity                      // 1925\n         * otherwise.                                                                                                  // 1926\n         *                                                                                                             // 1927\n         * 'shift() argument not an integer: {k}'                                                                      // 1928\n         * 'shift() argument out of range: {k}'                                                                        // 1929\n         */                                                                                                            // 1930\n        P.shift = function (k) {                                                                                       // 1931\n            var n = this;                                                                                              // 1932\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )                                // 1933\n                                                                                                                       // 1934\n              // k < 1e+21, or truncate(k) will produce exponential notation.                                          // 1935\n              ? n.times( '1e' + truncate(k) )                                                                          // 1936\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )                      // 1937\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )                                                                          // 1938\n                : n );                                                                                                 // 1939\n        };                                                                                                             // 1940\n                                                                                                                       // 1941\n                                                                                                                       // 1942\n        /*                                                                                                             // 1943\n         *  sqrt(-n) =  N                                                                                              // 1944\n         *  sqrt( N) =  N                                                                                              // 1945\n         *  sqrt(-I) =  N                                                                                              // 1946\n         *  sqrt( I) =  I                                                                                              // 1947\n         *  sqrt( 0) =  0                                                                                              // 1948\n         *  sqrt(-0) = -0                                                                                              // 1949\n         *                                                                                                             // 1950\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,                       // 1951\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.                                                      // 1952\n         */                                                                                                            // 1953\n        P.squareRoot = P.sqrt = function () {                                                                          // 1954\n            var m, n, r, rep, t,                                                                                       // 1955\n                x = this,                                                                                              // 1956\n                c = x.c,                                                                                               // 1957\n                s = x.s,                                                                                               // 1958\n                e = x.e,                                                                                               // 1959\n                dp = DECIMAL_PLACES + 4,                                                                               // 1960\n                half = new BigNumber('0.5');                                                                           // 1961\n                                                                                                                       // 1962\n            // Negative/NaN/Infinity/zero?                                                                             // 1963\n            if ( s !== 1 || !c || !c[0] ) {                                                                            // 1964\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );                           // 1965\n            }                                                                                                          // 1966\n                                                                                                                       // 1967\n            // Initial estimate.                                                                                       // 1968\n            s = Math.sqrt( +x );                                                                                       // 1969\n                                                                                                                       // 1970\n            // Math.sqrt underflow/overflow?                                                                           // 1971\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.                                 // 1972\n            if ( s == 0 || s == 1 / 0 ) {                                                                              // 1973\n                n = coeffToString(c);                                                                                  // 1974\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';                                                             // 1975\n                s = Math.sqrt(n);                                                                                      // 1976\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );                                                    // 1977\n                                                                                                                       // 1978\n                if ( s == 1 / 0 ) {                                                                                    // 1979\n                    n = '1e' + e;                                                                                      // 1980\n                } else {                                                                                               // 1981\n                    n = s.toExponential();                                                                             // 1982\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;                                                          // 1983\n                }                                                                                                      // 1984\n                                                                                                                       // 1985\n                r = new BigNumber(n);                                                                                  // 1986\n            } else {                                                                                                   // 1987\n                r = new BigNumber( s + '' );                                                                           // 1988\n            }                                                                                                          // 1989\n                                                                                                                       // 1990\n            // Check for zero.                                                                                         // 1991\n            // r could be zero if MIN_EXP is changed after the this value was created.                                 // 1992\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause                   // 1993\n            // coeffToString to throw.                                                                                 // 1994\n            if ( r.c[0] ) {                                                                                            // 1995\n                e = r.e;                                                                                               // 1996\n                s = e + dp;                                                                                            // 1997\n                if ( s < 3 ) s = 0;                                                                                    // 1998\n                                                                                                                       // 1999\n                // Newton-Raphson iteration.                                                                           // 2000\n                for ( ; ; ) {                                                                                          // 2001\n                    t = r;                                                                                             // 2002\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );                                                    // 2003\n                                                                                                                       // 2004\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =                                                // 2005\n                         coeffToString( r.c ) ).slice( 0, s ) ) {                                                      // 2006\n                                                                                                                       // 2007\n                        // The exponent of r may here be one less than the final result exponent,                      // 2008\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits                     // 2009\n                        // are indexed correctly.                                                                      // 2010\n                        if ( r.e < e ) --s;                                                                            // 2011\n                        n = n.slice( s - 3, s + 1 );                                                                   // 2012\n                                                                                                                       // 2013\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits                    // 2014\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the                        // 2015\n                        // iteration.                                                                                  // 2016\n                        if ( n == '9999' || !rep && n == '4999' ) {                                                    // 2017\n                                                                                                                       // 2018\n                            // On the first iteration only, check to see if rounding up gives the                      // 2019\n                            // exact result as the nines may infinitely repeat.                                        // 2020\n                            if ( !rep ) {                                                                              // 2021\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );                                               // 2022\n                                                                                                                       // 2023\n                                if ( t.times(t).eq(x) ) {                                                              // 2024\n                                    r = t;                                                                             // 2025\n                                    break;                                                                             // 2026\n                                }                                                                                      // 2027\n                            }                                                                                          // 2028\n                                                                                                                       // 2029\n                            dp += 4;                                                                                   // 2030\n                            s += 4;                                                                                    // 2031\n                            rep = 1;                                                                                   // 2032\n                        } else {                                                                                       // 2033\n                                                                                                                       // 2034\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact                         // 2035\n                            // result. If not, then there are further digits and m will be truthy.                     // 2036\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {                                         // 2037\n                                                                                                                       // 2038\n                                // Truncate to the first rounding digit.                                               // 2039\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );                                               // 2040\n                                m = !r.times(r).eq(x);                                                                 // 2041\n                            }                                                                                          // 2042\n                                                                                                                       // 2043\n                            break;                                                                                     // 2044\n                        }                                                                                              // 2045\n                    }                                                                                                  // 2046\n                }                                                                                                      // 2047\n            }                                                                                                          // 2048\n                                                                                                                       // 2049\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );                                             // 2050\n        };                                                                                                             // 2051\n                                                                                                                       // 2052\n                                                                                                                       // 2053\n        /*                                                                                                             // 2054\n         *  n * 0 = 0                                                                                                  // 2055\n         *  n * N = N                                                                                                  // 2056\n         *  n * I = I                                                                                                  // 2057\n         *  0 * n = 0                                                                                                  // 2058\n         *  0 * 0 = 0                                                                                                  // 2059\n         *  0 * N = N                                                                                                  // 2060\n         *  0 * I = N                                                                                                  // 2061\n         *  N * n = N                                                                                                  // 2062\n         *  N * 0 = N                                                                                                  // 2063\n         *  N * N = N                                                                                                  // 2064\n         *  N * I = N                                                                                                  // 2065\n         *  I * n = I                                                                                                  // 2066\n         *  I * 0 = N                                                                                                  // 2067\n         *  I * N = N                                                                                                  // 2068\n         *  I * I = I                                                                                                  // 2069\n         *                                                                                                             // 2070\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of                        // 2071\n         * BigNumber(y, b).                                                                                            // 2072\n         */                                                                                                            // 2073\n        P.times = P.mul = function ( y, b ) {                                                                          // 2074\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,                                                    // 2075\n                base, sqrtBase,                                                                                        // 2076\n                x = this,                                                                                              // 2077\n                xc = x.c,                                                                                              // 2078\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;                                                         // 2079\n                                                                                                                       // 2080\n            // Either NaN, ±Infinity or ±0?                                                                            // 2081\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {                                                                    // 2082\n                                                                                                                       // 2083\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.                                 // 2084\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {                                    // 2085\n                    y.c = y.e = y.s = null;                                                                            // 2086\n                } else {                                                                                               // 2087\n                    y.s *= x.s;                                                                                        // 2088\n                                                                                                                       // 2089\n                    // Return ±Infinity if either is ±Infinity.                                                        // 2090\n                    if ( !xc || !yc ) {                                                                                // 2091\n                        y.c = y.e = null;                                                                              // 2092\n                                                                                                                       // 2093\n                    // Return ±0 if either is ±0.                                                                      // 2094\n                    } else {                                                                                           // 2095\n                        y.c = [0];                                                                                     // 2096\n                        y.e = 0;                                                                                       // 2097\n                    }                                                                                                  // 2098\n                }                                                                                                      // 2099\n                                                                                                                       // 2100\n                return y;                                                                                              // 2101\n            }                                                                                                          // 2102\n                                                                                                                       // 2103\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );                                               // 2104\n            y.s *= x.s;                                                                                                // 2105\n            xcL = xc.length;                                                                                           // 2106\n            ycL = yc.length;                                                                                           // 2107\n                                                                                                                       // 2108\n            // Ensure xc points to longer array and xcL to its length.                                                 // 2109\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;                                   // 2110\n                                                                                                                       // 2111\n            // Initialise the result array with zeros.                                                                 // 2112\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );                                                           // 2113\n                                                                                                                       // 2114\n            base = BASE;                                                                                               // 2115\n            sqrtBase = SQRT_BASE;                                                                                      // 2116\n                                                                                                                       // 2117\n            for ( i = ycL; --i >= 0; ) {                                                                               // 2118\n                c = 0;                                                                                                 // 2119\n                ylo = yc[i] % sqrtBase;                                                                                // 2120\n                yhi = yc[i] / sqrtBase | 0;                                                                            // 2121\n                                                                                                                       // 2122\n                for ( k = xcL, j = i + k; j > i; ) {                                                                   // 2123\n                    xlo = xc[--k] % sqrtBase;                                                                          // 2124\n                    xhi = xc[k] / sqrtBase | 0;                                                                        // 2125\n                    m = yhi * xlo + xhi * ylo;                                                                         // 2126\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;                                     // 2127\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;                                         // 2128\n                    zc[j--] = xlo % base;                                                                              // 2129\n                }                                                                                                      // 2130\n                                                                                                                       // 2131\n                zc[j] = c;                                                                                             // 2132\n            }                                                                                                          // 2133\n                                                                                                                       // 2134\n            if (c) {                                                                                                   // 2135\n                ++e;                                                                                                   // 2136\n            } else {                                                                                                   // 2137\n                zc.shift();                                                                                            // 2138\n            }                                                                                                          // 2139\n                                                                                                                       // 2140\n            return normalise( y, zc, e );                                                                              // 2141\n        };                                                                                                             // 2142\n                                                                                                                       // 2143\n                                                                                                                       // 2144\n        /*                                                                                                             // 2145\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of                   // 2146\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.                            // 2147\n         *                                                                                                             // 2148\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 2149\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 2150\n         *                                                                                                             // 2151\n         * 'toDigits() precision out of range: {sd}'                                                                   // 2152\n         * 'toDigits() precision not an integer: {sd}'                                                                 // 2153\n         * 'toDigits() rounding mode not an integer: {rm}'                                                             // 2154\n         * 'toDigits() rounding mode out of range: {rm}'                                                               // 2155\n         */                                                                                                            // 2156\n        P.toDigits = function ( sd, rm ) {                                                                             // 2157\n            var n = new BigNumber(this);                                                                               // 2158\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;                             // 2159\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;                     // 2160\n            return sd ? round( n, sd, rm ) : n;                                                                        // 2161\n        };                                                                                                             // 2162\n                                                                                                                       // 2163\n                                                                                                                       // 2164\n        /*                                                                                                             // 2165\n         * Return a string representing the value of this BigNumber in exponential notation and                        // 2166\n         * rounded using ROUNDING_MODE to dp fixed decimal places.                                                     // 2167\n         *                                                                                                             // 2168\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 2169\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 2170\n         *                                                                                                             // 2171\n         * 'toExponential() decimal places not an integer: {dp}'                                                       // 2172\n         * 'toExponential() decimal places out of range: {dp}'                                                         // 2173\n         * 'toExponential() rounding mode not an integer: {rm}'                                                        // 2174\n         * 'toExponential() rounding mode out of range: {rm}'                                                          // 2175\n         */                                                                                                            // 2176\n        P.toExponential = function ( dp, rm ) {                                                                        // 2177\n            return format( this,                                                                                       // 2178\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );                                  // 2179\n        };                                                                                                             // 2180\n                                                                                                                       // 2181\n                                                                                                                       // 2182\n        /*                                                                                                             // 2183\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding                   // 2184\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.                       // 2185\n         *                                                                                                             // 2186\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',                                             // 2187\n         * but e.g. (-0.00001).toFixed(0) is '-0'.                                                                     // 2188\n         *                                                                                                             // 2189\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 2190\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 2191\n         *                                                                                                             // 2192\n         * 'toFixed() decimal places not an integer: {dp}'                                                             // 2193\n         * 'toFixed() decimal places out of range: {dp}'                                                               // 2194\n         * 'toFixed() rounding mode not an integer: {rm}'                                                              // 2195\n         * 'toFixed() rounding mode out of range: {rm}'                                                                // 2196\n         */                                                                                                            // 2197\n        P.toFixed = function ( dp, rm ) {                                                                              // 2198\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )                                            // 2199\n              ? ~~dp + this.e + 1 : null, rm, 20 );                                                                    // 2200\n        };                                                                                                             // 2201\n                                                                                                                       // 2202\n                                                                                                                       // 2203\n        /*                                                                                                             // 2204\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded                    // 2205\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties                   // 2206\n         * of the FORMAT object (see BigNumber.config).                                                                // 2207\n         *                                                                                                             // 2208\n         * FORMAT = {                                                                                                  // 2209\n         *      decimalSeparator : '.',                                                                                // 2210\n         *      groupSeparator : ',',                                                                                  // 2211\n         *      groupSize : 3,                                                                                         // 2212\n         *      secondaryGroupSize : 0,                                                                                // 2213\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space                                              // 2214\n         *      fractionGroupSize : 0                                                                                  // 2215\n         * };                                                                                                          // 2216\n         *                                                                                                             // 2217\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.                                                  // 2218\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 2219\n         *                                                                                                             // 2220\n         * 'toFormat() decimal places not an integer: {dp}'                                                            // 2221\n         * 'toFormat() decimal places out of range: {dp}'                                                              // 2222\n         * 'toFormat() rounding mode not an integer: {rm}'                                                             // 2223\n         * 'toFormat() rounding mode out of range: {rm}'                                                               // 2224\n         */                                                                                                            // 2225\n        P.toFormat = function ( dp, rm ) {                                                                             // 2226\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )                                         // 2227\n              ? ~~dp + this.e + 1 : null, rm, 21 );                                                                    // 2228\n                                                                                                                       // 2229\n            if ( this.c ) {                                                                                            // 2230\n                var i,                                                                                                 // 2231\n                    arr = str.split('.'),                                                                              // 2232\n                    g1 = +FORMAT.groupSize,                                                                            // 2233\n                    g2 = +FORMAT.secondaryGroupSize,                                                                   // 2234\n                    groupSeparator = FORMAT.groupSeparator,                                                            // 2235\n                    intPart = arr[0],                                                                                  // 2236\n                    fractionPart = arr[1],                                                                             // 2237\n                    isNeg = this.s < 0,                                                                                // 2238\n                    intDigits = isNeg ? intPart.slice(1) : intPart,                                                    // 2239\n                    len = intDigits.length;                                                                            // 2240\n                                                                                                                       // 2241\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;                                                             // 2242\n                                                                                                                       // 2243\n                if ( g1 > 0 && len > 0 ) {                                                                             // 2244\n                    i = len % g1 || g1;                                                                                // 2245\n                    intPart = intDigits.substr( 0, i );                                                                // 2246\n                                                                                                                       // 2247\n                    for ( ; i < len; i += g1 ) {                                                                       // 2248\n                        intPart += groupSeparator + intDigits.substr( i, g1 );                                         // 2249\n                    }                                                                                                  // 2250\n                                                                                                                       // 2251\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);                                      // 2252\n                    if (isNeg) intPart = '-' + intPart;                                                                // 2253\n                }                                                                                                      // 2254\n                                                                                                                       // 2255\n                str = fractionPart                                                                                     // 2256\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )                           // 2257\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),                                   // 2258\n                      '$&' + FORMAT.fractionGroupSeparator )                                                           // 2259\n                    : fractionPart )                                                                                   // 2260\n                  : intPart;                                                                                           // 2261\n            }                                                                                                          // 2262\n                                                                                                                       // 2263\n            return str;                                                                                                // 2264\n        };                                                                                                             // 2265\n                                                                                                                       // 2266\n                                                                                                                       // 2267\n        /*                                                                                                             // 2268\n         * Return a string array representing the value of this BigNumber as a simple fraction with                    // 2269\n         * an integer numerator and an integer denominator. The denominator will be a positive                         // 2270\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum                        // 2271\n         * denominator is not specified, the denominator will be the lowest value necessary to                         // 2272\n         * represent the number exactly.                                                                               // 2273\n         *                                                                                                             // 2274\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.                        // 2275\n         *                                                                                                             // 2276\n         * 'toFraction() max denominator not an integer: {md}'                                                         // 2277\n         * 'toFraction() max denominator out of range: {md}'                                                           // 2278\n         */                                                                                                            // 2279\n        P.toFraction = function (md) {                                                                                 // 2280\n            var arr, d0, d2, e, exp, n, n0, q, s,                                                                      // 2281\n                k = ERRORS,                                                                                            // 2282\n                x = this,                                                                                              // 2283\n                xc = x.c,                                                                                              // 2284\n                d = new BigNumber(ONE),                                                                                // 2285\n                n1 = d0 = new BigNumber(ONE),                                                                          // 2286\n                d1 = n0 = new BigNumber(ONE);                                                                          // 2287\n                                                                                                                       // 2288\n            if ( md != null ) {                                                                                        // 2289\n                ERRORS = false;                                                                                        // 2290\n                n = new BigNumber(md);                                                                                 // 2291\n                ERRORS = k;                                                                                            // 2292\n                                                                                                                       // 2293\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {                                                               // 2294\n                                                                                                                       // 2295\n                    if (ERRORS) {                                                                                      // 2296\n                        raise( 22,                                                                                     // 2297\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );                        // 2298\n                    }                                                                                                  // 2299\n                                                                                                                       // 2300\n                    // ERRORS is false:                                                                                // 2301\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.                          // 2302\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;                                      // 2303\n                }                                                                                                      // 2304\n            }                                                                                                          // 2305\n                                                                                                                       // 2306\n            if ( !xc ) return x.toString();                                                                            // 2307\n            s = coeffToString(xc);                                                                                     // 2308\n                                                                                                                       // 2309\n            // Determine initial denominator.                                                                          // 2310\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.                    // 2311\n            e = d.e = s.length - x.e - 1;                                                                              // 2312\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];                                    // 2313\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;                                                         // 2314\n                                                                                                                       // 2315\n            exp = MAX_EXP;                                                                                             // 2316\n            MAX_EXP = 1 / 0;                                                                                           // 2317\n            n = new BigNumber(s);                                                                                      // 2318\n                                                                                                                       // 2319\n            // n0 = d1 = 0                                                                                             // 2320\n            n0.c[0] = 0;                                                                                               // 2321\n                                                                                                                       // 2322\n            for ( ; ; )  {                                                                                             // 2323\n                q = div( n, d, 0, 1 );                                                                                 // 2324\n                d2 = d0.plus( q.times(d1) );                                                                           // 2325\n                if ( d2.cmp(md) == 1 ) break;                                                                          // 2326\n                d0 = d1;                                                                                               // 2327\n                d1 = d2;                                                                                               // 2328\n                n1 = n0.plus( q.times( d2 = n1 ) );                                                                    // 2329\n                n0 = d2;                                                                                               // 2330\n                d = n.minus( q.times( d2 = d ) );                                                                      // 2331\n                n = d2;                                                                                                // 2332\n            }                                                                                                          // 2333\n                                                                                                                       // 2334\n            d2 = div( md.minus(d0), d1, 0, 1 );                                                                        // 2335\n            n0 = n0.plus( d2.times(n1) );                                                                              // 2336\n            d0 = d0.plus( d2.times(d1) );                                                                              // 2337\n            n0.s = n1.s = x.s;                                                                                         // 2338\n            e *= 2;                                                                                                    // 2339\n                                                                                                                       // 2340\n            // Determine which fraction is closer to x, n0/d0 or n1/d1                                                 // 2341\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(                                                  // 2342\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1                                                 // 2343\n                    ? [ n1.toString(), d1.toString() ]                                                                 // 2344\n                    : [ n0.toString(), d0.toString() ];                                                                // 2345\n                                                                                                                       // 2346\n            MAX_EXP = exp;                                                                                             // 2347\n            return arr;                                                                                                // 2348\n        };                                                                                                             // 2349\n                                                                                                                       // 2350\n                                                                                                                       // 2351\n        /*                                                                                                             // 2352\n         * Return the value of this BigNumber converted to a number primitive.                                         // 2353\n         */                                                                                                            // 2354\n        P.toNumber = function () {                                                                                     // 2355\n            var x = this;                                                                                              // 2356\n                                                                                                                       // 2357\n            // Ensure zero has correct sign.                                                                           // 2358\n            return +x || ( x.s ? x.s * 0 : NaN );                                                                      // 2359\n        };                                                                                                             // 2360\n                                                                                                                       // 2361\n                                                                                                                       // 2362\n        /*                                                                                                             // 2363\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.                        // 2364\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.                                       // 2365\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.                                      // 2366\n         *                                                                                                             // 2367\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.                                        // 2368\n         * (Performs 54 loop iterations for n of 9007199254740992.)                                                    // 2369\n         *                                                                                                             // 2370\n         * 'pow() exponent not an integer: {n}'                                                                        // 2371\n         * 'pow() exponent out of range: {n}'                                                                          // 2372\n         */                                                                                                            // 2373\n        P.toPower = P.pow = function (n) {                                                                             // 2374\n            var k, y,                                                                                                  // 2375\n                i = mathfloor( n < 0 ? -n : +n ),                                                                      // 2376\n                x = this;                                                                                              // 2377\n                                                                                                                       // 2378\n            // Pass ±Infinity to Math.pow if exponent is out of range.                                                 // 2379\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&                              // 2380\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||                                                  // 2381\n                parseFloat(n) != n && !( n = NaN ) ) ) {                                                               // 2382\n                return new BigNumber( Math.pow( +x, n ) );                                                             // 2383\n            }                                                                                                          // 2384\n                                                                                                                       // 2385\n            // Truncating each coefficient array to a length of k after each multiplication equates                    // 2386\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a                      // 2387\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)                     // 2388\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;                                          // 2389\n            y = new BigNumber(ONE);                                                                                    // 2390\n                                                                                                                       // 2391\n            for ( ; ; ) {                                                                                              // 2392\n                                                                                                                       // 2393\n                if ( i % 2 ) {                                                                                         // 2394\n                    y = y.times(x);                                                                                    // 2395\n                    if ( !y.c ) break;                                                                                 // 2396\n                    if ( k && y.c.length > k ) y.c.length = k;                                                         // 2397\n                }                                                                                                      // 2398\n                                                                                                                       // 2399\n                i = mathfloor( i / 2 );                                                                                // 2400\n                if ( !i ) break;                                                                                       // 2401\n                                                                                                                       // 2402\n                x = x.times(x);                                                                                        // 2403\n                if ( k && x.c && x.c.length > k ) x.c.length = k;                                                      // 2404\n            }                                                                                                          // 2405\n                                                                                                                       // 2406\n            if ( n < 0 ) y = ONE.div(y);                                                                               // 2407\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;                                                   // 2408\n        };                                                                                                             // 2409\n                                                                                                                       // 2410\n                                                                                                                       // 2411\n        /*                                                                                                             // 2412\n         * Return a string representing the value of this BigNumber rounded to sd significant digits                   // 2413\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits                            // 2414\n         * necessary to represent the integer part of the value in fixed-point notation, then use                      // 2415\n         * exponential notation.                                                                                       // 2416\n         *                                                                                                             // 2417\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.                                              // 2418\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.                                                     // 2419\n         *                                                                                                             // 2420\n         * 'toPrecision() precision not an integer: {sd}'                                                              // 2421\n         * 'toPrecision() precision out of range: {sd}'                                                                // 2422\n         * 'toPrecision() rounding mode not an integer: {rm}'                                                          // 2423\n         * 'toPrecision() rounding mode out of range: {rm}'                                                            // 2424\n         */                                                                                                            // 2425\n        P.toPrecision = function ( sd, rm ) {                                                                          // 2426\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )                               // 2427\n              ? sd | 0 : null, rm, 24 );                                                                               // 2428\n        };                                                                                                             // 2429\n                                                                                                                       // 2430\n                                                                                                                       // 2431\n        /*                                                                                                             // 2432\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is                      // 2433\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and                   // 2434\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent                       // 2435\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than                   // 2436\n         * TO_EXP_NEG, return exponential notation.                                                                    // 2437\n         *                                                                                                             // 2438\n         * [b] {number} Integer, 2 to 64 inclusive.                                                                    // 2439\n         *                                                                                                             // 2440\n         * 'toString() base not an integer: {b}'                                                                       // 2441\n         * 'toString() base out of range: {b}'                                                                         // 2442\n         */                                                                                                            // 2443\n        P.toString = function (b) {                                                                                    // 2444\n            var str,                                                                                                   // 2445\n                n = this,                                                                                              // 2446\n                s = n.s,                                                                                               // 2447\n                e = n.e;                                                                                               // 2448\n                                                                                                                       // 2449\n            // Infinity or NaN?                                                                                        // 2450\n            if ( e === null ) {                                                                                        // 2451\n                                                                                                                       // 2452\n                if (s) {                                                                                               // 2453\n                    str = 'Infinity';                                                                                  // 2454\n                    if ( s < 0 ) str = '-' + str;                                                                      // 2455\n                } else {                                                                                               // 2456\n                    str = 'NaN';                                                                                       // 2457\n                }                                                                                                      // 2458\n            } else {                                                                                                   // 2459\n                str = coeffToString( n.c );                                                                            // 2460\n                                                                                                                       // 2461\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {                                              // 2462\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS                                                           // 2463\n                      ? toExponential( str, e )                                                                        // 2464\n                      : toFixedPoint( str, e );                                                                        // 2465\n                } else {                                                                                               // 2466\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );                                         // 2467\n                }                                                                                                      // 2468\n                                                                                                                       // 2469\n                if ( s < 0 && n.c[0] ) str = '-' + str;                                                                // 2470\n            }                                                                                                          // 2471\n                                                                                                                       // 2472\n            return str;                                                                                                // 2473\n        };                                                                                                             // 2474\n                                                                                                                       // 2475\n                                                                                                                       // 2476\n        /*                                                                                                             // 2477\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole                      // 2478\n         * number.                                                                                                     // 2479\n         */                                                                                                            // 2480\n        P.truncated = P.trunc = function () {                                                                          // 2481\n            return round( new BigNumber(this), this.e + 1, 1 );                                                        // 2482\n        };                                                                                                             // 2483\n                                                                                                                       // 2484\n                                                                                                                       // 2485\n                                                                                                                       // 2486\n        /*                                                                                                             // 2487\n         * Return as toString, but do not accept a base argument.                                                      // 2488\n         */                                                                                                            // 2489\n        P.valueOf = P.toJSON = function () {                                                                           // 2490\n            return this.toString();                                                                                    // 2491\n        };                                                                                                             // 2492\n                                                                                                                       // 2493\n                                                                                                                       // 2494\n        // Aliases for BigDecimal methods.                                                                             // 2495\n        //P.add = P.plus;         // P.add included above                                                              // 2496\n        //P.subtract = P.minus;   // P.sub included above                                                              // 2497\n        //P.multiply = P.times;   // P.mul included above                                                              // 2498\n        //P.divide = P.div;                                                                                            // 2499\n        //P.remainder = P.mod;                                                                                         // 2500\n        //P.compareTo = P.cmp;                                                                                         // 2501\n        //P.negate = P.neg;                                                                                            // 2502\n                                                                                                                       // 2503\n                                                                                                                       // 2504\n        if ( configObj != null ) BigNumber.config(configObj);                                                          // 2505\n                                                                                                                       // 2506\n        return BigNumber;                                                                                              // 2507\n    }                                                                                                                  // 2508\n                                                                                                                       // 2509\n                                                                                                                       // 2510\n    // PRIVATE HELPER FUNCTIONS                                                                                        // 2511\n                                                                                                                       // 2512\n                                                                                                                       // 2513\n    function bitFloor(n) {                                                                                             // 2514\n        var i = n | 0;                                                                                                 // 2515\n        return n > 0 || n === i ? i : i - 1;                                                                           // 2516\n    }                                                                                                                  // 2517\n                                                                                                                       // 2518\n                                                                                                                       // 2519\n    // Return a coefficient array as a string of base 10 digits.                                                       // 2520\n    function coeffToString(a) {                                                                                        // 2521\n        var s, z,                                                                                                      // 2522\n            i = 1,                                                                                                     // 2523\n            j = a.length,                                                                                              // 2524\n            r = a[0] + '';                                                                                             // 2525\n                                                                                                                       // 2526\n        for ( ; i < j; ) {                                                                                             // 2527\n            s = a[i++] + '';                                                                                           // 2528\n            z = LOG_BASE - s.length;                                                                                   // 2529\n            for ( ; z--; s = '0' + s );                                                                                // 2530\n            r += s;                                                                                                    // 2531\n        }                                                                                                              // 2532\n                                                                                                                       // 2533\n        // Determine trailing zeros.                                                                                   // 2534\n        for ( j = r.length; r.charCodeAt(--j) === 48; );                                                               // 2535\n        return r.slice( 0, j + 1 || 1 );                                                                               // 2536\n    }                                                                                                                  // 2537\n                                                                                                                       // 2538\n                                                                                                                       // 2539\n    // Compare the value of BigNumbers x and y.                                                                        // 2540\n    function compare( x, y ) {                                                                                         // 2541\n        var a, b,                                                                                                      // 2542\n            xc = x.c,                                                                                                  // 2543\n            yc = y.c,                                                                                                  // 2544\n            i = x.s,                                                                                                   // 2545\n            j = y.s,                                                                                                   // 2546\n            k = x.e,                                                                                                   // 2547\n            l = y.e;                                                                                                   // 2548\n                                                                                                                       // 2549\n        // Either NaN?                                                                                                 // 2550\n        if ( !i || !j ) return null;                                                                                   // 2551\n                                                                                                                       // 2552\n        a = xc && !xc[0];                                                                                              // 2553\n        b = yc && !yc[0];                                                                                              // 2554\n                                                                                                                       // 2555\n        // Either zero?                                                                                                // 2556\n        if ( a || b ) return a ? b ? 0 : -j : i;                                                                       // 2557\n                                                                                                                       // 2558\n        // Signs differ?                                                                                               // 2559\n        if ( i != j ) return i;                                                                                        // 2560\n                                                                                                                       // 2561\n        a = i < 0;                                                                                                     // 2562\n        b = k == l;                                                                                                    // 2563\n                                                                                                                       // 2564\n        // Either Infinity?                                                                                            // 2565\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;                                                             // 2566\n                                                                                                                       // 2567\n        // Compare exponents.                                                                                          // 2568\n        if ( !b ) return k > l ^ a ? 1 : -1;                                                                           // 2569\n                                                                                                                       // 2570\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;                                                             // 2571\n                                                                                                                       // 2572\n        // Compare digit by digit.                                                                                     // 2573\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;                             // 2574\n                                                                                                                       // 2575\n        // Compare lengths.                                                                                            // 2576\n        return k == l ? 0 : k > l ^ a ? 1 : -1;                                                                        // 2577\n    }                                                                                                                  // 2578\n                                                                                                                       // 2579\n                                                                                                                       // 2580\n    /*                                                                                                                 // 2581\n     * Return true if n is a valid number in range, otherwise false.                                                   // 2582\n     * Use for argument validation when ERRORS is false.                                                               // 2583\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.                                                       // 2584\n     */                                                                                                                // 2585\n    function intValidatorNoErrors( n, min, max ) {                                                                     // 2586\n        return ( n = truncate(n) ) >= min && n <= max;                                                                 // 2587\n    }                                                                                                                  // 2588\n                                                                                                                       // 2589\n                                                                                                                       // 2590\n    function isArray(obj) {                                                                                            // 2591\n        return Object.prototype.toString.call(obj) == '[object Array]';                                                // 2592\n    }                                                                                                                  // 2593\n                                                                                                                       // 2594\n                                                                                                                       // 2595\n    /*                                                                                                                 // 2596\n     * Convert string of baseIn to an array of numbers of baseOut.                                                     // 2597\n     * Eg. convertBase('255', 10, 16) returns [15, 15].                                                                // 2598\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].                                                                // 2599\n     */                                                                                                                // 2600\n    function toBaseOut( str, baseIn, baseOut ) {                                                                       // 2601\n        var j,                                                                                                         // 2602\n            arr = [0],                                                                                                 // 2603\n            arrL,                                                                                                      // 2604\n            i = 0,                                                                                                     // 2605\n            len = str.length;                                                                                          // 2606\n                                                                                                                       // 2607\n        for ( ; i < len; ) {                                                                                           // 2608\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );                                                    // 2609\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );                                                     // 2610\n                                                                                                                       // 2611\n            for ( ; j < arr.length; j++ ) {                                                                            // 2612\n                                                                                                                       // 2613\n                if ( arr[j] > baseOut - 1 ) {                                                                          // 2614\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;                                                          // 2615\n                    arr[j + 1] += arr[j] / baseOut | 0;                                                                // 2616\n                    arr[j] %= baseOut;                                                                                 // 2617\n                }                                                                                                      // 2618\n            }                                                                                                          // 2619\n        }                                                                                                              // 2620\n                                                                                                                       // 2621\n        return arr.reverse();                                                                                          // 2622\n    }                                                                                                                  // 2623\n                                                                                                                       // 2624\n                                                                                                                       // 2625\n    function toExponential( str, e ) {                                                                                 // 2626\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +                                         // 2627\n          ( e < 0 ? 'e' : 'e+' ) + e;                                                                                  // 2628\n    }                                                                                                                  // 2629\n                                                                                                                       // 2630\n                                                                                                                       // 2631\n    function toFixedPoint( str, e ) {                                                                                  // 2632\n        var len, z;                                                                                                    // 2633\n                                                                                                                       // 2634\n        // Negative exponent?                                                                                          // 2635\n        if ( e < 0 ) {                                                                                                 // 2636\n                                                                                                                       // 2637\n            // Prepend zeros.                                                                                          // 2638\n            for ( z = '0.'; ++e; z += '0' );                                                                           // 2639\n            str = z + str;                                                                                             // 2640\n                                                                                                                       // 2641\n        // Positive exponent                                                                                           // 2642\n        } else {                                                                                                       // 2643\n            len = str.length;                                                                                          // 2644\n                                                                                                                       // 2645\n            // Append zeros.                                                                                           // 2646\n            if ( ++e > len ) {                                                                                         // 2647\n                for ( z = '0', e -= len; --e; z += '0' );                                                              // 2648\n                str += z;                                                                                              // 2649\n            } else if ( e < len ) {                                                                                    // 2650\n                str = str.slice( 0, e ) + '.' + str.slice(e);                                                          // 2651\n            }                                                                                                          // 2652\n        }                                                                                                              // 2653\n                                                                                                                       // 2654\n        return str;                                                                                                    // 2655\n    }                                                                                                                  // 2656\n                                                                                                                       // 2657\n                                                                                                                       // 2658\n    function truncate(n) {                                                                                             // 2659\n        n = parseFloat(n);                                                                                             // 2660\n        return n < 0 ? mathceil(n) : mathfloor(n);                                                                     // 2661\n    }                                                                                                                  // 2662\n                                                                                                                       // 2663\n                                                                                                                       // 2664\n    // EXPORT                                                                                                          // 2665\n                                                                                                                       // 2666\n                                                                                                                       // 2667\n    BigNumber = another();                                                                                             // 2668\n                                                                                                                       // 2669\n    // AMD.                                                                                                            // 2670\n    if ( typeof define == 'function' && define.amd ) {                                                                 // 2671\n        define( function () { return BigNumber; } );                                                                   // 2672\n                                                                                                                       // 2673\n    // Node and other environments that support module.exports.                                                        // 2674\n    } else if ( typeof module != 'undefined' && module.exports ) {                                                     // 2675\n        module.exports = BigNumber;                                                                                    // 2676\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}                                                // 2677\n                                                                                                                       // 2678\n    // Browser.                                                                                                        // 2679\n    } else {                                                                                                           // 2680\n        global.BigNumber = BigNumber;                                                                                  // 2681\n    }                                                                                                                  // 2682\n})(this);                                                                                                              // 2683\n                                                                                                                       // 2684\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}},\"utf8\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/utf8/package.json                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"utf8\";                                                                                                 // 1\nexports.version = \"2.1.2\";                                                                                             // 2\nexports.main = \"utf8.js\";                                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utf8.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/utf8/utf8.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! https://mths.be/utf8js v2.1.2 by @mathias */                                                                       // 1\n;(function(root) {                                                                                                     // 2\n                                                                                                                       // 3\n\t// Detect free variables `exports`                                                                                    // 4\n\tvar freeExports = typeof exports == 'object' && exports;                                                              // 5\n                                                                                                                       // 6\n\t// Detect free variable `module`                                                                                      // 7\n\tvar freeModule = typeof module == 'object' && module &&                                                               // 8\n\t\tmodule.exports == freeExports && module;                                                                             // 9\n                                                                                                                       // 10\n\t// Detect free variable `global`, from Node.js or Browserified code,                                                  // 11\n\t// and use it as `root`                                                                                               // 12\n\tvar freeGlobal = typeof global == 'object' && global;                                                                 // 13\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {                                           // 14\n\t\troot = freeGlobal;                                                                                                   // 15\n\t}                                                                                                                     // 16\n                                                                                                                       // 17\n\t/*--------------------------------------------------------------------------*/                                        // 18\n                                                                                                                       // 19\n\tvar stringFromCharCode = String.fromCharCode;                                                                         // 20\n                                                                                                                       // 21\n\t// Taken from https://mths.be/punycode                                                                                // 22\n\tfunction ucs2decode(string) {                                                                                         // 23\n\t\tvar output = [];                                                                                                     // 24\n\t\tvar counter = 0;                                                                                                     // 25\n\t\tvar length = string.length;                                                                                          // 26\n\t\tvar value;                                                                                                           // 27\n\t\tvar extra;                                                                                                           // 28\n\t\twhile (counter < length) {                                                                                           // 29\n\t\t\tvalue = string.charCodeAt(counter++);                                                                               // 30\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {                                                       // 31\n\t\t\t\t// high surrogate, and there is a next character                                                                   // 32\n\t\t\t\textra = string.charCodeAt(counter++);                                                                              // 33\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate                                                                 // 34\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);                                                 // 35\n\t\t\t\t} else {                                                                                                           // 36\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next                                              // 37\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair                                                            // 38\n\t\t\t\t\toutput.push(value);                                                                                               // 39\n\t\t\t\t\tcounter--;                                                                                                        // 40\n\t\t\t\t}                                                                                                                  // 41\n\t\t\t} else {                                                                                                            // 42\n\t\t\t\toutput.push(value);                                                                                                // 43\n\t\t\t}                                                                                                                   // 44\n\t\t}                                                                                                                    // 45\n\t\treturn output;                                                                                                       // 46\n\t}                                                                                                                     // 47\n                                                                                                                       // 48\n\t// Taken from https://mths.be/punycode                                                                                // 49\n\tfunction ucs2encode(array) {                                                                                          // 50\n\t\tvar length = array.length;                                                                                           // 51\n\t\tvar index = -1;                                                                                                      // 52\n\t\tvar value;                                                                                                           // 53\n\t\tvar output = '';                                                                                                     // 54\n\t\twhile (++index < length) {                                                                                           // 55\n\t\t\tvalue = array[index];                                                                                               // 56\n\t\t\tif (value > 0xFFFF) {                                                                                               // 57\n\t\t\t\tvalue -= 0x10000;                                                                                                  // 58\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);                                                       // 59\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;                                                                                    // 60\n\t\t\t}                                                                                                                   // 61\n\t\t\toutput += stringFromCharCode(value);                                                                                // 62\n\t\t}                                                                                                                    // 63\n\t\treturn output;                                                                                                       // 64\n\t}                                                                                                                     // 65\n                                                                                                                       // 66\n\tfunction checkScalarValue(codePoint) {                                                                                // 67\n\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {                                                                    // 68\n\t\t\tthrow Error(                                                                                                        // 69\n\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +                                                       // 70\n\t\t\t\t' is not a scalar value'                                                                                           // 71\n\t\t\t);                                                                                                                  // 72\n\t\t}                                                                                                                    // 73\n\t}                                                                                                                     // 74\n\t/*--------------------------------------------------------------------------*/                                        // 75\n                                                                                                                       // 76\n\tfunction createByte(codePoint, shift) {                                                                               // 77\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);                                                     // 78\n\t}                                                                                                                     // 79\n                                                                                                                       // 80\n\tfunction encodeCodePoint(codePoint) {                                                                                 // 81\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence                                                              // 82\n\t\t\treturn stringFromCharCode(codePoint);                                                                               // 83\n\t\t}                                                                                                                    // 84\n\t\tvar symbol = '';                                                                                                     // 85\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence                                                              // 86\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);                                                      // 87\n\t\t}                                                                                                                    // 88\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence                                                         // 89\n\t\t\tcheckScalarValue(codePoint);                                                                                        // 90\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);                                                     // 91\n\t\t\tsymbol += createByte(codePoint, 6);                                                                                 // 92\n\t\t}                                                                                                                    // 93\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence                                                         // 94\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);                                                     // 95\n\t\t\tsymbol += createByte(codePoint, 12);                                                                                // 96\n\t\t\tsymbol += createByte(codePoint, 6);                                                                                 // 97\n\t\t}                                                                                                                    // 98\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);                                                             // 99\n\t\treturn symbol;                                                                                                       // 100\n\t}                                                                                                                     // 101\n                                                                                                                       // 102\n\tfunction utf8encode(string) {                                                                                         // 103\n\t\tvar codePoints = ucs2decode(string);                                                                                 // 104\n\t\tvar length = codePoints.length;                                                                                      // 105\n\t\tvar index = -1;                                                                                                      // 106\n\t\tvar codePoint;                                                                                                       // 107\n\t\tvar byteString = '';                                                                                                 // 108\n\t\twhile (++index < length) {                                                                                           // 109\n\t\t\tcodePoint = codePoints[index];                                                                                      // 110\n\t\t\tbyteString += encodeCodePoint(codePoint);                                                                           // 111\n\t\t}                                                                                                                    // 112\n\t\treturn byteString;                                                                                                   // 113\n\t}                                                                                                                     // 114\n                                                                                                                       // 115\n\t/*--------------------------------------------------------------------------*/                                        // 116\n                                                                                                                       // 117\n\tfunction readContinuationByte() {                                                                                     // 118\n\t\tif (byteIndex >= byteCount) {                                                                                        // 119\n\t\t\tthrow Error('Invalid byte index');                                                                                  // 120\n\t\t}                                                                                                                    // 121\n                                                                                                                       // 122\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;                                                                  // 123\n\t\tbyteIndex++;                                                                                                         // 124\n                                                                                                                       // 125\n\t\tif ((continuationByte & 0xC0) == 0x80) {                                                                             // 126\n\t\t\treturn continuationByte & 0x3F;                                                                                     // 127\n\t\t}                                                                                                                    // 128\n                                                                                                                       // 129\n\t\t// If we end up here, it’s not a continuation byte                                                                   // 130\n\t\tthrow Error('Invalid continuation byte');                                                                            // 131\n\t}                                                                                                                     // 132\n                                                                                                                       // 133\n\tfunction decodeSymbol() {                                                                                             // 134\n\t\tvar byte1;                                                                                                           // 135\n\t\tvar byte2;                                                                                                           // 136\n\t\tvar byte3;                                                                                                           // 137\n\t\tvar byte4;                                                                                                           // 138\n\t\tvar codePoint;                                                                                                       // 139\n                                                                                                                       // 140\n\t\tif (byteIndex > byteCount) {                                                                                         // 141\n\t\t\tthrow Error('Invalid byte index');                                                                                  // 142\n\t\t}                                                                                                                    // 143\n                                                                                                                       // 144\n\t\tif (byteIndex == byteCount) {                                                                                        // 145\n\t\t\treturn false;                                                                                                       // 146\n\t\t}                                                                                                                    // 147\n                                                                                                                       // 148\n\t\t// Read first byte                                                                                                   // 149\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;                                                                                 // 150\n\t\tbyteIndex++;                                                                                                         // 151\n                                                                                                                       // 152\n\t\t// 1-byte sequence (no continuation bytes)                                                                           // 153\n\t\tif ((byte1 & 0x80) == 0) {                                                                                           // 154\n\t\t\treturn byte1;                                                                                                       // 155\n\t\t}                                                                                                                    // 156\n                                                                                                                       // 157\n\t\t// 2-byte sequence                                                                                                   // 158\n\t\tif ((byte1 & 0xE0) == 0xC0) {                                                                                        // 159\n\t\t\tbyte2 = readContinuationByte();                                                                                     // 160\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;                                                                          // 161\n\t\t\tif (codePoint >= 0x80) {                                                                                            // 162\n\t\t\t\treturn codePoint;                                                                                                  // 163\n\t\t\t} else {                                                                                                            // 164\n\t\t\t\tthrow Error('Invalid continuation byte');                                                                          // 165\n\t\t\t}                                                                                                                   // 166\n\t\t}                                                                                                                    // 167\n                                                                                                                       // 168\n\t\t// 3-byte sequence (may include unpaired surrogates)                                                                 // 169\n\t\tif ((byte1 & 0xF0) == 0xE0) {                                                                                        // 170\n\t\t\tbyte2 = readContinuationByte();                                                                                     // 171\n\t\t\tbyte3 = readContinuationByte();                                                                                     // 172\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;                                                          // 173\n\t\t\tif (codePoint >= 0x0800) {                                                                                          // 174\n\t\t\t\tcheckScalarValue(codePoint);                                                                                       // 175\n\t\t\t\treturn codePoint;                                                                                                  // 176\n\t\t\t} else {                                                                                                            // 177\n\t\t\t\tthrow Error('Invalid continuation byte');                                                                          // 178\n\t\t\t}                                                                                                                   // 179\n\t\t}                                                                                                                    // 180\n                                                                                                                       // 181\n\t\t// 4-byte sequence                                                                                                   // 182\n\t\tif ((byte1 & 0xF8) == 0xF0) {                                                                                        // 183\n\t\t\tbyte2 = readContinuationByte();                                                                                     // 184\n\t\t\tbyte3 = readContinuationByte();                                                                                     // 185\n\t\t\tbyte4 = readContinuationByte();                                                                                     // 186\n\t\t\tcodePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |                                                            // 187\n\t\t\t\t(byte3 << 0x06) | byte4;                                                                                           // 188\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {                                                               // 189\n\t\t\t\treturn codePoint;                                                                                                  // 190\n\t\t\t}                                                                                                                   // 191\n\t\t}                                                                                                                    // 192\n                                                                                                                       // 193\n\t\tthrow Error('Invalid UTF-8 detected');                                                                               // 194\n\t}                                                                                                                     // 195\n                                                                                                                       // 196\n\tvar byteArray;                                                                                                        // 197\n\tvar byteCount;                                                                                                        // 198\n\tvar byteIndex;                                                                                                        // 199\n\tfunction utf8decode(byteString) {                                                                                     // 200\n\t\tbyteArray = ucs2decode(byteString);                                                                                  // 201\n\t\tbyteCount = byteArray.length;                                                                                        // 202\n\t\tbyteIndex = 0;                                                                                                       // 203\n\t\tvar codePoints = [];                                                                                                 // 204\n\t\tvar tmp;                                                                                                             // 205\n\t\twhile ((tmp = decodeSymbol()) !== false) {                                                                           // 206\n\t\t\tcodePoints.push(tmp);                                                                                               // 207\n\t\t}                                                                                                                    // 208\n\t\treturn ucs2encode(codePoints);                                                                                       // 209\n\t}                                                                                                                     // 210\n                                                                                                                       // 211\n\t/*--------------------------------------------------------------------------*/                                        // 212\n                                                                                                                       // 213\n\tvar utf8 = {                                                                                                          // 214\n\t\t'version': '2.1.2',                                                                                                  // 215\n\t\t'encode': utf8encode,                                                                                                // 216\n\t\t'decode': utf8decode                                                                                                 // 217\n\t};                                                                                                                    // 218\n                                                                                                                       // 219\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns                                        // 220\n\t// like the following:                                                                                                // 221\n\tif (                                                                                                                  // 222\n\t\ttypeof define == 'function' &&                                                                                       // 223\n\t\ttypeof define.amd == 'object' &&                                                                                     // 224\n\t\tdefine.amd                                                                                                           // 225\n\t) {                                                                                                                   // 226\n\t\tdefine(function() {                                                                                                  // 227\n\t\t\treturn utf8;                                                                                                        // 228\n\t\t});                                                                                                                  // 229\n\t}\telse if (freeExports && !freeExports.nodeType) {                                                                    // 230\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+                                                                   // 231\n\t\t\tfreeModule.exports = utf8;                                                                                          // 232\n\t\t} else { // in Narwhal or RingoJS v0.7.0-                                                                            // 233\n\t\t\tvar object = {};                                                                                                    // 234\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;                                                                         // 235\n\t\t\tfor (var key in utf8) {                                                                                             // 236\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);                                                  // 237\n\t\t\t}                                                                                                                   // 238\n\t\t}                                                                                                                    // 239\n\t} else { // in Rhino or a web browser                                                                                 // 240\n\t\troot.utf8 = utf8;                                                                                                    // 241\n\t}                                                                                                                     // 242\n                                                                                                                       // 243\n}(this));                                                                                                              // 244\n                                                                                                                       // 245\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"xmlhttprequest\":{\"package.json\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/xmlhttprequest/package.json                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"xmlhttprequest\";                                                                                       // 1\nexports.version = \"1.8.0\";                                                                                             // 2\nexports.main = \"./lib/XMLHttpRequest.js\";                                                                              // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"XMLHttpRequest.js\":[\"url\",\"child_process\",\"fs\",\"http\",\"https\",\"meteor-node-stubs/deps/url\",\"meteor-node-stubs/deps/child_process\",\"meteor-node-stubs/deps/fs\",\"meteor-node-stubs/deps/http\",\"meteor-node-stubs/deps/https\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/xmlhttprequest/lib/XMLHttpRequest.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.                                          // 2\n *                                                                                                                     // 3\n * This can be used with JS designed for browsers to improve reuse of code and                                         // 4\n * allow the use of existing libraries.                                                                                // 5\n *                                                                                                                     // 6\n * Usage: include(\"XMLHttpRequest.js\") and use XMLHttpRequest per W3C specs.                                           // 7\n *                                                                                                                     // 8\n * @author Dan DeFelippi <dan@driverdan.com>                                                                           // 9\n * @contributor David Ellis <d.f.ellis@ieee.org>                                                                       // 10\n * @license MIT                                                                                                        // 11\n */                                                                                                                    // 12\n                                                                                                                       // 13\nvar Url = require(\"url\");                                                                                              // 14\nvar spawn = require(\"child_process\").spawn;                                                                            // 15\nvar fs = require(\"fs\");                                                                                                // 16\n                                                                                                                       // 17\nexports.XMLHttpRequest = function() {                                                                                  // 18\n  \"use strict\";                                                                                                        // 19\n                                                                                                                       // 20\n  /**                                                                                                                  // 21\n   * Private variables                                                                                                 // 22\n   */                                                                                                                  // 23\n  var self = this;                                                                                                     // 24\n  var http = require(\"http\");                                                                                          // 25\n  var https = require(\"https\");                                                                                        // 26\n                                                                                                                       // 27\n  // Holds http.js objects                                                                                             // 28\n  var request;                                                                                                         // 29\n  var response;                                                                                                        // 30\n                                                                                                                       // 31\n  // Request settings                                                                                                  // 32\n  var settings = {};                                                                                                   // 33\n                                                                                                                       // 34\n  // Disable header blacklist.                                                                                         // 35\n  // Not part of XHR specs.                                                                                            // 36\n  var disableHeaderCheck = false;                                                                                      // 37\n                                                                                                                       // 38\n  // Set some default headers                                                                                          // 39\n  var defaultHeaders = {                                                                                               // 40\n    \"User-Agent\": \"node-XMLHttpRequest\",                                                                               // 41\n    \"Accept\": \"*/*\",                                                                                                   // 42\n  };                                                                                                                   // 43\n                                                                                                                       // 44\n  var headers = {};                                                                                                    // 45\n  var headersCase = {};                                                                                                // 46\n                                                                                                                       // 47\n  // These headers are not user setable.                                                                               // 48\n  // The following are allowed but banned in the spec:                                                                 // 49\n  // * user-agent                                                                                                      // 50\n  var forbiddenRequestHeaders = [                                                                                      // 51\n    \"accept-charset\",                                                                                                  // 52\n    \"accept-encoding\",                                                                                                 // 53\n    \"access-control-request-headers\",                                                                                  // 54\n    \"access-control-request-method\",                                                                                   // 55\n    \"connection\",                                                                                                      // 56\n    \"content-length\",                                                                                                  // 57\n    \"content-transfer-encoding\",                                                                                       // 58\n    \"cookie\",                                                                                                          // 59\n    \"cookie2\",                                                                                                         // 60\n    \"date\",                                                                                                            // 61\n    \"expect\",                                                                                                          // 62\n    \"host\",                                                                                                            // 63\n    \"keep-alive\",                                                                                                      // 64\n    \"origin\",                                                                                                          // 65\n    \"referer\",                                                                                                         // 66\n    \"te\",                                                                                                              // 67\n    \"trailer\",                                                                                                         // 68\n    \"transfer-encoding\",                                                                                               // 69\n    \"upgrade\",                                                                                                         // 70\n    \"via\"                                                                                                              // 71\n  ];                                                                                                                   // 72\n                                                                                                                       // 73\n  // These request methods are not allowed                                                                             // 74\n  var forbiddenRequestMethods = [                                                                                      // 75\n    \"TRACE\",                                                                                                           // 76\n    \"TRACK\",                                                                                                           // 77\n    \"CONNECT\"                                                                                                          // 78\n  ];                                                                                                                   // 79\n                                                                                                                       // 80\n  // Send flag                                                                                                         // 81\n  var sendFlag = false;                                                                                                // 82\n  // Error flag, used when errors occur or abort is called                                                             // 83\n  var errorFlag = false;                                                                                               // 84\n                                                                                                                       // 85\n  // Event listeners                                                                                                   // 86\n  var listeners = {};                                                                                                  // 87\n                                                                                                                       // 88\n  /**                                                                                                                  // 89\n   * Constants                                                                                                         // 90\n   */                                                                                                                  // 91\n                                                                                                                       // 92\n  this.UNSENT = 0;                                                                                                     // 93\n  this.OPENED = 1;                                                                                                     // 94\n  this.HEADERS_RECEIVED = 2;                                                                                           // 95\n  this.LOADING = 3;                                                                                                    // 96\n  this.DONE = 4;                                                                                                       // 97\n                                                                                                                       // 98\n  /**                                                                                                                  // 99\n   * Public vars                                                                                                       // 100\n   */                                                                                                                  // 101\n                                                                                                                       // 102\n  // Current state                                                                                                     // 103\n  this.readyState = this.UNSENT;                                                                                       // 104\n                                                                                                                       // 105\n  // default ready state change handler in case one is not set or is set late                                          // 106\n  this.onreadystatechange = null;                                                                                      // 107\n                                                                                                                       // 108\n  // Result & response                                                                                                 // 109\n  this.responseText = \"\";                                                                                              // 110\n  this.responseXML = \"\";                                                                                               // 111\n  this.status = null;                                                                                                  // 112\n  this.statusText = null;                                                                                              // 113\n                                                                                                                       // 114\n  // Whether cross-site Access-Control requests should be made using                                                   // 115\n  // credentials such as cookies or authorization headers                                                              // 116\n  this.withCredentials = false;                                                                                        // 117\n                                                                                                                       // 118\n  /**                                                                                                                  // 119\n   * Private methods                                                                                                   // 120\n   */                                                                                                                  // 121\n                                                                                                                       // 122\n  /**                                                                                                                  // 123\n   * Check if the specified header is allowed.                                                                         // 124\n   *                                                                                                                   // 125\n   * @param string header Header to validate                                                                           // 126\n   * @return boolean False if not allowed, otherwise true                                                              // 127\n   */                                                                                                                  // 128\n  var isAllowedHttpHeader = function(header) {                                                                         // 129\n    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);             // 130\n  };                                                                                                                   // 131\n                                                                                                                       // 132\n  /**                                                                                                                  // 133\n   * Check if the specified method is allowed.                                                                         // 134\n   *                                                                                                                   // 135\n   * @param string method Request method to validate                                                                   // 136\n   * @return boolean False if not allowed, otherwise true                                                              // 137\n   */                                                                                                                  // 138\n  var isAllowedHttpMethod = function(method) {                                                                         // 139\n    return (method && forbiddenRequestMethods.indexOf(method) === -1);                                                 // 140\n  };                                                                                                                   // 141\n                                                                                                                       // 142\n  /**                                                                                                                  // 143\n   * Public methods                                                                                                    // 144\n   */                                                                                                                  // 145\n                                                                                                                       // 146\n  /**                                                                                                                  // 147\n   * Open the connection. Currently supports local server requests.                                                    // 148\n   *                                                                                                                   // 149\n   * @param string method Connection method (eg GET, POST)                                                             // 150\n   * @param string url URL for the connection.                                                                         // 151\n   * @param boolean async Asynchronous connection. Default is true.                                                    // 152\n   * @param string user Username for basic authentication (optional)                                                   // 153\n   * @param string password Password for basic authentication (optional)                                               // 154\n   */                                                                                                                  // 155\n  this.open = function(method, url, async, user, password) {                                                           // 156\n    this.abort();                                                                                                      // 157\n    errorFlag = false;                                                                                                 // 158\n                                                                                                                       // 159\n    // Check for valid request method                                                                                  // 160\n    if (!isAllowedHttpMethod(method)) {                                                                                // 161\n      throw new Error(\"SecurityError: Request method not allowed\");                                                    // 162\n    }                                                                                                                  // 163\n                                                                                                                       // 164\n    settings = {                                                                                                       // 165\n      \"method\": method,                                                                                                // 166\n      \"url\": url.toString(),                                                                                           // 167\n      \"async\": (typeof async !== \"boolean\" ? true : async),                                                            // 168\n      \"user\": user || null,                                                                                            // 169\n      \"password\": password || null                                                                                     // 170\n    };                                                                                                                 // 171\n                                                                                                                       // 172\n    setState(this.OPENED);                                                                                             // 173\n  };                                                                                                                   // 174\n                                                                                                                       // 175\n  /**                                                                                                                  // 176\n   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.                                  // 177\n   * This does not conform to the W3C spec.                                                                            // 178\n   *                                                                                                                   // 179\n   * @param boolean state Enable or disable header checking.                                                           // 180\n   */                                                                                                                  // 181\n  this.setDisableHeaderCheck = function(state) {                                                                       // 182\n    disableHeaderCheck = state;                                                                                        // 183\n  };                                                                                                                   // 184\n                                                                                                                       // 185\n  /**                                                                                                                  // 186\n   * Sets a header for the request or appends the value if one is already set.                                         // 187\n   *                                                                                                                   // 188\n   * @param string header Header name                                                                                  // 189\n   * @param string value Header value                                                                                  // 190\n   */                                                                                                                  // 191\n  this.setRequestHeader = function(header, value) {                                                                    // 192\n    if (this.readyState !== this.OPENED) {                                                                             // 193\n      throw new Error(\"INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN\");                    // 194\n    }                                                                                                                  // 195\n    if (!isAllowedHttpHeader(header)) {                                                                                // 196\n      console.warn(\"Refused to set unsafe header \\\"\" + header + \"\\\"\");                                                 // 197\n      return;                                                                                                          // 198\n    }                                                                                                                  // 199\n    if (sendFlag) {                                                                                                    // 200\n      throw new Error(\"INVALID_STATE_ERR: send flag is true\");                                                         // 201\n    }                                                                                                                  // 202\n    header = headersCase[header.toLowerCase()] || header;                                                              // 203\n    headersCase[header.toLowerCase()] = header;                                                                        // 204\n    headers[header] = headers[header] ? headers[header] + ', ' + value : value;                                        // 205\n  };                                                                                                                   // 206\n                                                                                                                       // 207\n  /**                                                                                                                  // 208\n   * Gets a header from the server response.                                                                           // 209\n   *                                                                                                                   // 210\n   * @param string header Name of header to get.                                                                       // 211\n   * @return string Text of the header or null if it doesn't exist.                                                    // 212\n   */                                                                                                                  // 213\n  this.getResponseHeader = function(header) {                                                                          // 214\n    if (typeof header === \"string\"                                                                                     // 215\n      && this.readyState > this.OPENED                                                                                 // 216\n      && response                                                                                                      // 217\n      && response.headers                                                                                              // 218\n      && response.headers[header.toLowerCase()]                                                                        // 219\n      && !errorFlag                                                                                                    // 220\n    ) {                                                                                                                // 221\n      return response.headers[header.toLowerCase()];                                                                   // 222\n    }                                                                                                                  // 223\n                                                                                                                       // 224\n    return null;                                                                                                       // 225\n  };                                                                                                                   // 226\n                                                                                                                       // 227\n  /**                                                                                                                  // 228\n   * Gets all the response headers.                                                                                    // 229\n   *                                                                                                                   // 230\n   * @return string A string with all response headers separated by CR+LF                                              // 231\n   */                                                                                                                  // 232\n  this.getAllResponseHeaders = function() {                                                                            // 233\n    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {                                                        // 234\n      return \"\";                                                                                                       // 235\n    }                                                                                                                  // 236\n    var result = \"\";                                                                                                   // 237\n                                                                                                                       // 238\n    for (var i in response.headers) {                                                                                  // 239\n      // Cookie headers are excluded                                                                                   // 240\n      if (i !== \"set-cookie\" && i !== \"set-cookie2\") {                                                                 // 241\n        result += i + \": \" + response.headers[i] + \"\\r\\n\";                                                             // 242\n      }                                                                                                                // 243\n    }                                                                                                                  // 244\n    return result.substr(0, result.length - 2);                                                                        // 245\n  };                                                                                                                   // 246\n                                                                                                                       // 247\n  /**                                                                                                                  // 248\n   * Gets a request header                                                                                             // 249\n   *                                                                                                                   // 250\n   * @param string name Name of header to get                                                                          // 251\n   * @return string Returns the request header or empty string if not set                                              // 252\n   */                                                                                                                  // 253\n  this.getRequestHeader = function(name) {                                                                             // 254\n    if (typeof name === \"string\" && headersCase[name.toLowerCase()]) {                                                 // 255\n      return headers[headersCase[name.toLowerCase()]];                                                                 // 256\n    }                                                                                                                  // 257\n                                                                                                                       // 258\n    return \"\";                                                                                                         // 259\n  };                                                                                                                   // 260\n                                                                                                                       // 261\n  /**                                                                                                                  // 262\n   * Sends the request to the server.                                                                                  // 263\n   *                                                                                                                   // 264\n   * @param string data Optional data to send as request body.                                                         // 265\n   */                                                                                                                  // 266\n  this.send = function(data) {                                                                                         // 267\n    if (this.readyState !== this.OPENED) {                                                                             // 268\n      throw new Error(\"INVALID_STATE_ERR: connection must be opened before send() is called\");                         // 269\n    }                                                                                                                  // 270\n                                                                                                                       // 271\n    if (sendFlag) {                                                                                                    // 272\n      throw new Error(\"INVALID_STATE_ERR: send has already been called\");                                              // 273\n    }                                                                                                                  // 274\n                                                                                                                       // 275\n    var ssl = false, local = false;                                                                                    // 276\n    var url = Url.parse(settings.url);                                                                                 // 277\n    var host;                                                                                                          // 278\n    // Determine the server                                                                                            // 279\n    switch (url.protocol) {                                                                                            // 280\n      case \"https:\":                                                                                                   // 281\n        ssl = true;                                                                                                    // 282\n        // SSL & non-SSL both need host, no break here.                                                                // 283\n      case \"http:\":                                                                                                    // 284\n        host = url.hostname;                                                                                           // 285\n        break;                                                                                                         // 286\n                                                                                                                       // 287\n      case \"file:\":                                                                                                    // 288\n        local = true;                                                                                                  // 289\n        break;                                                                                                         // 290\n                                                                                                                       // 291\n      case undefined:                                                                                                  // 292\n      case null:                                                                                                       // 293\n      case \"\":                                                                                                         // 294\n        host = \"localhost\";                                                                                            // 295\n        break;                                                                                                         // 296\n                                                                                                                       // 297\n      default:                                                                                                         // 298\n        throw new Error(\"Protocol not supported.\");                                                                    // 299\n    }                                                                                                                  // 300\n                                                                                                                       // 301\n    // Load files off the local filesystem (file://)                                                                   // 302\n    if (local) {                                                                                                       // 303\n      if (settings.method !== \"GET\") {                                                                                 // 304\n        throw new Error(\"XMLHttpRequest: Only GET method is supported\");                                               // 305\n      }                                                                                                                // 306\n                                                                                                                       // 307\n      if (settings.async) {                                                                                            // 308\n        fs.readFile(url.pathname, \"utf8\", function(error, data) {                                                      // 309\n          if (error) {                                                                                                 // 310\n            self.handleError(error);                                                                                   // 311\n          } else {                                                                                                     // 312\n            self.status = 200;                                                                                         // 313\n            self.responseText = data;                                                                                  // 314\n            setState(self.DONE);                                                                                       // 315\n          }                                                                                                            // 316\n        });                                                                                                            // 317\n      } else {                                                                                                         // 318\n        try {                                                                                                          // 319\n          this.responseText = fs.readFileSync(url.pathname, \"utf8\");                                                   // 320\n          this.status = 200;                                                                                           // 321\n          setState(self.DONE);                                                                                         // 322\n        } catch(e) {                                                                                                   // 323\n          this.handleError(e);                                                                                         // 324\n        }                                                                                                              // 325\n      }                                                                                                                // 326\n                                                                                                                       // 327\n      return;                                                                                                          // 328\n    }                                                                                                                  // 329\n                                                                                                                       // 330\n    // Default to port 80. If accessing localhost on another port be sure                                              // 331\n    // to use http://localhost:port/path                                                                               // 332\n    var port = url.port || (ssl ? 443 : 80);                                                                           // 333\n    // Add query string if one is used                                                                                 // 334\n    var uri = url.pathname + (url.search ? url.search : \"\");                                                           // 335\n                                                                                                                       // 336\n    // Set the defaults if they haven't been set                                                                       // 337\n    for (var name in defaultHeaders) {                                                                                 // 338\n      if (!headersCase[name.toLowerCase()]) {                                                                          // 339\n        headers[name] = defaultHeaders[name];                                                                          // 340\n      }                                                                                                                // 341\n    }                                                                                                                  // 342\n                                                                                                                       // 343\n    // Set the Host header or the server may reject the request                                                        // 344\n    headers.Host = host;                                                                                               // 345\n    if (!((ssl && port === 443) || port === 80)) {                                                                     // 346\n      headers.Host += \":\" + url.port;                                                                                  // 347\n    }                                                                                                                  // 348\n                                                                                                                       // 349\n    // Set Basic Auth if necessary                                                                                     // 350\n    if (settings.user) {                                                                                               // 351\n      if (typeof settings.password === \"undefined\") {                                                                  // 352\n        settings.password = \"\";                                                                                        // 353\n      }                                                                                                                // 354\n      var authBuf = new Buffer(settings.user + \":\" + settings.password);                                               // 355\n      headers.Authorization = \"Basic \" + authBuf.toString(\"base64\");                                                   // 356\n    }                                                                                                                  // 357\n                                                                                                                       // 358\n    // Set content length header                                                                                       // 359\n    if (settings.method === \"GET\" || settings.method === \"HEAD\") {                                                     // 360\n      data = null;                                                                                                     // 361\n    } else if (data) {                                                                                                 // 362\n      headers[\"Content-Length\"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);                       // 363\n                                                                                                                       // 364\n      if (!headers[\"Content-Type\"]) {                                                                                  // 365\n        headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";                                                          // 366\n      }                                                                                                                // 367\n    } else if (settings.method === \"POST\") {                                                                           // 368\n      // For a post with no data set Content-Length: 0.                                                                // 369\n      // This is required by buggy servers that don't meet the specs.                                                  // 370\n      headers[\"Content-Length\"] = 0;                                                                                   // 371\n    }                                                                                                                  // 372\n                                                                                                                       // 373\n    var options = {                                                                                                    // 374\n      host: host,                                                                                                      // 375\n      port: port,                                                                                                      // 376\n      path: uri,                                                                                                       // 377\n      method: settings.method,                                                                                         // 378\n      headers: headers,                                                                                                // 379\n      agent: false,                                                                                                    // 380\n      withCredentials: self.withCredentials                                                                            // 381\n    };                                                                                                                 // 382\n                                                                                                                       // 383\n    // Reset error flag                                                                                                // 384\n    errorFlag = false;                                                                                                 // 385\n                                                                                                                       // 386\n    // Handle async requests                                                                                           // 387\n    if (settings.async) {                                                                                              // 388\n      // Use the proper protocol                                                                                       // 389\n      var doRequest = ssl ? https.request : http.request;                                                              // 390\n                                                                                                                       // 391\n      // Request is being sent, set send flag                                                                          // 392\n      sendFlag = true;                                                                                                 // 393\n                                                                                                                       // 394\n      // As per spec, this is called here for historical reasons.                                                      // 395\n      self.dispatchEvent(\"readystatechange\");                                                                          // 396\n                                                                                                                       // 397\n      // Handler for the response                                                                                      // 398\n      var responseHandler = function responseHandler(resp) {                                                           // 399\n        // Set response var to the response we got back                                                                // 400\n        // This is so it remains accessable outside this scope                                                         // 401\n        response = resp;                                                                                               // 402\n        // Check for redirect                                                                                          // 403\n        // @TODO Prevent looped redirects                                                                              // 404\n        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {\n          // Change URL to the redirect location                                                                       // 406\n          settings.url = response.headers.location;                                                                    // 407\n          var url = Url.parse(settings.url);                                                                           // 408\n          // Set host var in case it's used later                                                                      // 409\n          host = url.hostname;                                                                                         // 410\n          // Options for the new request                                                                               // 411\n          var newOptions = {                                                                                           // 412\n            hostname: url.hostname,                                                                                    // 413\n            port: url.port,                                                                                            // 414\n            path: url.path,                                                                                            // 415\n            method: response.statusCode === 303 ? \"GET\" : settings.method,                                             // 416\n            headers: headers,                                                                                          // 417\n            withCredentials: self.withCredentials                                                                      // 418\n          };                                                                                                           // 419\n                                                                                                                       // 420\n          // Issue the new request                                                                                     // 421\n          request = doRequest(newOptions, responseHandler).on(\"error\", errorHandler);                                  // 422\n          request.end();                                                                                               // 423\n          // @TODO Check if an XHR event needs to be fired here                                                        // 424\n          return;                                                                                                      // 425\n        }                                                                                                              // 426\n                                                                                                                       // 427\n        response.setEncoding(\"utf8\");                                                                                  // 428\n                                                                                                                       // 429\n        setState(self.HEADERS_RECEIVED);                                                                               // 430\n        self.status = response.statusCode;                                                                             // 431\n                                                                                                                       // 432\n        response.on(\"data\", function(chunk) {                                                                          // 433\n          // Make sure there's some data                                                                               // 434\n          if (chunk) {                                                                                                 // 435\n            self.responseText += chunk;                                                                                // 436\n          }                                                                                                            // 437\n          // Don't emit state changes if the connection has been aborted.                                              // 438\n          if (sendFlag) {                                                                                              // 439\n            setState(self.LOADING);                                                                                    // 440\n          }                                                                                                            // 441\n        });                                                                                                            // 442\n                                                                                                                       // 443\n        response.on(\"end\", function() {                                                                                // 444\n          if (sendFlag) {                                                                                              // 445\n            // Discard the end event if the connection has been aborted                                                // 446\n            setState(self.DONE);                                                                                       // 447\n            sendFlag = false;                                                                                          // 448\n          }                                                                                                            // 449\n        });                                                                                                            // 450\n                                                                                                                       // 451\n        response.on(\"error\", function(error) {                                                                         // 452\n          self.handleError(error);                                                                                     // 453\n        });                                                                                                            // 454\n      };                                                                                                               // 455\n                                                                                                                       // 456\n      // Error handler for the request                                                                                 // 457\n      var errorHandler = function errorHandler(error) {                                                                // 458\n        self.handleError(error);                                                                                       // 459\n      };                                                                                                               // 460\n                                                                                                                       // 461\n      // Create the request                                                                                            // 462\n      request = doRequest(options, responseHandler).on(\"error\", errorHandler);                                         // 463\n                                                                                                                       // 464\n      // Node 0.4 and later won't accept empty data. Make sure it's needed.                                            // 465\n      if (data) {                                                                                                      // 466\n        request.write(data);                                                                                           // 467\n      }                                                                                                                // 468\n                                                                                                                       // 469\n      request.end();                                                                                                   // 470\n                                                                                                                       // 471\n      self.dispatchEvent(\"loadstart\");                                                                                 // 472\n    } else { // Synchronous                                                                                            // 473\n      // Create a temporary file for communication with the other Node process                                         // 474\n      var contentFile = \".node-xmlhttprequest-content-\" + process.pid;                                                 // 475\n      var syncFile = \".node-xmlhttprequest-sync-\" + process.pid;                                                       // 476\n      fs.writeFileSync(syncFile, \"\", \"utf8\");                                                                          // 477\n      // The async request the other Node process executes                                                             // 478\n      var execString = \"var http = require('http'), https = require('https'), fs = require('fs');\"                     // 479\n        + \"var doRequest = http\" + (ssl ? \"s\" : \"\") + \".request;\"                                                      // 480\n        + \"var options = \" + JSON.stringify(options) + \";\"                                                             // 481\n        + \"var responseText = '';\"                                                                                     // 482\n        + \"var req = doRequest(options, function(response) {\"                                                          // 483\n        + \"response.setEncoding('utf8');\"                                                                              // 484\n        + \"response.on('data', function(chunk) {\"                                                                      // 485\n        + \"  responseText += chunk;\"                                                                                   // 486\n        + \"});\"                                                                                                        // 487\n        + \"response.on('end', function() {\"                                                                            // 488\n        + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');\"\n        + \"fs.unlinkSync('\" + syncFile + \"');\"                                                                         // 490\n        + \"});\"                                                                                                        // 491\n        + \"response.on('error', function(error) {\"                                                                     // 492\n        + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\"                             // 493\n        + \"fs.unlinkSync('\" + syncFile + \"');\"                                                                         // 494\n        + \"});\"                                                                                                        // 495\n        + \"}).on('error', function(error) {\"                                                                           // 496\n        + \"fs.writeFileSync('\" + contentFile + \"', JSON.stringify({err: error}), 'utf8');\"                             // 497\n        + \"fs.unlinkSync('\" + syncFile + \"');\"                                                                         // 498\n        + \"});\"                                                                                                        // 499\n        + (data ? \"req.write('\" + JSON.stringify(data).slice(1,-1).replace(/'/g, \"\\\\'\") + \"');\":\"\")                    // 500\n        + \"req.end();\";                                                                                                // 501\n      // Start the other Node Process, executing this string                                                           // 502\n      var syncProc = spawn(process.argv[0], [\"-e\", execString]);                                                       // 503\n      while(fs.existsSync(syncFile)) {                                                                                 // 504\n        // Wait while the sync file is empty                                                                           // 505\n      }                                                                                                                // 506\n      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));                                                     // 507\n      // Kill the child process once the file has data                                                                 // 508\n      syncProc.stdin.end();                                                                                            // 509\n      // Remove the temporary file                                                                                     // 510\n      fs.unlinkSync(contentFile);                                                                                      // 511\n                                                                                                                       // 512\n      if (resp.err) {                                                                                                  // 513\n        self.handleError(resp.err);                                                                                    // 514\n      } else {                                                                                                         // 515\n        response = resp.data;                                                                                          // 516\n        self.status = resp.data.statusCode;                                                                            // 517\n        self.responseText = resp.data.text;                                                                            // 518\n        setState(self.DONE);                                                                                           // 519\n      }                                                                                                                // 520\n    }                                                                                                                  // 521\n  };                                                                                                                   // 522\n                                                                                                                       // 523\n  /**                                                                                                                  // 524\n   * Called when an error is encountered to deal with it.                                                              // 525\n   */                                                                                                                  // 526\n  this.handleError = function(error) {                                                                                 // 527\n    this.status = 0;                                                                                                   // 528\n    this.statusText = error;                                                                                           // 529\n    this.responseText = error.stack;                                                                                   // 530\n    errorFlag = true;                                                                                                  // 531\n    setState(this.DONE);                                                                                               // 532\n    this.dispatchEvent('error');                                                                                       // 533\n  };                                                                                                                   // 534\n                                                                                                                       // 535\n  /**                                                                                                                  // 536\n   * Aborts a request.                                                                                                 // 537\n   */                                                                                                                  // 538\n  this.abort = function() {                                                                                            // 539\n    if (request) {                                                                                                     // 540\n      request.abort();                                                                                                 // 541\n      request = null;                                                                                                  // 542\n    }                                                                                                                  // 543\n                                                                                                                       // 544\n    headers = defaultHeaders;                                                                                          // 545\n    this.status = 0;                                                                                                   // 546\n    this.responseText = \"\";                                                                                            // 547\n    this.responseXML = \"\";                                                                                             // 548\n                                                                                                                       // 549\n    errorFlag = true;                                                                                                  // 550\n                                                                                                                       // 551\n    if (this.readyState !== this.UNSENT                                                                                // 552\n        && (this.readyState !== this.OPENED || sendFlag)                                                               // 553\n        && this.readyState !== this.DONE) {                                                                            // 554\n      sendFlag = false;                                                                                                // 555\n      setState(this.DONE);                                                                                             // 556\n    }                                                                                                                  // 557\n    this.readyState = this.UNSENT;                                                                                     // 558\n    this.dispatchEvent('abort');                                                                                       // 559\n  };                                                                                                                   // 560\n                                                                                                                       // 561\n  /**                                                                                                                  // 562\n   * Adds an event listener. Preferred method of binding to events.                                                    // 563\n   */                                                                                                                  // 564\n  this.addEventListener = function(event, callback) {                                                                  // 565\n    if (!(event in listeners)) {                                                                                       // 566\n      listeners[event] = [];                                                                                           // 567\n    }                                                                                                                  // 568\n    // Currently allows duplicate callbacks. Should it?                                                                // 569\n    listeners[event].push(callback);                                                                                   // 570\n  };                                                                                                                   // 571\n                                                                                                                       // 572\n  /**                                                                                                                  // 573\n   * Remove an event callback that has already been bound.                                                             // 574\n   * Only works on the matching funciton, cannot be a copy.                                                            // 575\n   */                                                                                                                  // 576\n  this.removeEventListener = function(event, callback) {                                                               // 577\n    if (event in listeners) {                                                                                          // 578\n      // Filter will return a new array with the callback removed                                                      // 579\n      listeners[event] = listeners[event].filter(function(ev) {                                                        // 580\n        return ev !== callback;                                                                                        // 581\n      });                                                                                                              // 582\n    }                                                                                                                  // 583\n  };                                                                                                                   // 584\n                                                                                                                       // 585\n  /**                                                                                                                  // 586\n   * Dispatch any events, including both \"on\" methods and events attached using addEventListener.                      // 587\n   */                                                                                                                  // 588\n  this.dispatchEvent = function(event) {                                                                               // 589\n    if (typeof self[\"on\" + event] === \"function\") {                                                                    // 590\n      self[\"on\" + event]();                                                                                            // 591\n    }                                                                                                                  // 592\n    if (event in listeners) {                                                                                          // 593\n      for (var i = 0, len = listeners[event].length; i < len; i++) {                                                   // 594\n        listeners[event][i].call(self);                                                                                // 595\n      }                                                                                                                // 596\n    }                                                                                                                  // 597\n  };                                                                                                                   // 598\n                                                                                                                       // 599\n  /**                                                                                                                  // 600\n   * Changes readyState and calls onreadystatechange.                                                                  // 601\n   *                                                                                                                   // 602\n   * @param int state New state                                                                                        // 603\n   */                                                                                                                  // 604\n  var setState = function(state) {                                                                                     // 605\n    if (state == self.LOADING || self.readyState !== state) {                                                          // 606\n      self.readyState = state;                                                                                         // 607\n                                                                                                                       // 608\n      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {                          // 609\n        self.dispatchEvent(\"readystatechange\");                                                                        // 610\n      }                                                                                                                // 611\n                                                                                                                       // 612\n      if (self.readyState === self.DONE && !errorFlag) {                                                               // 613\n        self.dispatchEvent(\"load\");                                                                                    // 614\n        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)                                               // 615\n        self.dispatchEvent(\"loadend\");                                                                                 // 616\n      }                                                                                                                // 617\n    }                                                                                                                  // 618\n  };                                                                                                                   // 619\n};                                                                                                                     // 620\n                                                                                                                       // 621\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"babel-runtime\":{\"regenerator\":{\"index.js\":[\"regenerator-runtime\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/regenerator/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require(\"regenerator-runtime\");                                                                       // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"helpers\":{\"typeof.js\":[\"../core-js/symbol/iterator\",\"../core-js/symbol\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/helpers/typeof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\"use strict\";                                                                                                          // 1\n                                                                                                                       // 2\nexports.__esModule = true;                                                                                             // 3\n                                                                                                                       // 4\nvar _iterator = require(\"../core-js/symbol/iterator\");                                                                 // 5\n                                                                                                                       // 6\nvar _iterator2 = _interopRequireDefault(_iterator);                                                                    // 7\n                                                                                                                       // 8\nvar _symbol = require(\"../core-js/symbol\");                                                                            // 9\n                                                                                                                       // 10\nvar _symbol2 = _interopRequireDefault(_symbol);                                                                        // 11\n                                                                                                                       // 12\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n                                                                                                                       // 14\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }                        // 15\n                                                                                                                       // 16\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);                                                      // 18\n} : function (obj) {                                                                                                   // 19\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"core-js\":{\"symbol\":{\"iterator.js\":[\"core-js/library/fn/symbol/iterator\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol/iterator.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"symbol.js\":[\"core-js/library/fn/symbol\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/babel-runtime/core-js/symbol.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"regenerator-runtime\":{\"package.json\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/package.json                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.name = \"regenerator-runtime\";                                                                                  // 1\nexports.version = \"0.10.1\";                                                                                            // 2\nexports.main = \"runtime-module.js\";                                                                                    // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"runtime-module.js\":[\"./runtime\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/runtime-module.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This method of obtaining a reference to the global object needs to be                                               // 1\n// kept identical to the way it is obtained in runtime.js                                                              // 2\nvar g =                                                                                                                // 3\n  typeof global === \"object\" ? global :                                                                                // 4\n  typeof window === \"object\" ? window :                                                                                // 5\n  typeof self === \"object\" ? self : this;                                                                              // 6\n                                                                                                                       // 7\n// Use `getOwnPropertyNames` because not all browsers support calling                                                  // 8\n// `hasOwnProperty` on the global `self` object in a worker. See #183.                                                 // 9\nvar hadRuntime = g.regeneratorRuntime &&                                                                               // 10\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;                                                    // 11\n                                                                                                                       // 12\n// Save the old regeneratorRuntime in case it needs to be restored later.                                              // 13\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;                                                                   // 14\n                                                                                                                       // 15\n// Force reevalutation of runtime.js.                                                                                  // 16\ng.regeneratorRuntime = undefined;                                                                                      // 17\n                                                                                                                       // 18\nmodule.exports = require(\"./runtime\");                                                                                 // 19\n                                                                                                                       // 20\nif (hadRuntime) {                                                                                                      // 21\n  // Restore the original runtime.                                                                                     // 22\n  g.regeneratorRuntime = oldRuntime;                                                                                   // 23\n} else {                                                                                                               // 24\n  // Remove the global property added by runtime.js.                                                                   // 25\n  try {                                                                                                                // 26\n    delete g.regeneratorRuntime;                                                                                       // 27\n  } catch(e) {                                                                                                         // 28\n    g.regeneratorRuntime = undefined;                                                                                  // 29\n  }                                                                                                                    // 30\n}                                                                                                                      // 31\n                                                                                                                       // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"runtime.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/regenerator-runtime/runtime.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Copyright (c) 2014, Facebook, Inc.                                                                                  // 2\n * All rights reserved.                                                                                                // 3\n *                                                                                                                     // 4\n * This source code is licensed under the BSD-style license found in the                                               // 5\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An                                                 // 6\n * additional grant of patent rights can be found in the PATENTS file in                                               // 7\n * the same directory.                                                                                                 // 8\n */                                                                                                                    // 9\n                                                                                                                       // 10\n!(function(global) {                                                                                                   // 11\n  \"use strict\";                                                                                                        // 12\n                                                                                                                       // 13\n  var Op = Object.prototype;                                                                                           // 14\n  var hasOwn = Op.hasOwnProperty;                                                                                      // 15\n  var undefined; // More compressible than void 0.                                                                     // 16\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};                                                            // 17\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";                                                               // 18\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";                                                      // 19\n                                                                                                                       // 20\n  var inModule = typeof module === \"object\";                                                                           // 21\n  var runtime = global.regeneratorRuntime;                                                                             // 22\n  if (runtime) {                                                                                                       // 23\n    if (inModule) {                                                                                                    // 24\n      // If regeneratorRuntime is defined globally and we're in a module,                                              // 25\n      // make the exports object identical to regeneratorRuntime.                                                      // 26\n      module.exports = runtime;                                                                                        // 27\n    }                                                                                                                  // 28\n    // Don't bother evaluating the rest of this file if the runtime was                                                // 29\n    // already defined globally.                                                                                       // 30\n    return;                                                                                                            // 31\n  }                                                                                                                    // 32\n                                                                                                                       // 33\n  // Define the runtime globally (as expected by generated code) as either                                             // 34\n  // module.exports (if we're in a module) or a new, empty object.                                                     // 35\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};                                                // 36\n                                                                                                                       // 37\n  function wrap(innerFn, outerFn, self, tryLocsList) {                                                                 // 38\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.          // 39\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;                      // 40\n    var generator = Object.create(protoGenerator.prototype);                                                           // 41\n    var context = new Context(tryLocsList || []);                                                                      // 42\n                                                                                                                       // 43\n    // The ._invoke method unifies the implementations of the .next,                                                   // 44\n    // .throw, and .return methods.                                                                                    // 45\n    generator._invoke = makeInvokeMethod(innerFn, self, context);                                                      // 46\n                                                                                                                       // 47\n    return generator;                                                                                                  // 48\n  }                                                                                                                    // 49\n  runtime.wrap = wrap;                                                                                                 // 50\n                                                                                                                       // 51\n  // Try/catch helper to minimize deoptimizations. Returns a completion                                                // 52\n  // record like context.tryEntries[i].completion. This interface could                                                // 53\n  // have been (and was previously) designed to take a closure to be                                                   // 54\n  // invoked without arguments, but in all the cases we care about we                                                  // 55\n  // already have an existing method we want to call, so there's no need                                               // 56\n  // to create a new function object. We can even get away with assuming                                               // 57\n  // the method takes exactly one argument, since that happens to be true                                              // 58\n  // in every case, so we don't have to touch the arguments object. The                                                // 59\n  // only additional allocation required is the completion record, which                                               // 60\n  // has a stable shape and so hopefully should be cheap to allocate.                                                  // 61\n  function tryCatch(fn, obj, arg) {                                                                                    // 62\n    try {                                                                                                              // 63\n      return { type: \"normal\", arg: fn.call(obj, arg) };                                                               // 64\n    } catch (err) {                                                                                                    // 65\n      return { type: \"throw\", arg: err };                                                                              // 66\n    }                                                                                                                  // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  var GenStateSuspendedStart = \"suspendedStart\";                                                                       // 70\n  var GenStateSuspendedYield = \"suspendedYield\";                                                                       // 71\n  var GenStateExecuting = \"executing\";                                                                                 // 72\n  var GenStateCompleted = \"completed\";                                                                                 // 73\n                                                                                                                       // 74\n  // Returning this object from the innerFn has the same effect as                                                     // 75\n  // breaking out of the dispatch switch statement.                                                                    // 76\n  var ContinueSentinel = {};                                                                                           // 77\n                                                                                                                       // 78\n  // Dummy constructor functions that we use as the .constructor and                                                   // 79\n  // .constructor.prototype properties for functions that return Generator                                             // 80\n  // objects. For full spec compliance, you may wish to configure your                                                 // 81\n  // minifier not to mangle the names of these two functions.                                                          // 82\n  function Generator() {}                                                                                              // 83\n  function GeneratorFunction() {}                                                                                      // 84\n  function GeneratorFunctionPrototype() {}                                                                             // 85\n                                                                                                                       // 86\n  // This is a polyfill for %IteratorPrototype% for environments that                                                  // 87\n  // don't natively support it.                                                                                        // 88\n  var IteratorPrototype = {};                                                                                          // 89\n  IteratorPrototype[iteratorSymbol] = function () {                                                                    // 90\n    return this;                                                                                                       // 91\n  };                                                                                                                   // 92\n                                                                                                                       // 93\n  var getProto = Object.getPrototypeOf;                                                                                // 94\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));                                            // 95\n  if (NativeIteratorPrototype &&                                                                                       // 96\n      NativeIteratorPrototype !== Op &&                                                                                // 97\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {                                                          // 98\n    // This environment has a native %IteratorPrototype%; use it instead                                               // 99\n    // of the polyfill.                                                                                                // 100\n    IteratorPrototype = NativeIteratorPrototype;                                                                       // 101\n  }                                                                                                                    // 102\n                                                                                                                       // 103\n  var Gp = GeneratorFunctionPrototype.prototype =                                                                      // 104\n    Generator.prototype = Object.create(IteratorPrototype);                                                            // 105\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;                                           // 106\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;                                                          // 107\n  GeneratorFunctionPrototype[toStringTagSymbol] =                                                                      // 108\n    GeneratorFunction.displayName = \"GeneratorFunction\";                                                               // 109\n                                                                                                                       // 110\n  // Helper for defining the .next, .throw, and .return methods of the                                                 // 111\n  // Iterator interface in terms of a single ._invoke method.                                                          // 112\n  function defineIteratorMethods(prototype) {                                                                          // 113\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {                                                             // 114\n      prototype[method] = function(arg) {                                                                              // 115\n        return this._invoke(method, arg);                                                                              // 116\n      };                                                                                                               // 117\n    });                                                                                                                // 118\n  }                                                                                                                    // 119\n                                                                                                                       // 120\n  runtime.isGeneratorFunction = function(genFun) {                                                                     // 121\n    var ctor = typeof genFun === \"function\" && genFun.constructor;                                                     // 122\n    return ctor                                                                                                        // 123\n      ? ctor === GeneratorFunction ||                                                                                  // 124\n        // For the native GeneratorFunction constructor, the best we can                                               // 125\n        // do is to check its .name property.                                                                          // 126\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"                                                        // 127\n      : false;                                                                                                         // 128\n  };                                                                                                                   // 129\n                                                                                                                       // 130\n  runtime.mark = function(genFun) {                                                                                    // 131\n    if (Object.setPrototypeOf) {                                                                                       // 132\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);                                                       // 133\n    } else {                                                                                                           // 134\n      genFun.__proto__ = GeneratorFunctionPrototype;                                                                   // 135\n      if (!(toStringTagSymbol in genFun)) {                                                                            // 136\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";                                                               // 137\n      }                                                                                                                // 138\n    }                                                                                                                  // 139\n    genFun.prototype = Object.create(Gp);                                                                              // 140\n    return genFun;                                                                                                     // 141\n  };                                                                                                                   // 142\n                                                                                                                       // 143\n  // Within the body of any async function, `await x` is transformed to                                                // 144\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test                                                 // 145\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is                                              // 146\n  // meant to be awaited.                                                                                              // 147\n  runtime.awrap = function(arg) {                                                                                      // 148\n    return { __await: arg };                                                                                           // 149\n  };                                                                                                                   // 150\n                                                                                                                       // 151\n  function AsyncIterator(generator) {                                                                                  // 152\n    function invoke(method, arg, resolve, reject) {                                                                    // 153\n      var record = tryCatch(generator[method], generator, arg);                                                        // 154\n      if (record.type === \"throw\") {                                                                                   // 155\n        reject(record.arg);                                                                                            // 156\n      } else {                                                                                                         // 157\n        var result = record.arg;                                                                                       // 158\n        var value = result.value;                                                                                      // 159\n        if (value &&                                                                                                   // 160\n            typeof value === \"object\" &&                                                                               // 161\n            hasOwn.call(value, \"__await\")) {                                                                           // 162\n          return Promise.resolve(value.__await).then(function(value) {                                                 // 163\n            invoke(\"next\", value, resolve, reject);                                                                    // 164\n          }, function(err) {                                                                                           // 165\n            invoke(\"throw\", err, resolve, reject);                                                                     // 166\n          });                                                                                                          // 167\n        }                                                                                                              // 168\n                                                                                                                       // 169\n        return Promise.resolve(value).then(function(unwrapped) {                                                       // 170\n          // When a yielded Promise is resolved, its final value becomes                                               // 171\n          // the .value of the Promise<{value,done}> result for the                                                    // 172\n          // current iteration. If the Promise is rejected, however, the                                               // 173\n          // result for this iteration will be rejected with the same                                                  // 174\n          // reason. Note that rejections of yielded Promises are not                                                  // 175\n          // thrown back into the generator function, as is the case                                                   // 176\n          // when an awaited Promise is rejected. This difference in                                                   // 177\n          // behavior between yield and await is important, because it                                                 // 178\n          // allows the consumer to decide what to do with the yielded                                                 // 179\n          // rejection (swallow it and continue, manually .throw it back                                               // 180\n          // into the generator, abandon iteration, whatever). With                                                    // 181\n          // await, by contrast, there is no opportunity to examine the                                                // 182\n          // rejection reason outside the generator function, so the                                                   // 183\n          // only option is to throw it from the await expression, and                                                 // 184\n          // let the generator function handle the exception.                                                          // 185\n          result.value = unwrapped;                                                                                    // 186\n          resolve(result);                                                                                             // 187\n        }, reject);                                                                                                    // 188\n      }                                                                                                                // 189\n    }                                                                                                                  // 190\n                                                                                                                       // 191\n    if (typeof process === \"object\" && process.domain) {                                                               // 192\n      invoke = process.domain.bind(invoke);                                                                            // 193\n    }                                                                                                                  // 194\n                                                                                                                       // 195\n    var previousPromise;                                                                                               // 196\n                                                                                                                       // 197\n    function enqueue(method, arg) {                                                                                    // 198\n      function callInvokeWithMethodAndArg() {                                                                          // 199\n        return new Promise(function(resolve, reject) {                                                                 // 200\n          invoke(method, arg, resolve, reject);                                                                        // 201\n        });                                                                                                            // 202\n      }                                                                                                                // 203\n                                                                                                                       // 204\n      return previousPromise =                                                                                         // 205\n        // If enqueue has been called before, then we want to wait until                                               // 206\n        // all previous Promises have been resolved before calling invoke,                                             // 207\n        // so that results are always delivered in the correct order. If                                               // 208\n        // enqueue has not been called before, then it is important to                                                 // 209\n        // call invoke immediately, without waiting on a callback to fire,                                             // 210\n        // so that the async generator function has the opportunity to do                                              // 211\n        // any necessary setup in a predictable way. This predictability                                               // 212\n        // is why the Promise constructor synchronously invokes its                                                    // 213\n        // executor callback, and why async functions synchronously                                                    // 214\n        // execute code before the first await. Since we implement simple                                              // 215\n        // async functions in terms of async generators, it is especially                                              // 216\n        // important to get this right, even though it requires care.                                                  // 217\n        previousPromise ? previousPromise.then(                                                                        // 218\n          callInvokeWithMethodAndArg,                                                                                  // 219\n          // Avoid propagating failures to Promises returned by later                                                  // 220\n          // invocations of the iterator.                                                                              // 221\n          callInvokeWithMethodAndArg                                                                                   // 222\n        ) : callInvokeWithMethodAndArg();                                                                              // 223\n    }                                                                                                                  // 224\n                                                                                                                       // 225\n    // Define the unified helper method that is used to implement .next,                                               // 226\n    // .throw, and .return (see defineIteratorMethods).                                                                // 227\n    this._invoke = enqueue;                                                                                            // 228\n  }                                                                                                                    // 229\n                                                                                                                       // 230\n  defineIteratorMethods(AsyncIterator.prototype);                                                                      // 231\n  runtime.AsyncIterator = AsyncIterator;                                                                               // 232\n                                                                                                                       // 233\n  // Note that simple async functions are implemented on top of                                                        // 234\n  // AsyncIterator objects; they just return a Promise for the value of                                                // 235\n  // the final result produced by the iterator.                                                                        // 236\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {                                                      // 237\n    var iter = new AsyncIterator(                                                                                      // 238\n      wrap(innerFn, outerFn, self, tryLocsList)                                                                        // 239\n    );                                                                                                                 // 240\n                                                                                                                       // 241\n    return runtime.isGeneratorFunction(outerFn)                                                                        // 242\n      ? iter // If outerFn is a generator, return the full iterator.                                                   // 243\n      : iter.next().then(function(result) {                                                                            // 244\n          return result.done ? result.value : iter.next();                                                             // 245\n        });                                                                                                            // 246\n  };                                                                                                                   // 247\n                                                                                                                       // 248\n  function makeInvokeMethod(innerFn, self, context) {                                                                  // 249\n    var state = GenStateSuspendedStart;                                                                                // 250\n                                                                                                                       // 251\n    return function invoke(method, arg) {                                                                              // 252\n      if (state === GenStateExecuting) {                                                                               // 253\n        throw new Error(\"Generator is already running\");                                                               // 254\n      }                                                                                                                // 255\n                                                                                                                       // 256\n      if (state === GenStateCompleted) {                                                                               // 257\n        if (method === \"throw\") {                                                                                      // 258\n          throw arg;                                                                                                   // 259\n        }                                                                                                              // 260\n                                                                                                                       // 261\n        // Be forgiving, per 25.3.3.3.3 of the spec:                                                                   // 262\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume                                   // 263\n        return doneResult();                                                                                           // 264\n      }                                                                                                                // 265\n                                                                                                                       // 266\n      while (true) {                                                                                                   // 267\n        var delegate = context.delegate;                                                                               // 268\n        if (delegate) {                                                                                                // 269\n          if (method === \"return\" ||                                                                                   // 270\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {                                       // 271\n            // A return or throw (when the delegate iterator has no throw                                              // 272\n            // method) always terminates the yield* loop.                                                              // 273\n            context.delegate = null;                                                                                   // 274\n                                                                                                                       // 275\n            // If the delegate iterator has a return method, give it a                                                 // 276\n            // chance to clean up.                                                                                     // 277\n            var returnMethod = delegate.iterator[\"return\"];                                                            // 278\n            if (returnMethod) {                                                                                        // 279\n              var record = tryCatch(returnMethod, delegate.iterator, arg);                                             // 280\n              if (record.type === \"throw\") {                                                                           // 281\n                // If the return method threw an exception, let that                                                   // 282\n                // exception prevail over the original return or throw.                                                // 283\n                method = \"throw\";                                                                                      // 284\n                arg = record.arg;                                                                                      // 285\n                continue;                                                                                              // 286\n              }                                                                                                        // 287\n            }                                                                                                          // 288\n                                                                                                                       // 289\n            if (method === \"return\") {                                                                                 // 290\n              // Continue with the outer return, now that the delegate                                                 // 291\n              // iterator has been terminated.                                                                         // 292\n              continue;                                                                                                // 293\n            }                                                                                                          // 294\n          }                                                                                                            // 295\n                                                                                                                       // 296\n          var record = tryCatch(                                                                                       // 297\n            delegate.iterator[method],                                                                                 // 298\n            delegate.iterator,                                                                                         // 299\n            arg                                                                                                        // 300\n          );                                                                                                           // 301\n                                                                                                                       // 302\n          if (record.type === \"throw\") {                                                                               // 303\n            context.delegate = null;                                                                                   // 304\n                                                                                                                       // 305\n            // Like returning generator.throw(uncaught), but without the                                               // 306\n            // overhead of an extra function call.                                                                     // 307\n            method = \"throw\";                                                                                          // 308\n            arg = record.arg;                                                                                          // 309\n            continue;                                                                                                  // 310\n          }                                                                                                            // 311\n                                                                                                                       // 312\n          // Delegate generator ran and handled its own exceptions so                                                  // 313\n          // regardless of what the method was, we continue as if it is                                                // 314\n          // \"next\" with an undefined arg.                                                                             // 315\n          method = \"next\";                                                                                             // 316\n          arg = undefined;                                                                                             // 317\n                                                                                                                       // 318\n          var info = record.arg;                                                                                       // 319\n          if (info.done) {                                                                                             // 320\n            context[delegate.resultName] = info.value;                                                                 // 321\n            context.next = delegate.nextLoc;                                                                           // 322\n          } else {                                                                                                     // 323\n            state = GenStateSuspendedYield;                                                                            // 324\n            return info;                                                                                               // 325\n          }                                                                                                            // 326\n                                                                                                                       // 327\n          context.delegate = null;                                                                                     // 328\n        }                                                                                                              // 329\n                                                                                                                       // 330\n        if (method === \"next\") {                                                                                       // 331\n          // Setting context._sent for legacy support of Babel's                                                       // 332\n          // function.sent implementation.                                                                             // 333\n          context.sent = context._sent = arg;                                                                          // 334\n                                                                                                                       // 335\n        } else if (method === \"throw\") {                                                                               // 336\n          if (state === GenStateSuspendedStart) {                                                                      // 337\n            state = GenStateCompleted;                                                                                 // 338\n            throw arg;                                                                                                 // 339\n          }                                                                                                            // 340\n                                                                                                                       // 341\n          if (context.dispatchException(arg)) {                                                                        // 342\n            // If the dispatched exception was caught by a catch block,                                                // 343\n            // then let that catch block handle the exception normally.                                                // 344\n            method = \"next\";                                                                                           // 345\n            arg = undefined;                                                                                           // 346\n          }                                                                                                            // 347\n                                                                                                                       // 348\n        } else if (method === \"return\") {                                                                              // 349\n          context.abrupt(\"return\", arg);                                                                               // 350\n        }                                                                                                              // 351\n                                                                                                                       // 352\n        state = GenStateExecuting;                                                                                     // 353\n                                                                                                                       // 354\n        var record = tryCatch(innerFn, self, context);                                                                 // 355\n        if (record.type === \"normal\") {                                                                                // 356\n          // If an exception is thrown from innerFn, we leave state ===                                                // 357\n          // GenStateExecuting and loop back for another invocation.                                                   // 358\n          state = context.done                                                                                         // 359\n            ? GenStateCompleted                                                                                        // 360\n            : GenStateSuspendedYield;                                                                                  // 361\n                                                                                                                       // 362\n          var info = {                                                                                                 // 363\n            value: record.arg,                                                                                         // 364\n            done: context.done                                                                                         // 365\n          };                                                                                                           // 366\n                                                                                                                       // 367\n          if (record.arg === ContinueSentinel) {                                                                       // 368\n            if (context.delegate && method === \"next\") {                                                               // 369\n              // Deliberately forget the last sent value so that we don't                                              // 370\n              // accidentally pass it on to the delegate.                                                              // 371\n              arg = undefined;                                                                                         // 372\n            }                                                                                                          // 373\n          } else {                                                                                                     // 374\n            return info;                                                                                               // 375\n          }                                                                                                            // 376\n                                                                                                                       // 377\n        } else if (record.type === \"throw\") {                                                                          // 378\n          state = GenStateCompleted;                                                                                   // 379\n          // Dispatch the exception by looping back around to the                                                      // 380\n          // context.dispatchException(arg) call above.                                                                // 381\n          method = \"throw\";                                                                                            // 382\n          arg = record.arg;                                                                                            // 383\n        }                                                                                                              // 384\n      }                                                                                                                // 385\n    };                                                                                                                 // 386\n  }                                                                                                                    // 387\n                                                                                                                       // 388\n  // Define Generator.prototype.{next,throw,return} in terms of the                                                    // 389\n  // unified ._invoke helper method.                                                                                   // 390\n  defineIteratorMethods(Gp);                                                                                           // 391\n                                                                                                                       // 392\n  Gp[toStringTagSymbol] = \"Generator\";                                                                                 // 393\n                                                                                                                       // 394\n  Gp.toString = function() {                                                                                           // 395\n    return \"[object Generator]\";                                                                                       // 396\n  };                                                                                                                   // 397\n                                                                                                                       // 398\n  function pushTryEntry(locs) {                                                                                        // 399\n    var entry = { tryLoc: locs[0] };                                                                                   // 400\n                                                                                                                       // 401\n    if (1 in locs) {                                                                                                   // 402\n      entry.catchLoc = locs[1];                                                                                        // 403\n    }                                                                                                                  // 404\n                                                                                                                       // 405\n    if (2 in locs) {                                                                                                   // 406\n      entry.finallyLoc = locs[2];                                                                                      // 407\n      entry.afterLoc = locs[3];                                                                                        // 408\n    }                                                                                                                  // 409\n                                                                                                                       // 410\n    this.tryEntries.push(entry);                                                                                       // 411\n  }                                                                                                                    // 412\n                                                                                                                       // 413\n  function resetTryEntry(entry) {                                                                                      // 414\n    var record = entry.completion || {};                                                                               // 415\n    record.type = \"normal\";                                                                                            // 416\n    delete record.arg;                                                                                                 // 417\n    entry.completion = record;                                                                                         // 418\n  }                                                                                                                    // 419\n                                                                                                                       // 420\n  function Context(tryLocsList) {                                                                                      // 421\n    // The root entry object (effectively a try statement without a catch                                              // 422\n    // or a finally block) gives us a place to store values thrown from                                                // 423\n    // locations where there is no enclosing try statement.                                                            // 424\n    this.tryEntries = [{ tryLoc: \"root\" }];                                                                            // 425\n    tryLocsList.forEach(pushTryEntry, this);                                                                           // 426\n    this.reset(true);                                                                                                  // 427\n  }                                                                                                                    // 428\n                                                                                                                       // 429\n  runtime.keys = function(object) {                                                                                    // 430\n    var keys = [];                                                                                                     // 431\n    for (var key in object) {                                                                                          // 432\n      keys.push(key);                                                                                                  // 433\n    }                                                                                                                  // 434\n    keys.reverse();                                                                                                    // 435\n                                                                                                                       // 436\n    // Rather than returning an object with a next method, we keep                                                     // 437\n    // things simple and return the next function itself.                                                              // 438\n    return function next() {                                                                                           // 439\n      while (keys.length) {                                                                                            // 440\n        var key = keys.pop();                                                                                          // 441\n        if (key in object) {                                                                                           // 442\n          next.value = key;                                                                                            // 443\n          next.done = false;                                                                                           // 444\n          return next;                                                                                                 // 445\n        }                                                                                                              // 446\n      }                                                                                                                // 447\n                                                                                                                       // 448\n      // To avoid creating an additional object, we just hang the .value                                               // 449\n      // and .done properties off the next function object itself. This                                                // 450\n      // also ensures that the minifier will not anonymize the function.                                               // 451\n      next.done = true;                                                                                                // 452\n      return next;                                                                                                     // 453\n    };                                                                                                                 // 454\n  };                                                                                                                   // 455\n                                                                                                                       // 456\n  function values(iterable) {                                                                                          // 457\n    if (iterable) {                                                                                                    // 458\n      var iteratorMethod = iterable[iteratorSymbol];                                                                   // 459\n      if (iteratorMethod) {                                                                                            // 460\n        return iteratorMethod.call(iterable);                                                                          // 461\n      }                                                                                                                // 462\n                                                                                                                       // 463\n      if (typeof iterable.next === \"function\") {                                                                       // 464\n        return iterable;                                                                                               // 465\n      }                                                                                                                // 466\n                                                                                                                       // 467\n      if (!isNaN(iterable.length)) {                                                                                   // 468\n        var i = -1, next = function next() {                                                                           // 469\n          while (++i < iterable.length) {                                                                              // 470\n            if (hasOwn.call(iterable, i)) {                                                                            // 471\n              next.value = iterable[i];                                                                                // 472\n              next.done = false;                                                                                       // 473\n              return next;                                                                                             // 474\n            }                                                                                                          // 475\n          }                                                                                                            // 476\n                                                                                                                       // 477\n          next.value = undefined;                                                                                      // 478\n          next.done = true;                                                                                            // 479\n                                                                                                                       // 480\n          return next;                                                                                                 // 481\n        };                                                                                                             // 482\n                                                                                                                       // 483\n        return next.next = next;                                                                                       // 484\n      }                                                                                                                // 485\n    }                                                                                                                  // 486\n                                                                                                                       // 487\n    // Return an iterator with no values.                                                                              // 488\n    return { next: doneResult };                                                                                       // 489\n  }                                                                                                                    // 490\n  runtime.values = values;                                                                                             // 491\n                                                                                                                       // 492\n  function doneResult() {                                                                                              // 493\n    return { value: undefined, done: true };                                                                           // 494\n  }                                                                                                                    // 495\n                                                                                                                       // 496\n  Context.prototype = {                                                                                                // 497\n    constructor: Context,                                                                                              // 498\n                                                                                                                       // 499\n    reset: function(skipTempReset) {                                                                                   // 500\n      this.prev = 0;                                                                                                   // 501\n      this.next = 0;                                                                                                   // 502\n      // Resetting context._sent for legacy support of Babel's                                                         // 503\n      // function.sent implementation.                                                                                 // 504\n      this.sent = this._sent = undefined;                                                                              // 505\n      this.done = false;                                                                                               // 506\n      this.delegate = null;                                                                                            // 507\n                                                                                                                       // 508\n      this.tryEntries.forEach(resetTryEntry);                                                                          // 509\n                                                                                                                       // 510\n      if (!skipTempReset) {                                                                                            // 511\n        for (var name in this) {                                                                                       // 512\n          // Not sure about the optimal order of these conditions:                                                     // 513\n          if (name.charAt(0) === \"t\" &&                                                                                // 514\n              hasOwn.call(this, name) &&                                                                               // 515\n              !isNaN(+name.slice(1))) {                                                                                // 516\n            this[name] = undefined;                                                                                    // 517\n          }                                                                                                            // 518\n        }                                                                                                              // 519\n      }                                                                                                                // 520\n    },                                                                                                                 // 521\n                                                                                                                       // 522\n    stop: function() {                                                                                                 // 523\n      this.done = true;                                                                                                // 524\n                                                                                                                       // 525\n      var rootEntry = this.tryEntries[0];                                                                              // 526\n      var rootRecord = rootEntry.completion;                                                                           // 527\n      if (rootRecord.type === \"throw\") {                                                                               // 528\n        throw rootRecord.arg;                                                                                          // 529\n      }                                                                                                                // 530\n                                                                                                                       // 531\n      return this.rval;                                                                                                // 532\n    },                                                                                                                 // 533\n                                                                                                                       // 534\n    dispatchException: function(exception) {                                                                           // 535\n      if (this.done) {                                                                                                 // 536\n        throw exception;                                                                                               // 537\n      }                                                                                                                // 538\n                                                                                                                       // 539\n      var context = this;                                                                                              // 540\n      function handle(loc, caught) {                                                                                   // 541\n        record.type = \"throw\";                                                                                         // 542\n        record.arg = exception;                                                                                        // 543\n        context.next = loc;                                                                                            // 544\n        return !!caught;                                                                                               // 545\n      }                                                                                                                // 546\n                                                                                                                       // 547\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 548\n        var entry = this.tryEntries[i];                                                                                // 549\n        var record = entry.completion;                                                                                 // 550\n                                                                                                                       // 551\n        if (entry.tryLoc === \"root\") {                                                                                 // 552\n          // Exception thrown outside of any try block that could handle                                               // 553\n          // it, so set the completion value of the entire function to                                                 // 554\n          // throw the exception.                                                                                      // 555\n          return handle(\"end\");                                                                                        // 556\n        }                                                                                                              // 557\n                                                                                                                       // 558\n        if (entry.tryLoc <= this.prev) {                                                                               // 559\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");                                                               // 560\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");                                                           // 561\n                                                                                                                       // 562\n          if (hasCatch && hasFinally) {                                                                                // 563\n            if (this.prev < entry.catchLoc) {                                                                          // 564\n              return handle(entry.catchLoc, true);                                                                     // 565\n            } else if (this.prev < entry.finallyLoc) {                                                                 // 566\n              return handle(entry.finallyLoc);                                                                         // 567\n            }                                                                                                          // 568\n                                                                                                                       // 569\n          } else if (hasCatch) {                                                                                       // 570\n            if (this.prev < entry.catchLoc) {                                                                          // 571\n              return handle(entry.catchLoc, true);                                                                     // 572\n            }                                                                                                          // 573\n                                                                                                                       // 574\n          } else if (hasFinally) {                                                                                     // 575\n            if (this.prev < entry.finallyLoc) {                                                                        // 576\n              return handle(entry.finallyLoc);                                                                         // 577\n            }                                                                                                          // 578\n                                                                                                                       // 579\n          } else {                                                                                                     // 580\n            throw new Error(\"try statement without catch or finally\");                                                 // 581\n          }                                                                                                            // 582\n        }                                                                                                              // 583\n      }                                                                                                                // 584\n    },                                                                                                                 // 585\n                                                                                                                       // 586\n    abrupt: function(type, arg) {                                                                                      // 587\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 588\n        var entry = this.tryEntries[i];                                                                                // 589\n        if (entry.tryLoc <= this.prev &&                                                                               // 590\n            hasOwn.call(entry, \"finallyLoc\") &&                                                                        // 591\n            this.prev < entry.finallyLoc) {                                                                            // 592\n          var finallyEntry = entry;                                                                                    // 593\n          break;                                                                                                       // 594\n        }                                                                                                              // 595\n      }                                                                                                                // 596\n                                                                                                                       // 597\n      if (finallyEntry &&                                                                                              // 598\n          (type === \"break\" ||                                                                                         // 599\n           type === \"continue\") &&                                                                                     // 600\n          finallyEntry.tryLoc <= arg &&                                                                                // 601\n          arg <= finallyEntry.finallyLoc) {                                                                            // 602\n        // Ignore the finally entry if control is not jumping to a                                                     // 603\n        // location outside the try/catch block.                                                                       // 604\n        finallyEntry = null;                                                                                           // 605\n      }                                                                                                                // 606\n                                                                                                                       // 607\n      var record = finallyEntry ? finallyEntry.completion : {};                                                        // 608\n      record.type = type;                                                                                              // 609\n      record.arg = arg;                                                                                                // 610\n                                                                                                                       // 611\n      if (finallyEntry) {                                                                                              // 612\n        this.next = finallyEntry.finallyLoc;                                                                           // 613\n      } else {                                                                                                         // 614\n        this.complete(record);                                                                                         // 615\n      }                                                                                                                // 616\n                                                                                                                       // 617\n      return ContinueSentinel;                                                                                         // 618\n    },                                                                                                                 // 619\n                                                                                                                       // 620\n    complete: function(record, afterLoc) {                                                                             // 621\n      if (record.type === \"throw\") {                                                                                   // 622\n        throw record.arg;                                                                                              // 623\n      }                                                                                                                // 624\n                                                                                                                       // 625\n      if (record.type === \"break\" ||                                                                                   // 626\n          record.type === \"continue\") {                                                                                // 627\n        this.next = record.arg;                                                                                        // 628\n      } else if (record.type === \"return\") {                                                                           // 629\n        this.rval = record.arg;                                                                                        // 630\n        this.next = \"end\";                                                                                             // 631\n      } else if (record.type === \"normal\" && afterLoc) {                                                               // 632\n        this.next = afterLoc;                                                                                          // 633\n      }                                                                                                                // 634\n    },                                                                                                                 // 635\n                                                                                                                       // 636\n    finish: function(finallyLoc) {                                                                                     // 637\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 638\n        var entry = this.tryEntries[i];                                                                                // 639\n        if (entry.finallyLoc === finallyLoc) {                                                                         // 640\n          this.complete(entry.completion, entry.afterLoc);                                                             // 641\n          resetTryEntry(entry);                                                                                        // 642\n          return ContinueSentinel;                                                                                     // 643\n        }                                                                                                              // 644\n      }                                                                                                                // 645\n    },                                                                                                                 // 646\n                                                                                                                       // 647\n    \"catch\": function(tryLoc) {                                                                                        // 648\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {                                                          // 649\n        var entry = this.tryEntries[i];                                                                                // 650\n        if (entry.tryLoc === tryLoc) {                                                                                 // 651\n          var record = entry.completion;                                                                               // 652\n          if (record.type === \"throw\") {                                                                               // 653\n            var thrown = record.arg;                                                                                   // 654\n            resetTryEntry(entry);                                                                                      // 655\n          }                                                                                                            // 656\n          return thrown;                                                                                               // 657\n        }                                                                                                              // 658\n      }                                                                                                                // 659\n                                                                                                                       // 660\n      // The context.catch method must only be called with a location                                                  // 661\n      // argument that corresponds to a known catch block.                                                             // 662\n      throw new Error(\"illegal catch attempt\");                                                                        // 663\n    },                                                                                                                 // 664\n                                                                                                                       // 665\n    delegateYield: function(iterable, resultName, nextLoc) {                                                           // 666\n      this.delegate = {                                                                                                // 667\n        iterator: values(iterable),                                                                                    // 668\n        resultName: resultName,                                                                                        // 669\n        nextLoc: nextLoc                                                                                               // 670\n      };                                                                                                               // 671\n                                                                                                                       // 672\n      return ContinueSentinel;                                                                                         // 673\n    }                                                                                                                  // 674\n  };                                                                                                                   // 675\n})(                                                                                                                    // 676\n  // Among the various tricks for obtaining a reference to the global                                                  // 677\n  // object, this seems to be the most reliable technique that does not                                                // 678\n  // use indirect eval (which violates Content Security Policy).                                                       // 679\n  typeof global === \"object\" ? global :                                                                                // 680\n  typeof window === \"object\" ? window :                                                                                // 681\n  typeof self === \"object\" ? self : this                                                                               // 682\n);                                                                                                                     // 683\n                                                                                                                       // 684\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"core-js\":{\"library\":{\"fn\":{\"symbol\":{\"iterator.js\":[\"../../modules/es6.string.iterator\",\"../../modules/web.dom.iterable\",\"../../modules/_wks-ext\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/iterator.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.string.iterator');                                                                          // 1\nrequire('../../modules/web.dom.iterable');                                                                             // 2\nmodule.exports = require('../../modules/_wks-ext').f('iterator');                                                      // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"index.js\":[\"../../modules/es6.symbol\",\"../../modules/es6.object.to-string\",\"../../modules/es7.symbol.async-iterator\",\"../../modules/es7.symbol.observable\",\"../../modules/_core\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/fn/symbol/index.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('../../modules/es6.symbol');                                                                                   // 1\nrequire('../../modules/es6.object.to-string');                                                                         // 2\nrequire('../../modules/es7.symbol.async-iterator');                                                                    // 3\nrequire('../../modules/es7.symbol.observable');                                                                        // 4\nmodule.exports = require('../../modules/_core').Symbol;                                                                // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"modules\":{\"es6.string.iterator.js\":[\"./_string-at\",\"./_iter-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.string.iterator.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar $at  = require('./_string-at')(true);                                                                              // 2\n                                                                                                                       // 3\n// 21.1.3.27 String.prototype[@@iterator]()                                                                            // 4\nrequire('./_iter-define')(String, 'String', function(iterated){                                                        // 5\n  this._t = String(iterated); // target                                                                                // 6\n  this._i = 0;                // next index                                                                            // 7\n// 21.1.5.2.1 %StringIteratorPrototype%.next()                                                                         // 8\n}, function(){                                                                                                         // 9\n  var O     = this._t                                                                                                  // 10\n    , index = this._i                                                                                                  // 11\n    , point;                                                                                                           // 12\n  if(index >= O.length)return {value: undefined, done: true};                                                          // 13\n  point = $at(O, index);                                                                                               // 14\n  this._i += point.length;                                                                                             // 15\n  return {value: point, done: false};                                                                                  // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_string-at.js\":[\"./_to-integer\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_string-at.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , defined   = require('./_defined');                                                                                 // 2\n// true  -> String#at                                                                                                  // 3\n// false -> String#codePointAt                                                                                         // 4\nmodule.exports = function(TO_STRING){                                                                                  // 5\n  return function(that, pos){                                                                                          // 6\n    var s = String(defined(that))                                                                                      // 7\n      , i = toInteger(pos)                                                                                             // 8\n      , l = s.length                                                                                                   // 9\n      , a, b;                                                                                                          // 10\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;                                                              // 11\n    a = s.charCodeAt(i);                                                                                               // 12\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff                 // 13\n      ? TO_STRING ? s.charAt(i) : a                                                                                    // 14\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;                                   // 15\n  };                                                                                                                   // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-integer.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-integer.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.4 ToInteger                                                                                                     // 1\nvar ceil  = Math.ceil                                                                                                  // 2\n  , floor = Math.floor;                                                                                                // 3\nmodule.exports = function(it){                                                                                         // 4\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);                                                            // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_defined.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_defined.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.1 RequireObjectCoercible(argument)                                                                              // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);                                                   // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-define.js\":[\"./_library\",\"./_export\",\"./_redefine\",\"./_hide\",\"./_has\",\"./_iterators\",\"./_iter-create\",\"./_set-to-string-tag\",\"./_object-gpo\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-define.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar LIBRARY        = require('./_library')                                                                             // 2\n  , $export        = require('./_export')                                                                              // 3\n  , redefine       = require('./_redefine')                                                                            // 4\n  , hide           = require('./_hide')                                                                                // 5\n  , has            = require('./_has')                                                                                 // 6\n  , Iterators      = require('./_iterators')                                                                           // 7\n  , $iterCreate    = require('./_iter-create')                                                                         // 8\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 9\n  , getPrototypeOf = require('./_object-gpo')                                                                          // 10\n  , ITERATOR       = require('./_wks')('iterator')                                                                     // 11\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`                        // 12\n  , FF_ITERATOR    = '@@iterator'                                                                                      // 13\n  , KEYS           = 'keys'                                                                                            // 14\n  , VALUES         = 'values';                                                                                         // 15\n                                                                                                                       // 16\nvar returnThis = function(){ return this; };                                                                           // 17\n                                                                                                                       // 18\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){                                     // 19\n  $iterCreate(Constructor, NAME, next);                                                                                // 20\n  var getMethod = function(kind){                                                                                      // 21\n    if(!BUGGY && kind in proto)return proto[kind];                                                                     // 22\n    switch(kind){                                                                                                      // 23\n      case KEYS: return function keys(){ return new Constructor(this, kind); };                                        // 24\n      case VALUES: return function values(){ return new Constructor(this, kind); };                                    // 25\n    } return function entries(){ return new Constructor(this, kind); };                                                // 26\n  };                                                                                                                   // 27\n  var TAG        = NAME + ' Iterator'                                                                                  // 28\n    , DEF_VALUES = DEFAULT == VALUES                                                                                   // 29\n    , VALUES_BUG = false                                                                                               // 30\n    , proto      = Base.prototype                                                                                      // 31\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]                                  // 32\n    , $default   = $native || getMethod(DEFAULT)                                                                       // 33\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined                                 // 34\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native                                                // 35\n    , methods, key, IteratorPrototype;                                                                                 // 36\n  // Fix native                                                                                                        // 37\n  if($anyNative){                                                                                                      // 38\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));                                                     // 39\n    if(IteratorPrototype !== Object.prototype){                                                                        // 40\n      // Set @@toStringTag to native iterators                                                                         // 41\n      setToStringTag(IteratorPrototype, TAG, true);                                                                    // 42\n      // fix for some old engines                                                                                      // 43\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n  // fix Array#{values, @@iterator}.name in V8 / FF                                                                    // 47\n  if(DEF_VALUES && $native && $native.name !== VALUES){                                                                // 48\n    VALUES_BUG = true;                                                                                                 // 49\n    $default = function values(){ return $native.call(this); };                                                        // 50\n  }                                                                                                                    // 51\n  // Define iterator                                                                                                   // 52\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){                                               // 53\n    hide(proto, ITERATOR, $default);                                                                                   // 54\n  }                                                                                                                    // 55\n  // Plug for library                                                                                                  // 56\n  Iterators[NAME] = $default;                                                                                          // 57\n  Iterators[TAG]  = returnThis;                                                                                        // 58\n  if(DEFAULT){                                                                                                         // 59\n    methods = {                                                                                                        // 60\n      values:  DEF_VALUES ? $default : getMethod(VALUES),                                                              // 61\n      keys:    IS_SET     ? $default : getMethod(KEYS),                                                                // 62\n      entries: $entries                                                                                                // 63\n    };                                                                                                                 // 64\n    if(FORCED)for(key in methods){                                                                                     // 65\n      if(!(key in proto))redefine(proto, key, methods[key]);                                                           // 66\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);                                      // 67\n  }                                                                                                                    // 68\n  return methods;                                                                                                      // 69\n};                                                                                                                     // 70\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_library.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_library.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = true;                                                                                                 // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_export.js\":[\"./_global\",\"./_core\",\"./_ctx\",\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_export.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global    = require('./_global')                                                                                   // 1\n  , core      = require('./_core')                                                                                     // 2\n  , ctx       = require('./_ctx')                                                                                      // 3\n  , hide      = require('./_hide')                                                                                     // 4\n  , PROTOTYPE = 'prototype';                                                                                           // 5\n                                                                                                                       // 6\nvar $export = function(type, name, source){                                                                            // 7\n  var IS_FORCED = type & $export.F                                                                                     // 8\n    , IS_GLOBAL = type & $export.G                                                                                     // 9\n    , IS_STATIC = type & $export.S                                                                                     // 10\n    , IS_PROTO  = type & $export.P                                                                                     // 11\n    , IS_BIND   = type & $export.B                                                                                     // 12\n    , IS_WRAP   = type & $export.W                                                                                     // 13\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})                                                   // 14\n    , expProto  = exports[PROTOTYPE]                                                                                   // 15\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]                      // 16\n    , key, own, out;                                                                                                   // 17\n  if(IS_GLOBAL)source = name;                                                                                          // 18\n  for(key in source){                                                                                                  // 19\n    // contains in native                                                                                              // 20\n    own = !IS_FORCED && target && target[key] !== undefined;                                                           // 21\n    if(own && key in exports)continue;                                                                                 // 22\n    // export native or passed                                                                                         // 23\n    out = own ? target[key] : source[key];                                                                             // 24\n    // prevent global pollution for namespaces                                                                         // 25\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]                                         // 26\n    // bind timers to global for call from export context                                                              // 27\n    : IS_BIND && own ? ctx(out, global)                                                                                // 28\n    // wrap global constructors for prevent change them in library                                                     // 29\n    : IS_WRAP && target[key] == out ? (function(C){                                                                    // 30\n      var F = function(a, b, c){                                                                                       // 31\n        if(this instanceof C){                                                                                         // 32\n          switch(arguments.length){                                                                                    // 33\n            case 0: return new C;                                                                                      // 34\n            case 1: return new C(a);                                                                                   // 35\n            case 2: return new C(a, b);                                                                                // 36\n          } return new C(a, b, c);                                                                                     // 37\n        } return C.apply(this, arguments);                                                                             // 38\n      };                                                                                                               // 39\n      F[PROTOTYPE] = C[PROTOTYPE];                                                                                     // 40\n      return F;                                                                                                        // 41\n    // make static versions for prototype methods                                                                      // 42\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;                                    // 43\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%                                                       // 44\n    if(IS_PROTO){                                                                                                      // 45\n      (exports.virtual || (exports.virtual = {}))[key] = out;                                                          // 46\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%                                                   // 47\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);                                      // 48\n    }                                                                                                                  // 49\n  }                                                                                                                    // 50\n};                                                                                                                     // 51\n// type bitmap                                                                                                         // 52\n$export.F = 1;   // forced                                                                                             // 53\n$export.G = 2;   // global                                                                                             // 54\n$export.S = 4;   // static                                                                                             // 55\n$export.P = 8;   // proto                                                                                              // 56\n$export.B = 16;  // bind                                                                                               // 57\n$export.W = 32;  // wrap                                                                                               // 58\n$export.U = 64;  // safe                                                                                               // 59\n$export.R = 128; // real proto method for `library`                                                                    // 60\nmodule.exports = $export;                                                                                              // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_global.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_global.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028                                                // 1\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math                                      // 2\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();                       // 3\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef                                                // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_core.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_core.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar core = module.exports = {version: '2.4.0'};                                                                        // 1\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ctx.js\":[\"./_a-function\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ctx.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// optional / simple context binding                                                                                   // 1\nvar aFunction = require('./_a-function');                                                                              // 2\nmodule.exports = function(fn, that, length){                                                                           // 3\n  aFunction(fn);                                                                                                       // 4\n  if(that === undefined)return fn;                                                                                     // 5\n  switch(length){                                                                                                      // 6\n    case 1: return function(a){                                                                                        // 7\n      return fn.call(that, a);                                                                                         // 8\n    };                                                                                                                 // 9\n    case 2: return function(a, b){                                                                                     // 10\n      return fn.call(that, a, b);                                                                                      // 11\n    };                                                                                                                 // 12\n    case 3: return function(a, b, c){                                                                                  // 13\n      return fn.call(that, a, b, c);                                                                                   // 14\n    };                                                                                                                 // 15\n  }                                                                                                                    // 16\n  return function(/* ...args */){                                                                                      // 17\n    return fn.apply(that, arguments);                                                                                  // 18\n  };                                                                                                                   // 19\n};                                                                                                                     // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_a-function.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_a-function.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');                                              // 2\n  return it;                                                                                                           // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_hide.js\":[\"./_object-dp\",\"./_property-desc\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_hide.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP         = require('./_object-dp')                                                                               // 1\n  , createDesc = require('./_property-desc');                                                                          // 2\nmodule.exports = require('./_descriptors') ? function(object, key, value){                                             // 3\n  return dP.f(object, key, createDesc(1, value));                                                                      // 4\n} : function(object, key, value){                                                                                      // 5\n  object[key] = value;                                                                                                 // 6\n  return object;                                                                                                       // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dp.js\":[\"./_an-object\",\"./_ie8-dom-define\",\"./_to-primitive\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dp.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar anObject       = require('./_an-object')                                                                           // 1\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 2\n  , toPrimitive    = require('./_to-primitive')                                                                        // 3\n  , dP             = Object.defineProperty;                                                                            // 4\n                                                                                                                       // 5\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){             // 6\n  anObject(O);                                                                                                         // 7\n  P = toPrimitive(P, true);                                                                                            // 8\n  anObject(Attributes);                                                                                                // 9\n  if(IE8_DOM_DEFINE)try {                                                                                              // 10\n    return dP(O, P, Attributes);                                                                                       // 11\n  } catch(e){ /* empty */ }                                                                                            // 12\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');                           // 13\n  if('value' in Attributes)O[P] = Attributes.value;                                                                    // 14\n  return O;                                                                                                            // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_an-object.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_an-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object');                                                                                // 1\nmodule.exports = function(it){                                                                                         // 2\n  if(!isObject(it))throw TypeError(it + ' is not an object!');                                                         // 3\n  return it;                                                                                                           // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_is-object.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(it){                                                                                         // 1\n  return typeof it === 'object' ? it !== null : typeof it === 'function';                                              // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_ie8-dom-define.js\":[\"./_descriptors\",\"./_fails\",\"./_dom-create\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_ie8-dom-define.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = !require('./_descriptors') && !require('./_fails')(function(){                                        // 1\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;           // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_descriptors.js\":[\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_descriptors.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Thank's IE8 for his funny defineProperty                                                                            // 1\nmodule.exports = !require('./_fails')(function(){                                                                      // 2\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;                                        // 3\n});                                                                                                                    // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_fails.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_fails.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(exec){                                                                                       // 1\n  try {                                                                                                                // 2\n    return !!exec();                                                                                                   // 3\n  } catch(e){                                                                                                          // 4\n    return true;                                                                                                       // 5\n  }                                                                                                                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_dom-create.js\":[\"./_is-object\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_dom-create.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar isObject = require('./_is-object')                                                                                 // 1\n  , document = require('./_global').document                                                                           // 2\n  // in old IE typeof document.createElement is 'object'                                                               // 3\n  , is = isObject(document) && isObject(document.createElement);                                                       // 4\nmodule.exports = function(it){                                                                                         // 5\n  return is ? document.createElement(it) : {};                                                                         // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-primitive.js\":[\"./_is-object\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-primitive.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.1 ToPrimitive(input [, PreferredType])                                                                          // 1\nvar isObject = require('./_is-object');                                                                                // 2\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case                                             // 3\n// and the second argument - flag - preferred type is a string                                                         // 4\nmodule.exports = function(it, S){                                                                                      // 5\n  if(!isObject(it))return it;                                                                                          // 6\n  var fn, val;                                                                                                         // 7\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                          // 8\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;                                // 9\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;                         // 10\n  throw TypeError(\"Can't convert object to primitive value\");                                                          // 11\n};                                                                                                                     // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_property-desc.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_property-desc.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(bitmap, value){                                                                              // 1\n  return {                                                                                                             // 2\n    enumerable  : !(bitmap & 1),                                                                                       // 3\n    configurable: !(bitmap & 2),                                                                                       // 4\n    writable    : !(bitmap & 4),                                                                                       // 5\n    value       : value                                                                                                // 6\n  };                                                                                                                   // 7\n};                                                                                                                     // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_redefine.js\":[\"./_hide\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_redefine.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_hide');                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_has.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_has.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar hasOwnProperty = {}.hasOwnProperty;                                                                                // 1\nmodule.exports = function(it, key){                                                                                    // 2\n  return hasOwnProperty.call(it, key);                                                                                 // 3\n};                                                                                                                     // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iterators.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iterators.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {};                                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-create.js\":[\"./_object-create\",\"./_property-desc\",\"./_set-to-string-tag\",\"./_hide\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-create.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar create         = require('./_object-create')                                                                       // 2\n  , descriptor     = require('./_property-desc')                                                                       // 3\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 4\n  , IteratorPrototype = {};                                                                                            // 5\n                                                                                                                       // 6\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()                                                                        // 7\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });                      // 8\n                                                                                                                       // 9\nmodule.exports = function(Constructor, NAME, next){                                                                    // 10\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});                                      // 11\n  setToStringTag(Constructor, NAME + ' Iterator');                                                                     // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-create.js\":[\"./_an-object\",\"./_object-dps\",\"./_enum-bug-keys\",\"./_shared-key\",\"./_dom-create\",\"./_html\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-create.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])                                                                 // 1\nvar anObject    = require('./_an-object')                                                                              // 2\n  , dPs         = require('./_object-dps')                                                                             // 3\n  , enumBugKeys = require('./_enum-bug-keys')                                                                          // 4\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 5\n  , Empty       = function(){ /* empty */ }                                                                            // 6\n  , PROTOTYPE   = 'prototype';                                                                                         // 7\n                                                                                                                       // 8\n// Create object with fake `null` prototype: use iframe Object with cleared prototype                                  // 9\nvar createDict = function(){                                                                                           // 10\n  // Thrash, waste and sodomy: IE GC bug                                                                               // 11\n  var iframe = require('./_dom-create')('iframe')                                                                      // 12\n    , i      = enumBugKeys.length                                                                                      // 13\n    , lt     = '<'                                                                                                     // 14\n    , gt     = '>'                                                                                                     // 15\n    , iframeDocument;                                                                                                  // 16\n  iframe.style.display = 'none';                                                                                       // 17\n  require('./_html').appendChild(iframe);                                                                              // 18\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url                                                     // 19\n  // createDict = iframe.contentWindow.Object;                                                                         // 20\n  // html.removeChild(iframe);                                                                                         // 21\n  iframeDocument = iframe.contentWindow.document;                                                                      // 22\n  iframeDocument.open();                                                                                               // 23\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);                                // 24\n  iframeDocument.close();                                                                                              // 25\n  createDict = iframeDocument.F;                                                                                       // 26\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];                                                              // 27\n  return createDict();                                                                                                 // 28\n};                                                                                                                     // 29\n                                                                                                                       // 30\nmodule.exports = Object.create || function create(O, Properties){                                                      // 31\n  var result;                                                                                                          // 32\n  if(O !== null){                                                                                                      // 33\n    Empty[PROTOTYPE] = anObject(O);                                                                                    // 34\n    result = new Empty;                                                                                                // 35\n    Empty[PROTOTYPE] = null;                                                                                           // 36\n    // add \"__proto__\" for Object.getPrototypeOf polyfill                                                              // 37\n    result[IE_PROTO] = O;                                                                                              // 38\n  } else result = createDict();                                                                                        // 39\n  return Properties === undefined ? result : dPs(result, Properties);                                                  // 40\n};                                                                                                                     // 41\n                                                                                                                       // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-dps.js\":[\"./_object-dp\",\"./_an-object\",\"./_object-keys\",\"./_descriptors\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-dps.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar dP       = require('./_object-dp')                                                                                 // 1\n  , anObject = require('./_an-object')                                                                                 // 2\n  , getKeys  = require('./_object-keys');                                                                              // 3\n                                                                                                                       // 4\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){       // 5\n  anObject(O);                                                                                                         // 6\n  var keys   = getKeys(Properties)                                                                                     // 7\n    , length = keys.length                                                                                             // 8\n    , i = 0                                                                                                            // 9\n    , P;                                                                                                               // 10\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);                                                              // 11\n  return O;                                                                                                            // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)                                                                                // 1\nvar $keys       = require('./_object-keys-internal')                                                                   // 2\n  , enumBugKeys = require('./_enum-bug-keys');                                                                         // 3\n                                                                                                                       // 4\nmodule.exports = Object.keys || function keys(O){                                                                      // 5\n  return $keys(O, enumBugKeys);                                                                                        // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-keys-internal.js\":[\"./_has\",\"./_to-iobject\",\"./_array-includes\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-keys-internal.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar has          = require('./_has')                                                                                   // 1\n  , toIObject    = require('./_to-iobject')                                                                            // 2\n  , arrayIndexOf = require('./_array-includes')(false)                                                                 // 3\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');                                                               // 4\n                                                                                                                       // 5\nmodule.exports = function(object, names){                                                                              // 6\n  var O      = toIObject(object)                                                                                       // 7\n    , i      = 0                                                                                                       // 8\n    , result = []                                                                                                      // 9\n    , key;                                                                                                             // 10\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);                                                     // 11\n  // Don't enum bug & hidden keys                                                                                      // 12\n  while(names.length > i)if(has(O, key = names[i++])){                                                                 // 13\n    ~arrayIndexOf(result, key) || result.push(key);                                                                    // 14\n  }                                                                                                                    // 15\n  return result;                                                                                                       // 16\n};                                                                                                                     // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-iobject.js\":[\"./_iobject\",\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-iobject.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// to indexed object, toObject with fallback for non-array-like ES3 strings                                            // 1\nvar IObject = require('./_iobject')                                                                                    // 2\n  , defined = require('./_defined');                                                                                   // 3\nmodule.exports = function(it){                                                                                         // 4\n  return IObject(defined(it));                                                                                         // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_iobject.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iobject.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for non-array-like ES3 and non-enumerable old V8 strings                                                   // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){                                          // 3\n  return cof(it) == 'String' ? it.split('') : Object(it);                                                              // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_cof.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_cof.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toString = {}.toString;                                                                                            // 1\n                                                                                                                       // 2\nmodule.exports = function(it){                                                                                         // 3\n  return toString.call(it).slice(8, -1);                                                                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_array-includes.js\":[\"./_to-iobject\",\"./_to-length\",\"./_to-index\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_array-includes.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// false -> Array#indexOf                                                                                              // 1\n// true  -> Array#includes                                                                                             // 2\nvar toIObject = require('./_to-iobject')                                                                               // 3\n  , toLength  = require('./_to-length')                                                                                // 4\n  , toIndex   = require('./_to-index');                                                                                // 5\nmodule.exports = function(IS_INCLUDES){                                                                                // 6\n  return function($this, el, fromIndex){                                                                               // 7\n    var O      = toIObject($this)                                                                                      // 8\n      , length = toLength(O.length)                                                                                    // 9\n      , index  = toIndex(fromIndex, length)                                                                            // 10\n      , value;                                                                                                         // 11\n    // Array#includes uses SameValueZero equality algorithm                                                            // 12\n    if(IS_INCLUDES && el != el)while(length > index){                                                                  // 13\n      value = O[index++];                                                                                              // 14\n      if(value != value)return true;                                                                                   // 15\n    // Array#toIndex ignores holes, Array#includes - not                                                               // 16\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){                                                 // 17\n      if(O[index] === el)return IS_INCLUDES || index || 0;                                                             // 18\n    } return !IS_INCLUDES && -1;                                                                                       // 19\n  };                                                                                                                   // 20\n};                                                                                                                     // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-length.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-length.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.15 ToLength                                                                                                     // 1\nvar toInteger = require('./_to-integer')                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(it){                                                                                         // 4\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991                      // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-index.js\":[\"./_to-integer\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-index.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar toInteger = require('./_to-integer')                                                                               // 1\n  , max       = Math.max                                                                                               // 2\n  , min       = Math.min;                                                                                              // 3\nmodule.exports = function(index, length){                                                                              // 4\n  index = toInteger(index);                                                                                            // 5\n  return index < 0 ? max(index + length, 0) : min(index, length);                                                      // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_shared-key.js\":[\"./_shared\",\"./_uid\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared-key.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar shared = require('./_shared')('keys')                                                                              // 1\n  , uid    = require('./_uid');                                                                                        // 2\nmodule.exports = function(key){                                                                                        // 3\n  return shared[key] || (shared[key] = uid(key));                                                                      // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_shared.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_shared.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global = require('./_global')                                                                                      // 1\n  , SHARED = '__core-js_shared__'                                                                                      // 2\n  , store  = global[SHARED] || (global[SHARED] = {});                                                                  // 3\nmodule.exports = function(key){                                                                                        // 4\n  return store[key] || (store[key] = {});                                                                              // 5\n};                                                                                                                     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_uid.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_uid.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar id = 0                                                                                                             // 1\n  , px = Math.random();                                                                                                // 2\nmodule.exports = function(key){                                                                                        // 3\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));                               // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_enum-bug-keys.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-bug-keys.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// IE 8- don't enum bug keys                                                                                           // 1\nmodule.exports = (                                                                                                     // 2\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'                      // 3\n).split(',');                                                                                                          // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_html.js\":[\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_html.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = require('./_global').document && document.documentElement;                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_set-to-string-tag.js\":[\"./_object-dp\",\"./_has\",\"./_wks\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_set-to-string-tag.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar def = require('./_object-dp').f                                                                                    // 1\n  , has = require('./_has')                                                                                            // 2\n  , TAG = require('./_wks')('toStringTag');                                                                            // 3\n                                                                                                                       // 4\nmodule.exports = function(it, tag, stat){                                                                              // 5\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});                    // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks.js\":[\"./_shared\",\"./_uid\",\"./_global\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar store      = require('./_shared')('wks')                                                                           // 1\n  , uid        = require('./_uid')                                                                                     // 2\n  , Symbol     = require('./_global').Symbol                                                                           // 3\n  , USE_SYMBOL = typeof Symbol == 'function';                                                                          // 4\n                                                                                                                       // 5\nvar $exports = module.exports = function(name){                                                                        // 6\n  return store[name] || (store[name] =                                                                                 // 7\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));                                      // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n$exports.store = store;                                                                                                // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gpo.js\":[\"./_has\",\"./_to-object\",\"./_shared-key\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gpo.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)                                                                        // 1\nvar has         = require('./_has')                                                                                    // 2\n  , toObject    = require('./_to-object')                                                                              // 3\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')                                                                 // 4\n  , ObjectProto = Object.prototype;                                                                                    // 5\n                                                                                                                       // 6\nmodule.exports = Object.getPrototypeOf || function(O){                                                                 // 7\n  O = toObject(O);                                                                                                     // 8\n  if(has(O, IE_PROTO))return O[IE_PROTO];                                                                              // 9\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){                                                // 10\n    return O.constructor.prototype;                                                                                    // 11\n  } return O instanceof Object ? ObjectProto : null;                                                                   // 12\n};                                                                                                                     // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_to-object.js\":[\"./_defined\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_to-object.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.1.13 ToObject(argument)                                                                                           // 1\nvar defined = require('./_defined');                                                                                   // 2\nmodule.exports = function(it){                                                                                         // 3\n  return Object(defined(it));                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"web.dom.iterable.js\":[\"./es6.array.iterator\",\"./_global\",\"./_hide\",\"./_iterators\",\"./_wks\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/web.dom.iterable.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./es6.array.iterator');                                                                                       // 1\nvar global        = require('./_global')                                                                               // 2\n  , hide          = require('./_hide')                                                                                 // 3\n  , Iterators     = require('./_iterators')                                                                            // 4\n  , TO_STRING_TAG = require('./_wks')('toStringTag');                                                                  // 5\n                                                                                                                       // 6\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){  // 7\n  var NAME       = collections[i]                                                                                      // 8\n    , Collection = global[NAME]                                                                                        // 9\n    , proto      = Collection && Collection.prototype;                                                                 // 10\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);                                                  // 11\n  Iterators[NAME] = Iterators.Array;                                                                                   // 12\n}                                                                                                                      // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.array.iterator.js\":[\"./_add-to-unscopables\",\"./_iter-step\",\"./_iterators\",\"./_to-iobject\",\"./_iter-define\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.array.iterator.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\nvar addToUnscopables = require('./_add-to-unscopables')                                                                // 2\n  , step             = require('./_iter-step')                                                                         // 3\n  , Iterators        = require('./_iterators')                                                                         // 4\n  , toIObject        = require('./_to-iobject');                                                                       // 5\n                                                                                                                       // 6\n// 22.1.3.4 Array.prototype.entries()                                                                                  // 7\n// 22.1.3.13 Array.prototype.keys()                                                                                    // 8\n// 22.1.3.29 Array.prototype.values()                                                                                  // 9\n// 22.1.3.30 Array.prototype[@@iterator]()                                                                             // 10\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){                                   // 11\n  this._t = toIObject(iterated); // target                                                                             // 12\n  this._i = 0;                   // next index                                                                         // 13\n  this._k = kind;                // kind                                                                               // 14\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()                                                                          // 15\n}, function(){                                                                                                         // 16\n  var O     = this._t                                                                                                  // 17\n    , kind  = this._k                                                                                                  // 18\n    , index = this._i++;                                                                                               // 19\n  if(!O || index >= O.length){                                                                                         // 20\n    this._t = undefined;                                                                                               // 21\n    return step(1);                                                                                                    // 22\n  }                                                                                                                    // 23\n  if(kind == 'keys'  )return step(0, index);                                                                           // 24\n  if(kind == 'values')return step(0, O[index]);                                                                        // 25\n  return step(0, [index, O[index]]);                                                                                   // 26\n}, 'values');                                                                                                          // 27\n                                                                                                                       // 28\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)                                                 // 29\nIterators.Arguments = Iterators.Array;                                                                                 // 30\n                                                                                                                       // 31\naddToUnscopables('keys');                                                                                              // 32\naddToUnscopables('values');                                                                                            // 33\naddToUnscopables('entries');                                                                                           // 34\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_add-to-unscopables.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_add-to-unscopables.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(){ /* empty */ };                                                                            // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_iter-step.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_iter-step.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = function(done, value){                                                                                // 1\n  return {value: value, done: !!done};                                                                                 // 2\n};                                                                                                                     // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_wks-ext.js\":[\"./_wks\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-ext.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = require('./_wks');                                                                                         // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.symbol.js\":[\"./_global\",\"./_has\",\"./_descriptors\",\"./_export\",\"./_redefine\",\"./_meta\",\"./_fails\",\"./_shared\",\"./_set-to-string-tag\",\"./_uid\",\"./_wks\",\"./_wks-ext\",\"./_wks-define\",\"./_keyof\",\"./_enum-keys\",\"./_is-array\",\"./_an-object\",\"./_to-iobject\",\"./_to-primitive\",\"./_property-desc\",\"./_object-create\",\"./_object-gopn-ext\",\"./_object-gopd\",\"./_object-dp\",\"./_object-keys\",\"./_object-gopn\",\"./_object-pie\",\"./_object-gops\",\"./_library\",\"./_hide\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.symbol.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n'use strict';                                                                                                          // 1\n// ECMAScript 6 symbols shim                                                                                           // 2\nvar global         = require('./_global')                                                                              // 3\n  , has            = require('./_has')                                                                                 // 4\n  , DESCRIPTORS    = require('./_descriptors')                                                                         // 5\n  , $export        = require('./_export')                                                                              // 6\n  , redefine       = require('./_redefine')                                                                            // 7\n  , META           = require('./_meta').KEY                                                                            // 8\n  , $fails         = require('./_fails')                                                                               // 9\n  , shared         = require('./_shared')                                                                              // 10\n  , setToStringTag = require('./_set-to-string-tag')                                                                   // 11\n  , uid            = require('./_uid')                                                                                 // 12\n  , wks            = require('./_wks')                                                                                 // 13\n  , wksExt         = require('./_wks-ext')                                                                             // 14\n  , wksDefine      = require('./_wks-define')                                                                          // 15\n  , keyOf          = require('./_keyof')                                                                               // 16\n  , enumKeys       = require('./_enum-keys')                                                                           // 17\n  , isArray        = require('./_is-array')                                                                            // 18\n  , anObject       = require('./_an-object')                                                                           // 19\n  , toIObject      = require('./_to-iobject')                                                                          // 20\n  , toPrimitive    = require('./_to-primitive')                                                                        // 21\n  , createDesc     = require('./_property-desc')                                                                       // 22\n  , _create        = require('./_object-create')                                                                       // 23\n  , gOPNExt        = require('./_object-gopn-ext')                                                                     // 24\n  , $GOPD          = require('./_object-gopd')                                                                         // 25\n  , $DP            = require('./_object-dp')                                                                           // 26\n  , $keys          = require('./_object-keys')                                                                         // 27\n  , gOPD           = $GOPD.f                                                                                           // 28\n  , dP             = $DP.f                                                                                             // 29\n  , gOPN           = gOPNExt.f                                                                                         // 30\n  , $Symbol        = global.Symbol                                                                                     // 31\n  , $JSON          = global.JSON                                                                                       // 32\n  , _stringify     = $JSON && $JSON.stringify                                                                          // 33\n  , PROTOTYPE      = 'prototype'                                                                                       // 34\n  , HIDDEN         = wks('_hidden')                                                                                    // 35\n  , TO_PRIMITIVE   = wks('toPrimitive')                                                                                // 36\n  , isEnum         = {}.propertyIsEnumerable                                                                           // 37\n  , SymbolRegistry = shared('symbol-registry')                                                                         // 38\n  , AllSymbols     = shared('symbols')                                                                                 // 39\n  , OPSymbols      = shared('op-symbols')                                                                              // 40\n  , ObjectProto    = Object[PROTOTYPE]                                                                                 // 41\n  , USE_NATIVE     = typeof $Symbol == 'function'                                                                      // 42\n  , QObject        = global.QObject;                                                                                   // 43\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173                                      // 44\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;                                         // 45\n                                                                                                                       // 46\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687                                         // 47\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){                                                                  // 48\n  return _create(dP({}, 'a', {                                                                                         // 49\n    get: function(){ return dP(this, 'a', {value: 7}).a; }                                                             // 50\n  })).a != 7;                                                                                                          // 51\n}) ? function(it, key, D){                                                                                             // 52\n  var protoDesc = gOPD(ObjectProto, key);                                                                              // 53\n  if(protoDesc)delete ObjectProto[key];                                                                                // 54\n  dP(it, key, D);                                                                                                      // 55\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);                                                  // 56\n} : dP;                                                                                                                // 57\n                                                                                                                       // 58\nvar wrap = function(tag){                                                                                              // 59\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);                                                             // 60\n  sym._k = tag;                                                                                                        // 61\n  return sym;                                                                                                          // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){                                       // 65\n  return typeof it == 'symbol';                                                                                        // 66\n} : function(it){                                                                                                      // 67\n  return it instanceof $Symbol;                                                                                        // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\nvar $defineProperty = function defineProperty(it, key, D){                                                             // 71\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);                                                            // 72\n  anObject(it);                                                                                                        // 73\n  key = toPrimitive(key, true);                                                                                        // 74\n  anObject(D);                                                                                                         // 75\n  if(has(AllSymbols, key)){                                                                                            // 76\n    if(!D.enumerable){                                                                                                 // 77\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));                                                           // 78\n      it[HIDDEN][key] = true;                                                                                          // 79\n    } else {                                                                                                           // 80\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;                                                   // 81\n      D = _create(D, {enumerable: createDesc(0, false)});                                                              // 82\n    } return setSymbolDesc(it, key, D);                                                                                // 83\n  } return dP(it, key, D);                                                                                             // 84\n};                                                                                                                     // 85\nvar $defineProperties = function defineProperties(it, P){                                                              // 86\n  anObject(it);                                                                                                        // 87\n  var keys = enumKeys(P = toIObject(P))                                                                                // 88\n    , i    = 0                                                                                                         // 89\n    , l = keys.length                                                                                                  // 90\n    , key;                                                                                                             // 91\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);                                                            // 92\n  return it;                                                                                                           // 93\n};                                                                                                                     // 94\nvar $create = function create(it, P){                                                                                  // 95\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);                                            // 96\n};                                                                                                                     // 97\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){                                                        // 98\n  var E = isEnum.call(this, key = toPrimitive(key, true));                                                             // 99\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;                                // 100\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;           // 101\n};                                                                                                                     // 102\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){                                            // 103\n  it  = toIObject(it);                                                                                                 // 104\n  key = toPrimitive(key, true);                                                                                        // 105\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;                                        // 106\n  var D = gOPD(it, key);                                                                                               // 107\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;                           // 108\n  return D;                                                                                                            // 109\n};                                                                                                                     // 110\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){                                                           // 111\n  var names  = gOPN(toIObject(it))                                                                                     // 112\n    , result = []                                                                                                      // 113\n    , i      = 0                                                                                                       // 114\n    , key;                                                                                                             // 115\n  while(names.length > i){                                                                                             // 116\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);                            // 117\n  } return result;                                                                                                     // 118\n};                                                                                                                     // 119\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){                                                       // 120\n  var IS_OP  = it === ObjectProto                                                                                      // 121\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))                                                                 // 122\n    , result = []                                                                                                      // 123\n    , i      = 0                                                                                                       // 124\n    , key;                                                                                                             // 125\n  while(names.length > i){                                                                                             // 126\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);       // 127\n  } return result;                                                                                                     // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n// 19.4.1.1 Symbol([description])                                                                                      // 131\nif(!USE_NATIVE){                                                                                                       // 132\n  $Symbol = function Symbol(){                                                                                         // 133\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');                                        // 134\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);                                                    // 135\n    var $set = function(value){                                                                                        // 136\n      if(this === ObjectProto)$set.call(OPSymbols, value);                                                             // 137\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;                                        // 138\n      setSymbolDesc(this, tag, createDesc(1, value));                                                                  // 139\n    };                                                                                                                 // 140\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});                         // 141\n    return wrap(tag);                                                                                                  // 142\n  };                                                                                                                   // 143\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){                                                        // 144\n    return this._k;                                                                                                    // 145\n  });                                                                                                                  // 146\n                                                                                                                       // 147\n  $GOPD.f = $getOwnPropertyDescriptor;                                                                                 // 148\n  $DP.f   = $defineProperty;                                                                                           // 149\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;                                                      // 150\n  require('./_object-pie').f  = $propertyIsEnumerable;                                                                 // 151\n  require('./_object-gops').f = $getOwnPropertySymbols;                                                                // 152\n                                                                                                                       // 153\n  if(DESCRIPTORS && !require('./_library')){                                                                           // 154\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);                                        // 155\n  }                                                                                                                    // 156\n                                                                                                                       // 157\n  wksExt.f = function(name){                                                                                           // 158\n    return wrap(wks(name));                                                                                            // 159\n  }                                                                                                                    // 160\n}                                                                                                                      // 161\n                                                                                                                       // 162\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});                                           // 163\n                                                                                                                       // 164\nfor(var symbols = (                                                                                                    // 165\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'     // 167\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);                                                           // 168\n                                                                                                                       // 169\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);                               // 170\n                                                                                                                       // 171\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {                                                               // 172\n  // 19.4.2.1 Symbol.for(key)                                                                                          // 173\n  'for': function(key){                                                                                                // 174\n    return has(SymbolRegistry, key += '')                                                                              // 175\n      ? SymbolRegistry[key]                                                                                            // 176\n      : SymbolRegistry[key] = $Symbol(key);                                                                            // 177\n  },                                                                                                                   // 178\n  // 19.4.2.5 Symbol.keyFor(sym)                                                                                       // 179\n  keyFor: function keyFor(key){                                                                                        // 180\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);                                                                // 181\n    throw TypeError(key + ' is not a symbol!');                                                                        // 182\n  },                                                                                                                   // 183\n  useSetter: function(){ setter = true; },                                                                             // 184\n  useSimple: function(){ setter = false; }                                                                             // 185\n});                                                                                                                    // 186\n                                                                                                                       // 187\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {                                                               // 188\n  // 19.1.2.2 Object.create(O [, Properties])                                                                          // 189\n  create: $create,                                                                                                     // 190\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)                                                                  // 191\n  defineProperty: $defineProperty,                                                                                     // 192\n  // 19.1.2.3 Object.defineProperties(O, Properties)                                                                   // 193\n  defineProperties: $defineProperties,                                                                                 // 194\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)                                                                    // 195\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,                                                                 // 196\n  // 19.1.2.7 Object.getOwnPropertyNames(O)                                                                            // 197\n  getOwnPropertyNames: $getOwnPropertyNames,                                                                           // 198\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)                                                                          // 199\n  getOwnPropertySymbols: $getOwnPropertySymbols                                                                        // 200\n});                                                                                                                    // 201\n                                                                                                                       // 202\n// 24.3.2 JSON.stringify(value [, replacer [, space]])                                                                 // 203\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){                                            // 204\n  var S = $Symbol();                                                                                                   // 205\n  // MS Edge converts symbol values to JSON as {}                                                                      // 206\n  // WebKit converts symbol values to JSON as null                                                                     // 207\n  // V8 throws on boxed symbols                                                                                        // 208\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';                   // 209\n})), 'JSON', {                                                                                                         // 210\n  stringify: function stringify(it){                                                                                   // 211\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined                                     // 212\n    var args = [it]                                                                                                    // 213\n      , i    = 1                                                                                                       // 214\n      , replacer, $replacer;                                                                                           // 215\n    while(arguments.length > i)args.push(arguments[i++]);                                                              // 216\n    replacer = args[1];                                                                                                // 217\n    if(typeof replacer == 'function')$replacer = replacer;                                                             // 218\n    if($replacer || !isArray(replacer))replacer = function(key, value){                                                // 219\n      if($replacer)value = $replacer.call(this, key, value);                                                           // 220\n      if(!isSymbol(value))return value;                                                                                // 221\n    };                                                                                                                 // 222\n    args[1] = replacer;                                                                                                // 223\n    return _stringify.apply($JSON, args);                                                                              // 224\n  }                                                                                                                    // 225\n});                                                                                                                    // 226\n                                                                                                                       // 227\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)                                                                      // 228\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);  // 229\n// 19.4.3.5 Symbol.prototype[@@toStringTag]                                                                            // 230\nsetToStringTag($Symbol, 'Symbol');                                                                                     // 231\n// 20.2.1.9 Math[@@toStringTag]                                                                                        // 232\nsetToStringTag(Math, 'Math', true);                                                                                    // 233\n// 24.3.3 JSON[@@toStringTag]                                                                                          // 234\nsetToStringTag(global.JSON, 'JSON', true);                                                                             // 235\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_meta.js\":[\"./_uid\",\"./_is-object\",\"./_has\",\"./_object-dp\",\"./_fails\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_meta.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar META     = require('./_uid')('meta')                                                                               // 1\n  , isObject = require('./_is-object')                                                                                 // 2\n  , has      = require('./_has')                                                                                       // 3\n  , setDesc  = require('./_object-dp').f                                                                               // 4\n  , id       = 0;                                                                                                      // 5\nvar isExtensible = Object.isExtensible || function(){                                                                  // 6\n  return true;                                                                                                         // 7\n};                                                                                                                     // 8\nvar FREEZE = !require('./_fails')(function(){                                                                          // 9\n  return isExtensible(Object.preventExtensions({}));                                                                   // 10\n});                                                                                                                    // 11\nvar setMeta = function(it){                                                                                            // 12\n  setDesc(it, META, {value: {                                                                                          // 13\n    i: 'O' + ++id, // object ID                                                                                        // 14\n    w: {}          // weak collections IDs                                                                             // 15\n  }});                                                                                                                 // 16\n};                                                                                                                     // 17\nvar fastKey = function(it, create){                                                                                    // 18\n  // return primitive with prefix                                                                                      // 19\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;                       // 20\n  if(!has(it, META)){                                                                                                  // 21\n    // can't set metadata to uncaught frozen object                                                                    // 22\n    if(!isExtensible(it))return 'F';                                                                                   // 23\n    // not necessary to add metadata                                                                                   // 24\n    if(!create)return 'E';                                                                                             // 25\n    // add missing metadata                                                                                            // 26\n    setMeta(it);                                                                                                       // 27\n  // return object ID                                                                                                  // 28\n  } return it[META].i;                                                                                                 // 29\n};                                                                                                                     // 30\nvar getWeak = function(it, create){                                                                                    // 31\n  if(!has(it, META)){                                                                                                  // 32\n    // can't set metadata to uncaught frozen object                                                                    // 33\n    if(!isExtensible(it))return true;                                                                                  // 34\n    // not necessary to add metadata                                                                                   // 35\n    if(!create)return false;                                                                                           // 36\n    // add missing metadata                                                                                            // 37\n    setMeta(it);                                                                                                       // 38\n  // return hash weak collections IDs                                                                                  // 39\n  } return it[META].w;                                                                                                 // 40\n};                                                                                                                     // 41\n// add metadata on freeze-family methods calling                                                                       // 42\nvar onFreeze = function(it){                                                                                           // 43\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);                                            // 44\n  return it;                                                                                                           // 45\n};                                                                                                                     // 46\nvar meta = module.exports = {                                                                                          // 47\n  KEY:      META,                                                                                                      // 48\n  NEED:     false,                                                                                                     // 49\n  fastKey:  fastKey,                                                                                                   // 50\n  getWeak:  getWeak,                                                                                                   // 51\n  onFreeze: onFreeze                                                                                                   // 52\n};                                                                                                                     // 53\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_wks-define.js\":[\"./_global\",\"./_core\",\"./_library\",\"./_wks-ext\",\"./_object-dp\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_wks-define.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar global         = require('./_global')                                                                              // 1\n  , core           = require('./_core')                                                                                // 2\n  , LIBRARY        = require('./_library')                                                                             // 3\n  , wksExt         = require('./_wks-ext')                                                                             // 4\n  , defineProperty = require('./_object-dp').f;                                                                        // 5\nmodule.exports = function(name){                                                                                       // 6\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});                                     // 7\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});               // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_keyof.js\":[\"./_object-keys\",\"./_to-iobject\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_keyof.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar getKeys   = require('./_object-keys')                                                                              // 1\n  , toIObject = require('./_to-iobject');                                                                              // 2\nmodule.exports = function(object, el){                                                                                 // 3\n  var O      = toIObject(object)                                                                                       // 4\n    , keys   = getKeys(O)                                                                                              // 5\n    , length = keys.length                                                                                             // 6\n    , index  = 0                                                                                                       // 7\n    , key;                                                                                                             // 8\n  while(length > index)if(O[key = keys[index++]] === el)return key;                                                    // 9\n};                                                                                                                     // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_enum-keys.js\":[\"./_object-keys\",\"./_object-gops\",\"./_object-pie\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_enum-keys.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// all enumerable object keys, includes symbols                                                                        // 1\nvar getKeys = require('./_object-keys')                                                                                // 2\n  , gOPS    = require('./_object-gops')                                                                                // 3\n  , pIE     = require('./_object-pie');                                                                                // 4\nmodule.exports = function(it){                                                                                         // 5\n  var result     = getKeys(it)                                                                                         // 6\n    , getSymbols = gOPS.f;                                                                                             // 7\n  if(getSymbols){                                                                                                      // 8\n    var symbols = getSymbols(it)                                                                                       // 9\n      , isEnum  = pIE.f                                                                                                // 10\n      , i       = 0                                                                                                    // 11\n      , key;                                                                                                           // 12\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);                                  // 13\n  } return result;                                                                                                     // 14\n};                                                                                                                     // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gops.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gops.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = Object.getOwnPropertySymbols;                                                                              // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_object-pie.js\":function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-pie.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nexports.f = {}.propertyIsEnumerable;                                                                                   // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_is-array.js\":[\"./_cof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_is-array.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 7.2.2 IsArray(argument)                                                                                             // 1\nvar cof = require('./_cof');                                                                                           // 2\nmodule.exports = Array.isArray || function isArray(arg){                                                               // 3\n  return cof(arg) == 'Array';                                                                                          // 4\n};                                                                                                                     // 5\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn-ext.js\":[\"./_to-iobject\",\"./_object-gopn\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn-ext.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window                                           // 1\nvar toIObject = require('./_to-iobject')                                                                               // 2\n  , gOPN      = require('./_object-gopn').f                                                                            // 3\n  , toString  = {}.toString;                                                                                           // 4\n                                                                                                                       // 5\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames                                    // 6\n  ? Object.getOwnPropertyNames(window) : [];                                                                           // 7\n                                                                                                                       // 8\nvar getWindowNames = function(it){                                                                                     // 9\n  try {                                                                                                                // 10\n    return gOPN(it);                                                                                                   // 11\n  } catch(e){                                                                                                          // 12\n    return windowNames.slice();                                                                                        // 13\n  }                                                                                                                    // 14\n};                                                                                                                     // 15\n                                                                                                                       // 16\nmodule.exports.f = function getOwnPropertyNames(it){                                                                   // 17\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));             // 18\n};                                                                                                                     // 19\n                                                                                                                       // 20\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopn.js\":[\"./_object-keys-internal\",\"./_enum-bug-keys\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopn.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)                                                                   // 1\nvar $keys      = require('./_object-keys-internal')                                                                    // 2\n  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');                                            // 3\n                                                                                                                       // 4\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){                                             // 5\n  return $keys(O, hiddenKeys);                                                                                         // 6\n};                                                                                                                     // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"_object-gopd.js\":[\"./_object-pie\",\"./_property-desc\",\"./_to-iobject\",\"./_to-primitive\",\"./_has\",\"./_ie8-dom-define\",\"./_descriptors\",function(require,exports){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/_object-gopd.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar pIE            = require('./_object-pie')                                                                          // 1\n  , createDesc     = require('./_property-desc')                                                                       // 2\n  , toIObject      = require('./_to-iobject')                                                                          // 3\n  , toPrimitive    = require('./_to-primitive')                                                                        // 4\n  , has            = require('./_has')                                                                                 // 5\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')                                                                      // 6\n  , gOPD           = Object.getOwnPropertyDescriptor;                                                                  // 7\n                                                                                                                       // 8\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){                                // 9\n  O = toIObject(O);                                                                                                    // 10\n  P = toPrimitive(P, true);                                                                                            // 11\n  if(IE8_DOM_DEFINE)try {                                                                                              // 12\n    return gOPD(O, P);                                                                                                 // 13\n  } catch(e){ /* empty */ }                                                                                            // 14\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);                                                             // 15\n};                                                                                                                     // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es6.object.to-string.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es6.object.to-string.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es7.symbol.async-iterator.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.async-iterator.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('asyncIterator');                                                                             // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"es7.symbol.observable.js\":[\"./_wks-define\",function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/core-js/library/modules/es7.symbol.observable.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nrequire('./_wks-define')('observable');                                                                                // 1\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js"}]